PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.costmodel.storagecost::p_calculate_quantity_based_cost"(
		IN TIME_OFFSET INTEGER,
        IN STORAGE_TIME "sap.tm.trp.db.costmodel.storagecost::tt_storage_time",
		IN SETTLEMENT_STOCK "sap.tm.trp.db.costmodel.storagecost::tt_settlement_stock",
		IN COST_DATASET_ORIGIN "sap.tm.trp.db.costmodel.storagecost::tt_matched_cost_dataset",
		IN RESOURCE_TYPE_TEU "sap.tm.trp.db.costmodel.storagecost::tt_resource_type_teu",
		OUT RESULT "sap.tm.trp.db.costmodel.storagecost::tt_storage_cost_period"
	)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	DEFAULT SCHEMA "SAP_TM_TRP"
AS
BEGIN
      
      DECLARE SETTLEMENT_TIME_OFFSET INTEGER;
      SELECT MOD(:TIME_OFFSET + 24 * 60, 24 * 60) * 60 AS SETTLEMENT_TIME_OFFSET INTO SETTLEMENT_TIME_OFFSET FROM DUMMY;
      
	  t_storage_package_period = SELECT 
	  T1.LOCATION, 
	  T1.RESOURCE_TYPE, 
	  T1.START_TIME, 
	  T1.END_TIME, 
	  T1.QUANTITY, 
	  T2.SETTLEMENT_TIME, 
	  T2.VALID_TO, 
	  T2.STOCK,
	  GREATEST(T1.START_TIME, T2.SETTLEMENT_TIME) AS MATCHED_FROM,
	  LEAST(T1.END_TIME, T2.VALID_TO) AS MATCHED_TO
	  FROM :STORAGE_TIME T1
	  INNER JOIN :SETTLEMENT_STOCK T2 
		ON T1.LOCATION = T2.LOCATION
		AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
	  WHERE
		((T1.START_TIME BETWEEN T2.SETTLEMENT_TIME AND T2.VALID_TO) OR (T1.END_TIME BETWEEN T2.SETTLEMENT_TIME AND T2.VALID_TO))
		OR ((T2.SETTLEMENT_TIME BETWEEN T1.START_TIME AND T1.END_TIME) AND (T2.VALID_TO BETWEEN T1.START_TIME AND T1.END_TIME));
	  
	  /*
	  t_storage_package = SELECT 
	  T1.LOCATION, 
	  T1.RESOURCE_TYPE, 
	  T1.START_TIME, 
	  T1.END_TIME, 
	  T1.QUANTITY, 
	  T1.SETTLEMENT_TIME, 
	  T1.VALID_TO, 
	  T1.STOCK, 
	  T1.MATCHED_FROM, 
	  T1.MATCHED_TO, 
	  SECONDS_BETWEEN (T1.MATCHED_FROM, T1.MATCHED_TO)/3600/24 AS STORAGE_DAYS,
	  TO_DECIMAL (CASE T3.TEU WHEN NULL THEN 0 WHEN 0 THEN 0 ELSE SECONDS_BETWEEN (T1.MATCHED_FROM, T1.MATCHED_TO)/3600/24 * IFNULL(T2.PER_DIEM_COST,0) / T3.TEU  * T1.QUANTITY END ,13,3) AS COST
	  FROM :t_storage_package_period T1
	  INNER JOIN :COST_DATASET_ORIGIN T2
	  ON T1.LOCATION = T2.LOCATION AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
		AND T1.STOCK BETWEEN T2.THRESHOLD_FROM AND T2.THRESHOLD_TO
	  LEFT JOIN :RESOURCE_TYPE_TEU T3 ON T1.RESOURCE_TYPE = T3.RESOURCE_TYPE;
	  */
	  
	  t_storage_package = SELECT 
	  T1.LOCATION, 
	  T1.RESOURCE_TYPE, 
	  T1.START_TIME, 
	  T1.END_TIME, 
	  T1.QUANTITY, 
	  T1.SETTLEMENT_TIME, 
	  T1.VALID_TO, 
	  T1.STOCK, 
	  T1.MATCHED_FROM, 
	  T1.MATCHED_TO, 
	  IFNULL(T2.PER_DIEM_COST,0) AS PER_DIEM_COST,
	  T3.TEU
	  FROM :t_storage_package_period T1
	  INNER JOIN :COST_DATASET_ORIGIN T2
	  ON T1.LOCATION = T2.LOCATION AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
		AND T1.STOCK BETWEEN T2.THRESHOLD_FROM AND T2.THRESHOLD_TO
	  LEFT JOIN :RESOURCE_TYPE_TEU T3 ON T1.RESOURCE_TYPE = T3.RESOURCE_TYPE;
	  
	  -- calculate for every 00:00
	  t_storage_package_matched_day = SELECT 
	  *,
	  ADD_SECONDS(TO_TIMESTAMP (YEAR (MATCHED_FROM) || '-' || MONTH(MATCHED_FROM) || '-' || DAYOFMONTH(MATCHED_FROM) || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),24*60*60-SETTLEMENT_TIME_OFFSET) AS MATCHED_FROM_DAY,
	  ADD_SECONDS(TO_TIMESTAMP (YEAR (MATCHED_TO) || '-' || MONTH(MATCHED_TO) || '-' || DAYOFMONTH(MATCHED_TO) || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),24*60*60-SETTLEMENT_TIME_OFFSET) AS MATCHED_TO_DAY
	  FROM :t_storage_package;
	   
	  t_storage_package_matched_night = SELECT 
	  *,
	  CASE WHEN MATCHED_FROM_DAY < MATCHED_FROM THEN -1 ELSE 0 END AS BEFORE_DAY,
	  DAYS_BETWEEN(MATCHED_FROM_DAY,MATCHED_TO_DAY) AS BETWEEN_DAY,
	  CASE WHEN MATCHED_TO_DAY <= MATCHED_TO THEN 1 ELSE 0 END AS AFTER_DAY
	  FROM :t_storage_package_matched_day;
	   
	  t_storage_package_cost = SELECT 
	  LOCATION,
	  RESOURCE_TYPE,
	  START_TIME,
	  END_TIME,
	  QUANTITY,
	  STOCK,
	  PER_DIEM_COST/TEU AS PER_DIEM_COST,
	  (BEFORE_DAY + BETWEEN_DAY + AFTER_DAY) AS DURING_DAYS,
	  (BEFORE_DAY + BETWEEN_DAY + AFTER_DAY)*PER_DIEM_COST/TEU*QUANTITY AS COST 
	  FROM :t_storage_package_matched_night;
	  
	  RESULT = SELECT LOCATION, RESOURCE_TYPE, START_TIME, END_TIME, SUM(COST) AS COST FROM :t_storage_package_cost GROUP BY LOCATION, RESOURCE_TYPE, START_TIME, END_TIME; 
END;
