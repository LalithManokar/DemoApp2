PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.costmodel.storagecost::p_calculate_time_based_cost"(
		IN TIME_OFFSET INTEGER,
        IN STORAGE_TIME "sap.tm.trp.db.costmodel.storagecost::tt_storage_time",
		IN COST_DATASET_ORIGIN "sap.tm.trp.db.costmodel.storagecost::tt_matched_cost_dataset",
		IN RESOURCE_TYPE_TEU "sap.tm.trp.db.costmodel.storagecost::tt_resource_type_teu",
		OUT RESULT "sap.tm.trp.db.costmodel.storagecost::tt_storage_cost_period"
	)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	DEFAULT SCHEMA "SAP_TM_TRP"
AS
BEGIN
      
      DECLARE SETTLEMENT_TIME_OFFSET INTEGER;
      SELECT MOD(:TIME_OFFSET + 24 * 60, 24 * 60) * 60 AS SETTLEMENT_TIME_OFFSET INTO SETTLEMENT_TIME_OFFSET FROM DUMMY;
      
	  COST_DATASET = SELECT 
		T1.LOCATION,
		T1.RESOURCE_TYPE,
		T1.TYPE,
		T1.FREE_POOL_TYPE,
		T1.START_AT,
		T1.START_TIME,
		T1.THRESHOLD_FROM,
		T1.THRESHOLD_TO,
		T1.UOM_CODE,
        CASE T1.UOM_CODE WHEN 'TEU' THEN T1.PER_DIEM_COST * T2.TEU ELSE T1.PER_DIEM_COST END AS PER_DIEM_COST
	  FROM :COST_DATASET_ORIGIN T1
      LEFT JOIN :RESOURCE_TYPE_TEU T2 ON T1.RESOURCE_TYPE = T2.RESOURCE_TYPE;
      
      /*
      t_time_cost_for_level = SELECT 
	      T1.LOCATION,
	      T1.RESOURCE_TYPE,
	      T2.START_TIME,
	      T2.END_TIME,
	      T1.THRESHOLD_FROM - 1 AS DAYS_FROM,
	      LEAST(T1.THRESHOLD_TO, SECONDS_BETWEEN (T2.START_TIME, T2.END_TIME)/3600/24) AS DAYS_TO,
	      (LEAST(T1.THRESHOLD_TO, SECONDS_BETWEEN (T2.START_TIME, T2.END_TIME)/3600/24) - T1.THRESHOLD_FROM + 1)*T1.PER_DIEM_COST*T2.QUANTITY AS COST
      FROM :COST_DATASET T1
      INNER JOIN :STORAGE_TIME T2 ON T1.LOCATION = T2.LOCATION AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
      WHERE T1.TYPE = 'TIME' AND T1.THRESHOLD_FROM - 1 < SECONDS_BETWEEN (T2.START_TIME, T2.END_TIME)/3600/24;
      */
      
      t_storage_time_matched_day = SELECT 
      *,
	  ADD_SECONDS(TO_TIMESTAMP (YEAR (START_TIME) || '-' || MONTH(START_TIME) || '-' || DAYOFMONTH(START_TIME) || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),24*60*60-SETTLEMENT_TIME_OFFSET) AS MATCHED_FROM_DAY,
	  ADD_SECONDS(TO_TIMESTAMP (YEAR (END_TIME) || '-' || MONTH(END_TIME) || '-' || DAYOFMONTH(END_TIME) || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS'),24*60*60-SETTLEMENT_TIME_OFFSET) AS MATCHED_TO_DAY
	  FROM :STORAGE_TIME;
      
      t_storage_time_matched_night = SELECT 
	  *,
	  CASE WHEN MATCHED_FROM_DAY < START_TIME THEN -1 ELSE 0 END AS BEFORE_DAY,
	  DAYS_BETWEEN(MATCHED_FROM_DAY,MATCHED_TO_DAY) AS BETWEEN_DAY,
	  CASE WHEN MATCHED_TO_DAY <= END_TIME THEN 1 ELSE 0 END AS AFTER_DAY
	  FROM :t_storage_time_matched_day;
      
      t_storage_time_total_days = SELECT *, (BEFORE_DAY + BETWEEN_DAY + AFTER_DAY) AS DAYS FROM :t_storage_time_matched_night;
      
      t_time_cost_for_level = SELECT 
	      T1.LOCATION,
	      T1.RESOURCE_TYPE,
	      T2.START_TIME,
	      T2.END_TIME,
	      T1.THRESHOLD_FROM - 1 AS DAYS_FROM,
	      LEAST(T1.THRESHOLD_TO, T2.DAYS) AS DAYS_TO,
	      T1.PER_DIEM_COST,
	      T2.QUANTITY,
	      (LEAST(T1.THRESHOLD_TO, T2.DAYS) - (T1.THRESHOLD_FROM - 1)) AS DURING_DAYS,
	      (LEAST(T1.THRESHOLD_TO, T2.DAYS) - (T1.THRESHOLD_FROM - 1)) * T1.PER_DIEM_COST * T2.QUANTITY AS COST
      FROM :COST_DATASET T1
      INNER JOIN :t_storage_time_total_days T2 ON T1.LOCATION = T2.LOCATION AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
      WHERE T1.TYPE = 'TIME' AND T1.THRESHOLD_FROM - 1 < T2.DAYS;
      
      RESULT = SELECT 
	      LOCATION,
	      RESOURCE_TYPE,
	      START_TIME,
	      END_TIME,
	      SUM(COST) AS COST
      FROM :t_time_cost_for_level
      GROUP BY LOCATION,RESOURCE_TYPE, START_TIME, END_TIME;
      
END;
