PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.costmodel.storagecost::p_get_storage_time"(
		IN SD_RESULT "sap.tm.trp.db.costmodel.storagecost::tt_sd_result",      
        OUT STORAGE_TIME "sap.tm.trp.db.costmodel.storagecost::tt_storage_time"
	)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	DEFAULT SCHEMA "SAP_TM_TRP"
AS
BEGIN
	  DECLARE START_TIME TIMESTAMP;
	  DECLARE END_TIME TIMESTAMP;
	  
	  SELECT MIN (START_TIME), MAX(END_TIME) INTO START_TIME, END_TIME FROM :SD_RESULT;
	  
	  t_sd_result_with_end_stock = SELECT LOCATION, RESOURCE_TYPE, START_TIME, END_TIME,
	  GREATEST (SUPPLY + STOCK - DEMAND,0) AS END_STOCK,
	  STOCK AS START_STOCK,
	  SUPPLY + STOCK AS SUPPLY,
	  DEMAND
	  FROM :SD_RESULT;
	  
	  t_sd_result = SELECT T1.LOCATION, T1.RESOURCE_TYPE, T1.START_TIME, T1.END_TIME,
	  T1.END_STOCK,
	  T1.START_STOCK + IFNULL(T2.END_STOCK,0) AS START_STOCK,
	  CASE T1.START_TIME WHEN :START_TIME THEN T1.SUPPLY - T1.START_STOCK ELSE T1.SUPPLY - T2.END_STOCK END AS SUPPLY,
	  T1.DEMAND
	  FROM :t_sd_result_with_end_stock T1
	  LEFT JOIN :t_sd_result_with_end_stock T2 
	  ON T1.LOCATION = T2.LOCATION AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE AND T1.START_TIME = T2.END_TIME;
	  
	  t_move_log = 
	  SELECT LOCATION, RESOURCE_TYPE, START_TIME, START_STOCK AS QUANTITY,'IN' AS TYPE FROM :t_sd_result WHERE START_TIME = :START_TIME
	  UNION
	  SELECT LOCATION, RESOURCE_TYPE, ADD_SECONDS(START_TIME,SECONDS_BETWEEN(START_TIME,END_TIME)/2) AS START_TIME, SUPPLY AS QUANTITY,'IN' AS TYPE FROM :t_sd_result WHERE SUPPLY > 0
	  UNION
	  SELECT LOCATION, RESOURCE_TYPE, ADD_SECONDS(START_TIME,SECONDS_BETWEEN(START_TIME,END_TIME)/2) AS START_TIME, DEMAND AS QUANTITY,'OUT' AS TYPE FROM :t_sd_result WHERE DEMAND > 0;
	  
	  --> START calculate total amount, and add missing out log for end of plan
	  t_move_total_quantity = SELECT LOCATION, RESOURCE_TYPE, TYPE, SUM (QUANTITY) AS QUANTITY 
	  FROM :t_move_log GROUP BY LOCATION, RESOURCE_TYPE, TYPE;
	  
	  t_move_total_quantity_with_missing = SELECT * FROM :t_move_total_quantity
	  UNION 
	  SELECT T1.LOCATION,T1.RESOURCE_TYPE,'OUT' AS TYPE, 0 AS QUANTITY FROM :t_move_total_quantity T1 
	  LEFT JOIN :t_move_total_quantity T2 
	  ON T1.LOCATION = T2.LOCATION 
	  AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
	  AND T2.TYPE = 'OUT'
	  WHERE T1.TYPE = 'IN' AND T2.TYPE IS NULL;
	  
	  t_move_remaining_quantity = SELECT T1.LOCATION, T1.RESOURCE_TYPE, (T1.QUANTITY - T2.QUANTITY) AS REMAINING_QUANTITY
	  FROM :t_move_total_quantity_with_missing T1
	  INNER JOIN :t_move_total_quantity_with_missing T2
	  ON T1.TYPE = 'IN' AND T2.TYPE = 'OUT' AND T1.LOCATION = T2.LOCATION AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE;
	  
	  t_move_log_with_remaining = SELECT * FROM :t_move_log
	  UNION
	  SELECT LOCATION, RESOURCE_TYPE, :END_TIME AS START_TIME, REMAINING_QUANTITY AS QUANTITY, 'OUT' AS TYPE FROM :t_move_remaining_quantity WHERE REMAINING_QUANTITY > 0;
	  --> END


	  t_move_log_with_seq = SELECT ROW_NUMBER() OVER (PARTITION BY LOCATION, RESOURCE_TYPE, TYPE ORDER BY START_TIME) AS SEQ, LOCATION, RESOURCE_TYPE, START_TIME, QUANTITY, TYPE FROM :t_move_log_with_remaining;
	  
	  t_move_log_with_period = SELECT SEQ, LOCATION, RESOURCE_TYPE, TYPE, START_TIME, QUANTITY, SUM(PRE_QUANTITY) AS FROM_QUANTITY, QUANTITY + SUM(PRE_QUANTITY) AS TO_QUANTITY FROM (
		  SELECT T1.SEQ, T1.LOCATION, T1.RESOURCE_TYPE, T1.START_TIME, T1.QUANTITY, T1.TYPE, IFNULL(T2.SEQ,0) AS PRE_SEQ, IFNULL(T2.QUANTITY,0) AS PRE_QUANTITY 
		  FROM :t_move_log_with_seq T1
		  LEFT JOIN :t_move_log_with_seq T2 ON T1.TYPE = T2.TYPE AND T1.SEQ > T2.SEQ
		  ORDER BY T1.TYPE, T1.SEQ, T2.SEQ
	  ) 
	  GROUP BY SEQ, LOCATION, RESOURCE_TYPE, START_TIME, QUANTITY, TYPE
	  ORDER BY LOCATION, RESOURCE_TYPE, TYPE, SEQ;
	  
	  t_move_pack = SELECT 
		IN_DATA.SEQ, 
		IN_DATA.LOCATION, 
		IN_DATA.RESOURCE_TYPE, 
		IN_DATA.START_TIME, 
		IN_DATA.QUANTITY, 
		IN_DATA.FROM_QUANTITY AS IN_FROM, 
		IN_DATA.TO_QUANTITY AS IN_TO, 
		OUT_DATA.START_TIME AS END_TIME, 
		OUT_DATA.FROM_QUANTITY AS OUT_FROM, 
		OUT_DATA.TO_QUANTITY AS OUT_TO,
		GREATEST(IN_DATA.FROM_QUANTITY, OUT_DATA.FROM_QUANTITY) AS MATCHED_FROM,
		LEAST(IN_DATA.TO_QUANTITY, OUT_DATA.TO_QUANTITY) AS MATCHED_TO
		FROM :t_move_log_with_period IN_DATA 
		INNER JOIN :t_move_log_with_period OUT_DATA 
		ON IN_DATA.TYPE = 'IN' 
		AND OUT_DATA.TYPE = 'OUT' 
		AND IN_DATA.LOCATION = OUT_DATA.LOCATION
		AND IN_DATA.RESOURCE_TYPE = OUT_DATA.RESOURCE_TYPE
		AND IN_DATA.START_TIME < OUT_DATA.START_TIME
		WHERE (
		((OUT_DATA.FROM_QUANTITY BETWEEN IN_DATA.FROM_QUANTITY AND IN_DATA.TO_QUANTITY) OR (OUT_DATA.TO_QUANTITY BETWEEN IN_DATA.FROM_QUANTITY AND IN_DATA.TO_QUANTITY))
		OR ((IN_DATA.FROM_QUANTITY BETWEEN OUT_DATA.FROM_QUANTITY AND OUT_DATA.TO_QUANTITY) AND (IN_DATA.TO_QUANTITY BETWEEN OUT_DATA.FROM_QUANTITY AND OUT_DATA.TO_QUANTITY))
		);
		
	  STORAGE_TIME = SELECT LOCATION, RESOURCE_TYPE, START_TIME, END_TIME, MATCHED_TO - MATCHED_FROM AS QUANTITY FROM :t_move_pack WHERE QUANTITY > 0;
	  

END;
