PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn.rulesetgroup::p_origin_sd_stock_cutoff_rulegroup" (
 IN SD_EXECUTIION_RESULT "sap.tm.trp.db.pipeline::t_pipeline_output_dataset",
 IN EXECUTION_ID "sap.tm.trp.db.pickupreturn.rulesetgroup::tt_sd_plan_execution_id",
 IN SD_PLAN_ID "sap.tm.trp.db.pickupreturn.rulesetgroup::tt_sd_plan_rulegroup",
 IN DEFAULT_NODE BIGINT,
 OUT cutoff_sd "sap.tm.trp.db.pickupreturn.rulesetgroup::tt_sd_result_rulegroup",
 OUT init_stock "sap.tm.trp.db.planningcockpit::tt_initial_stock" 
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	READS SQL DATA AS
BEGIN 

  DECLARE MAX_INTERVAL_BEFORE_CUTOFF BIGINT;
  DECLARE MIN_TIME_INTERVAL BIGINT;
  DECLARE TMP_PROV_STOCK_NODE_FLAG INTEGER;
  DECLARE V_COUNT INT DEFAULT 0;
  DECLARE V_PLAN_TYPE INTEGER;
  DECLARE INSTANT_ENABLED CHAR(1) DEFAULT '';
  DECLARE PLANID BIGINT;
  DECLARE SCHEDULED_PLAN_ID BIGINT;
  DECLARE PIPELINE_MODEL_ID BIGINT;
  DECLARE PIPELINE_MODEL NVARCHAR(200);
  
  ---support both SD and VSD
   SELECT  PLAN_MODEL_TYPE_ID  INTO  V_PLAN_TYPE
     FROM "sap.tm.trp.db.pipeline::t_plan_model"  WHERE ID IN (SELECT top 1 PLAN_ID FROM :SD_PLAN_ID);     
     
   IF V_PLAN_TYPE = 3 THEN
       BASIC_SD_PLAN_ID = SELECT TOP 1 PERSISTED_PLAN_MODEL_ID AS PLAN_ID
		FROM "sap.tm.trp.db.pipeline::t_virtual_plan_persisted_plan" 
		WHERE VIRTUAL_PLAN_MODEL_ID IN (SELECT PLAN_ID FROM :SD_PLAN_ID);
   ELSE
     BASIC_SD_PLAN_ID = SELECT PLAN_ID FROM :SD_PLAN_ID;
   END IF;
 ---------------Step 1:get initial stock(init_stock) and indepent sd(origin_sd)-----------------
   
  --check stock flag
  SELECT COUNT(*) INTO TMP_PROV_STOCK_NODE_FLAG
  FROM "sap.tm.trp.db.pipeline::t_plan_model" AS A
  INNER JOIN "sap.tm.trp.db.pipeline::v_pipeline_node" B
  ON (A.PIPELINE_MODEL_ID = B.PIPELINE_MODEL_ID AND UPPER (B.NAME) LIKE '%PROVISIONAL_STOCK%')
  WHERE B.RESULT_VISIBLE = 1 AND A.ID IN (SELECT PLAN_ID FROM :BASIC_SD_PLAN_ID);
  
  -- if there is provisional stock node, we need to extract independent SD from the casceded results
  IF TMP_PROV_STOCK_NODE_FLAG > 0 THEN 
  
      SELECT COUNT(*) INTO V_COUNT FROM :SD_EXECUTIION_RESULT;
      IF V_COUNT <= 0 THEN
        SD_EXECUTIION_RESULT = 
          SELECT * FROM  "sap.tm.trp.db.pipeline::t_pipeline_output_dataset"
          WHERE PLAN_EXECUTION_ID IN (SELECT PLAN_EXECUTION_ID FROM :EXECUTION_ID);
      END IF;
      
      sql1 = SELECT PLAN_EXECUTION_ID,LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, TIME_INTERVAL_ID, START_TIME, END_TIME, OUTPUT_VALUE , OUTPUT_KEY
           FROM :SD_EXECUTIION_RESULT
           WHERE NODE_ID = :DEFAULT_NODE ;
   
      sql2 = SELECT PLAN_EXECUTION_ID,
                LOCATION_ID, 
                LOCATION_NAME, 
                EQUIP_TYPE_ID, 
                TIME_INTERVAL_ID, 
                START_TIME, 
                END_TIME, 
                0 AS OUTPUT_VALUE,
                CASE  WHEN OUTPUT_KEY = 'DEMAND' 
            	      THEN 'SUPPLY' 
	            ELSE 'DEMAND' 
	            END  AS OUTPUT_KEY
           FROM :sql1
           UNION ALL
           SELECT 
                PLAN_EXECUTION_ID,
                LOCATION_ID, 
                LOCATION_NAME, 
                EQUIP_TYPE_ID, 
                TIME_INTERVAL_ID, 
                START_TIME, 
                END_TIME, 
                OUTPUT_VALUE,
                OUTPUT_KEY
           FROM :sql1;    
           
      sql3 = SELECT 
                PLAN_EXECUTION_ID,
                LOCATION_ID, 
                LOCATION_NAME, 
                EQUIP_TYPE_ID, 
                TIME_INTERVAL_ID, 
                START_TIME, 
                END_TIME, 
                SUM(OUTPUT_VALUE) AS OUTPUT_VALUE,
                OUTPUT_KEY
            FROM :sql2 
            GROUP BY
                PLAN_EXECUTION_ID,
                LOCATION_ID, 
                LOCATION_NAME, 
                EQUIP_TYPE_ID, 
                TIME_INTERVAL_ID, 
                START_TIME, 
                END_TIME, 
                OUTPUT_KEY;
     
      sd_res = 
         SELECT T1.PLAN_EXECUTION_ID,T1.LOCATION_ID, T1.LOCATION_NAME, T1.EQUIP_TYPE_ID, T1.TIME_INTERVAL_ID, T1.START_TIME, T1.END_TIME, T1.SUPPLY, T2.DEMAND FROM
         (
           SELECT PLAN_EXECUTION_ID,LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, TIME_INTERVAL_ID, START_TIME, END_TIME, TO_INTEGER(OUTPUT_VALUE) AS SUPPLY 
           FROM :SQL3
           WHERE OUTPUT_KEY = 'SUPPLY'
         ) T1         
         INNER JOIN 
         (
           SELECT PLAN_EXECUTION_ID, LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, TIME_INTERVAL_ID, START_TIME, END_TIME, TO_INTEGER(OUTPUT_VALUE) AS DEMAND 
           FROM :SQL3
           WHERE OUTPUT_KEY = 'DEMAND'
         ) T2 ON (T1.LOCATION_ID = T2.LOCATION_ID AND T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID AND T1.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID);    
 
      -- The initial stock of the plan execution(that depends on one annotations 'nodeType' of the pipeline flowgraph)          
      tmp_init_stock = SELECT LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, TIME_INTERVAL_ID, START_TIME, END_TIME, TO_INTEGER(OUTPUT_VALUE) AS INIT_STOCK 
               FROM :SD_EXECUTIION_RESULT T1
               INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T2 ON (T1.NODE_ID = T2.NODE_ID AND T2.KEY = 'nodeType'  AND T2.VALUE = 'INITIAL_STOCK')
               WHERE T1.OUTPUT_KEY = 'STOCK';
    
      -- The INITIAL stock * POS & NEG of the delta (SUPPLY - DEMAND) of each time interval
      -- Note the time_interval id plus 1 for delta part as we use this delta for next time interval                 
      deltas = SELECT LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, TIME_INTERVAL_ID, START_TIME, END_TIME, INIT_STOCK AS POS_DELTA, 0 AS NEG_DELTA
               FROM :tmp_init_stock
	           UNION
	           SELECT LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, TIME_INTERVAL_ID + 1 AS TIME_INTERVAL_ID, START_TIME, END_TIME,
	                  CASE WHEN DELTA > 0 THEN DELTA ELSE 0 END AS POS_DELTA,
	                  CASE WHEN DELTA < 0 THEN -1 * DELTA ELSE 0 END AS NEG_DELTA
	           FROM 
	           (    
	             SELECT LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, TIME_INTERVAL_ID, START_TIME, END_TIME, SUPPLY - DEMAND AS DELTA
	             FROM :sd_res
	           );  
	    
	  -- Remove the cascade effect 
	  -- Note the first time interval's cascade is caused by initial stock(which is always positive), so the first interval substract initial stock 
	  -- And the other intervals substract deltas 
                         
      origin_sd = SELECT T1.PLAN_EXECUTION_ID,
                  IFNULL(T1.LOCATION_ID,T2.LOCATION_ID) AS LOCATION_ID, IFNULL(T1.LOCATION_NAME,T2.LOCATION_NAME) AS LOCATION_NAME, 
	              IFNULL(T1.EQUIP_TYPE_ID,T2.EQUIP_TYPE_ID) AS EQUIP_TYPE_ID, IFNULL(T1.TIME_INTERVAL_ID, T2.TIME_INTERVAL_ID) AS TIME_INTERVAL_ID, 
	              IFNULL(T1.START_TIME, T2.START_TIME) AS START_TIME, IFNULL(T1.END_TIME, T2.END_TIME) AS END_TIME,
	              (IFNULL(SUPPLY, 0) - IFNULL(POS_DELTA, 0)) AS SUPPLY, (IFNULL(DEMAND, 0) - IFNULL(NEG_DELTA, 0)) AS DEMAND
	              FROM :sd_res T1
	              LEFT JOIN :deltas T2 ON (T1.LOCATION_ID = T2.LOCATION_ID AND T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID AND T1.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID);

      init_stock = SELECT LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID AS RESOURCE_TYPE, TIME_INTERVAL_ID, INIT_STOCK 
                    FROM :tmp_init_stock; 
                    
  ELSE --- there is NO provisional stock node, just use the results directly
      
       sd_exe_res = 
             SELECT PLAN_EXECUTION_ID,TIME_INTERVAL_ID,START_TIME, END_TIME, LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, 
                    OUTPUT_KEY, TO_BIGINT (OUTPUT_VALUE) AS OUTPUT_VALUE
             FROM :SD_EXECUTIION_RESULT
             WHERE NODE_ID = :DEFAULT_NODE;

       origin_sd = SELECT T1.PLAN_EXECUTION_ID,T1.LOCATION_ID, T1.LOCATION_NAME, T1.EQUIP_TYPE_ID, T1.TIME_INTERVAL_ID, T1.START_TIME, T1.END_TIME, 
	              T1.OUTPUT_VALUE AS SUPPLY, T2.OUTPUT_VALUE AS DEMAND FROM 
	              (SELECT * 
	               FROM :sd_exe_res 
	               WHERE OUTPUT_KEY = 'SUPPLY'
	              ) T1
	              INNER JOIN 
	              (SELECT * 
	               FROM :sd_exe_res 
	               WHERE OUTPUT_KEY = 'DEMAND'
	              ) T2 ON (T1.LOCATION_ID = T2.LOCATION_ID AND T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID AND T1.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID); 
  
        init_stock = SELECT LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID AS RESOURCE_TYPE, TIME_INTERVAL_ID, TO_INTEGER(OUTPUT_VALUE) AS INIT_STOCK 
               FROM :SD_EXECUTIION_RESULT T1
               INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T2 ON (T1.NODE_ID = T2.NODE_ID AND T2.KEY = 'nodeType'  AND T2.VALUE = 'INITIAL_STOCK')
               WHERE T1.OUTPUT_KEY = 'STOCK';                      
  END IF ;
  
  
  ------------Step 2: get provisional stock from SD execution results-------------------------
   prov_stock = SELECT T1.LOCATION_ID, T1.LOCATION_NAME, T1.EQUIP_TYPE_ID, T1.TIME_INTERVAL_ID, 
               T1.START_TIME, T1.END_TIME, TO_INTEGER(T1.OUTPUT_VALUE) AS STOCK 
               FROM :SD_EXECUTIION_RESULT T1
               INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T2
               ON (T1.NODE_ID = T2.ID AND T2.NAME = 'PROVISIONAL_STOCK')
               WHERE T1.OUTPUT_KEY ='STOCK';
               
   -----------Step 3: calculate cutoff sd-----------------------------------------------------            
   -- only sd values in the future time ranges are passed to solver
  -- The provisional stock of the first time interval after cutoff need to add into the sd values 
  -- The activities fall in the past time range have become expired, no more effect the sd values
  -- so we can do cutoff here and add the provisional stock of plan execution restuls 
  SELECT MIN(TIME_INTERVAL_ID) INTO MIN_TIME_INTERVAL  FROM :origin_sd;
  
  SELECT IFNULL(MAX(TIME_INTERVAL_ID),:MIN_TIME_INTERVAL - 1) INTO MAX_INTERVAL_BEFORE_CUTOFF FROM
  (SELECT *, ADD_SECONDS(START_TIME, SECONDS_BETWEEN(START_TIME,END_TIME)/2) AS MIDDLE_TIME
   FROM :origin_sd
  ) WHERE MIDDLE_TIME <= CURRENT_UTCTIMESTAMP;
  
  cutoff_sd_exec = SELECT DISTINCT PLAN_EXECUTION_ID,LOCATION_ID,LOCATION_NAME,EQUIP_TYPE_ID,TIME_INTERVAL_ID,START_TIME,END_TIME
                     ,SUPPLY,DEMAND 
              FROM (
	      SELECT T1.PLAN_EXECUTION_ID,T1.LOCATION_ID, T1.LOCATION_NAME, T1.EQUIP_TYPE_ID, T1.TIME_INTERVAL_ID, T1.START_TIME, T1.END_TIME, 
	      CASE WHEN T2.STOCK >= 0 THEN T1.SUPPLY + T2.STOCK ELSE T1.SUPPLY END AS SUPPLY, 
	      CASE WHEN T2.STOCK < 0 THEN T1.DEMAND - T2.STOCK  ELSE T1.DEMAND END AS DEMAND
	      FROM :origin_sd T1
	      LEFT OUTER JOIN :prov_stock T2 ON ( T1.LOCATION_ID = T2.LOCATION_ID AND T1.EQUIP_TYPE_ID = t2.EQUIP_TYPE_ID
	           AND T1.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID)
		  WHERE T1.TIME_INTERVAL_ID = :MAX_INTERVAL_BEFORE_CUTOFF + 1   
	      UNION ALL
	      SELECT PLAN_EXECUTION_ID,LOCATION_ID, LOCATION_NAME, EQUIP_TYPE_ID, TIME_INTERVAL_ID, START_TIME, END_TIME,SUPPLY, DEMAND
	      FROM :origin_sd 
	      WHERE TIME_INTERVAL_ID > :MAX_INTERVAL_BEFORE_CUTOFF + 1
      );     
     
    SELECT TOP 1 PLAN_ID INTO PLANID FROM :SD_PLAN_ID;
    
		CALL "sap.tm.trp.db.supplydemand.instant::p_sd_parameter_scheduled_plan_id"(:PLANID, SCHEDULED_PLAN_ID);
		CALL "sap.tm.trp.db.supplydemand.instant::p_sd_parameter_pipeline_model_by_plan"(:SCHEDULED_PLAN_ID, PIPELINE_MODEL_ID, PIPELINE_MODEL, INSTANT_ENABLED);

    IF INSTANT_ENABLED = 'X' THEN
   
    LOCATION = SELECT * FROM "sap.tm.trp.db.supplydemand.instant::t_cm_execution_parameter_location_temp";
	RESOURCE = SELECT * FROM "sap.tm.trp.db.supplydemand.instant::t_cm_execution_parameter_resource_temp";
	
	CALL "sap.tm.trp.db.pickupreturn.rulesetgroup::p_sd_parameter_filterid_by_instant_rulegroup"(:SD_PLAN_ID,LOCATION_FILTER_ID,RESOURCE_FILTER_ID);
	CALL "sap.tm.trp.db.pickupreturn.rulesetgroup::p_sd_parameter_location_by_instant_rulegroup"(:LOCATION_FILTER_ID, :LOCATION, LT_LOCATIONS);
	CALL "sap.tm.trp.db.pickupreturn.rulesetgroup::p_sd_parameter_resource_by_instant_rulegroup"(:RESOURCE_FILTER_ID, :RESOURCE, LT_RESOURCES);
	
	PLAN_LOC_RES = SELECT T1.PLAN_ID, T1.LOCATION_ID,T2.RESOURCE_ID FROM
	               :LT_LOCATIONS T1
	               INNER JOIN :LT_RESOURCES T2
	               ON (T1.PLAN_ID = T2.PLAN_ID);
	
    cutoff_sd = SELECT DISTINCT T2.PLAN_ID ,T1.LOCATION_ID,T1.LOCATION_NAME,T1.EQUIP_TYPE_ID,T1.TIME_INTERVAL_ID,T1.START_TIME,T1.END_TIME
                 ,T1.SUPPLY,T1.DEMAND 
                 FROM :cutoff_sd_exec T1 INNER JOIN :PLAN_LOC_RES T2
                 ON (T1.LOCATION_ID = T2.LOCATION_ID AND T2.RESOURCE_ID = T1.EQUIP_TYPE_ID);
    
    ELSE
       cutoff_sd = SELECT DISTINCT PLAN_MODEL_ID AS PLAN_ID ,LOCATION_ID,LOCATION_NAME,EQUIP_TYPE_ID,TIME_INTERVAL_ID,START_TIME,END_TIME
                     ,SUPPLY,DEMAND 
                     FROM :cutoff_sd_exec T1 INNER JOIN "sap.tm.trp.db.pipeline::t_plan_execution" T2
                     ON (T1.PLAN_EXECUTION_ID = T2.ID);
	END IF;	
              
END;