PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn.rulesetgroup::p_pickup_optimize_rulegroup" (
IN v_mode NVARCHAR(50),
IN handling_capa INTEGER,
IN t_trans "sap.tm.trp.db.pickupreturn.algorithm::tt_trans_types",
IN name_value_conf "sap.tm.trp.db.planningcockpit.reposition::tt_name_value_conf",
IN t_supply_demand "sap.tm.trp.db.pickupreturn.rulesetgroup::tt_supply_demand_range_rulegroup",
IN t_booking "sap.tm.trp.db.pickupreturn.rulesetgroup::tt_booking_haulage_rulegroup",
IN t_stock_conf "sap.tm.trp.db.pickupreturn.algorithm::tt_stock_configure",
IN t_depot_cost "sap.tm.trp.db.pickupreturn.algorithm::tt_depot_cost_trp11",
IN t_min_provision_stock "sap.tm.trp.db.pickupreturn.algorithm::tt_min_provision_stock",
IN t_handling_capacity "sap.tm.trp.db.planningcockpit::tt_location_handling_capacity",
OUT t_fulfill_booking "sap.tm.trp.db.pickupreturn.algorithm::tt_res_haulage"
 )
LANGUAGE SQLSCRIPT 
SQL SECURITY INVOKER
DEFAULT SCHEMA SAP_TM_TRP
AS
BEGIN 
DECLARE v_customer_node INT;
DECLARE v_stock_node INT;


booking_valid_locations = SELECT DISTINCT T2.BOOKING_ID, T1.LOCATION FROM :t_supply_demand T1
                        INNER JOIN :t_booking T2
                        ON ( T1.PLAN_ID = T2.PLAN_ID);
                        
                        
t_unique_loc_type = SELECT DISTINCT "LOCATION",
                                    "LOCATION_ID", 
									"CONTAINER_TYPE" 
					FROM :t_supply_demand;

t_stock_conf = SELECT A."LOCATION",
					  A."CONTAINER_TYPE",
					  IFNULL(B."CURRENT_STOCK",0) AS "CURRENT_STOCK",
					  IFNULL(C."MIN_SAFETY_STOCK",0) AS "MIN_STOCK",
					  IFNULL(C."MAX_SAFETY_STOCK",1000000) AS "MAX_STOCK",
					  IFNULL(C."MAX_PHYSICAL_STOCK",1000000) AS "MAX_PHY_CAPACITY"
				FROM :t_unique_loc_type A
				LEFT JOIN :t_stock_conf B ON A."LOCATION"=B."LOCATION" AND A."CONTAINER_TYPE"=B."CONTAINER_TYPE"
				LEFT JOIN "sap.tm.trp.db.stock::v_location_stock_location" C
                                ON (A.LOCATION_ID = C.ID AND A.CONTAINER_TYPE = C.RESOURCE_ID);

t_depot_cost = SELECT "LOCATION",
					  "CONTAINER_TYPE",
					  100*"STORAGE_COSTUNIT" AS "STORAGE_COSTUNIT",
					  100*"HANDLING_COSTUNIT" AS "HANDLING_COSTUNIT"
				FROM :t_depot_cost;				
				
t_trans = SELECT "FROM_LOCATION",
				 "TO_LOCATION",
				 "MTR",
				 "DURATION",
				 (CASE 
				 WHEN "COST" IS NULL THEN 1
				 WHEN "COST"=0 THEN 1
				 ELSE
				 100*"COST"
				 END) AS "COST",
				 "CONTAINER_TYPE" 
		  FROM :t_trans 
		  WHERE "CONTAINER_TYPE" IN (SELECT "CONTAINER_TYPE" FROM :t_booking);
		  
t_trans_merchant = SELECT "FROM_LOCATION",
				 "TO_LOCATION",
				 "MTR",
				 "DURATION",
				 "COST",
				 "CONTAINER_TYPE"
		   FROM :t_trans;
		   
t_trans_carrier = SELECT "FROM_LOCATION",
				 "TO_LOCATION",
				 "MTR",
				 "DURATION",
				 "COST",
				 "CONTAINER_TYPE"
		   FROM :t_trans;

t_customer = SELECT ROW_NUMBER() OVER() AS "NODE_ID",
					"BOOKING_ID",
					"START_TIME",
					"BOOKING_TIME",
					"CUSTOMER_LOCATION",
					"CONTAINER_TYPE",
					"QUANTITY",
					IFNULL("HAULAGE_TYPE",0) AS "HAULAGE_TYPE"
			 FROM :t_booking WHERE "MODE"='PICKUP';
			 

t_customer_merchant = SELECT * FROM :t_customer WHERE "HAULAGE_TYPE"=0;
t_customer_carrier  = SELECT * FROM :t_customer WHERE "HAULAGE_TYPE"=1;
			 
SELECT COUNT(*) INTO v_customer_node FROM :t_customer;			 

t_current_stock = SELECT ROW_NUMBER() OVER()+:v_customer_node+1 AS "NODE_ID",
						 "LOCATION",
				  		 "CONTAINER_TYPE",
				  		 "CURRENT_STOCK" AS "SURPLUS",
				  		 "MIN_STOCK",
				  		 "MAX_STOCK",
				  		 "MAX_PHY_CAPACITY"
				  FROM :t_stock_conf
				  WHERE "CURRENT_STOCK">0;
				  
t_min_provision_stock = SELECT "LOCATION",
							   "CONTAINER_TYPE",
							   MIN("MIN_PROVISION_STOCK") AS "MIN_PROVISION_STOCK"
						FROM :t_min_provision_stock
						GROUP BY "LOCATION","CONTAINER_TYPE";

t_bad_provision_stock = SELECT A."NODE_ID",
							   A."LOCATION",
							   A."CONTAINER_TYPE",
							   A."SURPLUS",
							   A."MIN_STOCK",
							   A."MAX_STOCK",
							   A."MAX_PHY_CAPACITY"
						FROM :t_current_stock A
						INNER JOIN :t_min_provision_stock B
						ON A."LOCATION"=B."LOCATION"
						AND A."CONTAINER_TYPE"=B."CONTAINER_TYPE"
						AND B."MIN_PROVISION_STOCK"<A."MIN_STOCK";
						
IF (:v_mode!='COST') THEN					
t_current_stock = SELECT * FROM :t_current_stock 
				  WHERE "NODE_ID" NOT IN (SELECT "NODE_ID" FROM :t_bad_provision_stock);
END IF;
							   
SELECT COUNT(*) INTO v_stock_node FROM :t_current_stock;

t_depot_temp = SELECT A."START_TIME",
				  	  A."END_TIME",
                  	  A."LOCATION",
                  	  A."CONTAINER_TYPE",
                  	  A."SUPPLY",
                  	  A."DEMAND",
                  	  A."SUPPLY"-A."DEMAND" AS "SURPLUS",
                  	  B."MIN_STOCK",
                  	  B."MAX_STOCK",
                  	  B."MAX_PHY_CAPACITY"
           FROM :t_supply_demand A
           LEFT JOIN :t_stock_conf B
           ON A."LOCATION"=B."LOCATION"
           AND A."CONTAINER_TYPE"=B."CONTAINER_TYPE"
           WHERE A."SUPPLY"-A."DEMAND">0;

t_depot = SELECT ROW_NUMBER() OVER()+:v_stock_node+:v_customer_node+1 AS "NODE_ID",
				"START_TIME",
				"END_TIME",
				"LOCATION",
				"CONTAINER_TYPE",
				"SUPPLY",
				"DEMAND",
				"SURPLUS",
				"MIN_STOCK",
				"MAX_STOCK",
				"MAX_PHY_CAPACITY"
		  FROM :t_depot_temp;
					  
IF (:v_mode='COST') THEN
    
    t_stage_1_surplus_temp = SELECT "NODE_ID",
    							"START_TIME",
    							"END_TIME",
    							"LOCATION",
    							"CONTAINER_TYPE",
    							"SURPLUS"-"MIN_STOCK" AS "SURPLUS", --"SURPLUS" //Commented as 0~Min-safety stock not used
    							0 AS "PRIORITY"
    					 FROM :t_depot
    					 WHERE "SURPLUS"-"MIN_STOCK">0;  --"SURPLUS">0;   //Commented as 0~Min-safety stock not used
    				 
    CALL "sap.tm.trp.db.pickupreturn.algorithm::p_p_depot_update" ( 
    :t_depot,
    :t_stage_1_surplus_temp ,
    :t_depot_cost,
    :t_customer_merchant,
    :t_customer_carrier,
    :t_trans_merchant,
    :t_trans_carrier,
    t_fulfill_booking,
    t_stage_2_customer_merchant,
    t_stage_2_customer_carrier,
    t_stage_2_depot
    ); 
    
    t_stage_2_surplus_temp = SELECT "NODE_ID",
    								"LOCATION",
    								"CONTAINER_TYPE",
    								"SURPLUS"-"MIN_STOCK" AS "SURPLUS" --"SURPLUS" //Commented as 0~Min-safety stock not used
    						 FROM  :t_current_stock
    						 WHERE "SURPLUS"-"MIN_STOCK">0;  --"SURPLUS">0;   //Commented as 0~Min-safety stock not used
    
    CALL "sap.tm.trp.db.pickupreturn.algorithm::p_p_stock_update" ( 
    :t_current_stock, 
    :t_stage_2_surplus_temp ,
    :t_depot_cost,
    :t_stage_2_customer_merchant,
    :t_stage_2_customer_carrier,
    :t_trans_merchant,
    :t_trans_carrier,
    t_fulfill_booking2,
    t_stage_3_customer_merchant,
    t_stage_3_customer_carrier,
    t_stage_3_stock
    ); 
    
    t_fulfill_booking = SELECT * FROM :t_fulfill_booking
    					UNION ALL
    					SELECT * FROM :t_fulfill_booking2;

	t_fulfill_booking = SELECT * FROM :t_fulfill_booking where (BOOKING_ID,FROM_LOCATION) IN (SELECT BOOKING_ID,LOCATION FROM :booking_valid_locations);
	
					
ELSE
    --balance at current stock -> min_stock
    t_stage_00_surplus_temp = SELECT "NODE_ID",
    						   		"LOCATION",
    						   		"CONTAINER_TYPE",
    						   		"SURPLUS"-"MAX_STOCK" AS "SURPLUS"
    					FROM :t_current_stock
    					WHERE "SURPLUS"-"MAX_STOCK">0;
    
    
    CALL "sap.tm.trp.db.pickupreturn.algorithm::p_p_stock_update" ( 
    :t_current_stock,
    :t_stage_00_surplus_temp ,
    :t_depot_cost,
    :t_customer_merchant,
    :t_customer_carrier,
    :t_trans_merchant,
    :t_trans_carrier,
    t_fulfill_booking,
    t_stage_01_customer_merchant,
    t_stage_01_customer_carrier,
    t_stage_01_current_stock
    ); 
    
     --stage II graph  (minstock,maxstock)
    t_stage_01_surplus_temp = SELECT "NODE_ID",
    							"LOCATION",
    							"CONTAINER_TYPE",
    							"SURPLUS"-"MIN_STOCK" AS "SURPLUS"
    					 FROM :t_stage_01_current_stock
    					 WHERE "SURPLUS"-"MIN_STOCK">0;
    
    
    CALL "sap.tm.trp.db.pickupreturn.algorithm::p_p_stock_update" ( 
    :t_stage_01_current_stock,
    :t_stage_01_surplus_temp ,
    :t_depot_cost,
    :t_stage_01_customer_merchant,
    :t_stage_01_customer_carrier,
    :t_trans_merchant,
    :t_trans_carrier,
    t_fulfill_booking2,
    t_stage_02_customer_merchant,
    t_stage_02_customer_carrier,
    t_stage_02_current_stock
    );
    
    t_fulfill_booking = SELECT * FROM :t_fulfill_booking
    					UNION ALL
    					SELECT * FROM :t_fulfill_booking2;
    
    --balance at sd plan -> 0
    t_stage_I_surplus_temp = SELECT "NODE_ID",
    						   		"START_TIME",
    						   		"END_TIME",
    						   		"LOCATION",
    						   		"CONTAINER_TYPE",
    						   		"SURPLUS"-"MIN_STOCK" AS "SURPLUS", --"SURPLUS" //Commented as 0~Min-safety stock not used
    						   		0 AS "PRIORITY"
    					FROM :t_depot
    					WHERE "SURPLUS"-"MIN_STOCK">0;  --"SURPLUS">0;   //Commented as 0~Min-safety stock not used
    
    CALL "sap.tm.trp.db.pickupreturn.algorithm::p_p_depot_update" ( 
    :t_depot,
    :t_stage_I_surplus_temp ,
    :t_depot_cost,
    :t_stage_02_customer_merchant,
    :t_stage_02_customer_carrier,
    :t_trans_merchant,
    :t_trans_carrier,
    t_fulfill_booking2,
    t_stage_IV_customer_merchant,
    t_stage_IV_customer_carrier,
    t_stage_IV_depot
    ); 
    					 				 
    t_fulfill_booking = SELECT * FROM :t_fulfill_booking
    					UNION ALL
    					SELECT * FROM :t_fulfill_booking2;
    
   t_fulfill_booking = SELECT * FROM :t_fulfill_booking where (BOOKING_ID,FROM_LOCATION) 
                      IN (SELECT BOOKING_ID,LOCATION FROM :booking_valid_locations);
    
    
    t_stage_03_surplus_temp = SELECT "NODE_ID",
    							"LOCATION",
    							"CONTAINER_TYPE",
    							"SURPLUS"-"MAX_STOCK" AS "SURPLUS"
    					 FROM :t_bad_provision_stock
    					 WHERE "SURPLUS"-"MAX_STOCK">0;
    					 
    CALL "sap.tm.trp.db.pickupreturn.algorithm::p_p_stock_update" ( 
    :t_bad_provision_stock,
    :t_stage_03_surplus_temp ,
    :t_depot_cost,
    :t_stage_IV_customer_merchant,--:t_stage_03_customer_merchant,   //Commented as 0~Min-safety stock not used
    :t_stage_IV_customer_carrier, --:t_stage_03_customer_carrier,    //Commented as 0~Min-safety stock not used
    :t_trans_merchant,
    :t_trans_carrier,
    t_fulfill_booking2,
    t_stage_04_customer_merchant,
    t_stage_04_customer_carrier,
    t_stage_04_current_stock
    );
    
    t_fulfill_booking = SELECT * FROM :t_fulfill_booking
    					UNION ALL
    					SELECT * FROM :t_fulfill_booking2;
    					
    t_fulfill_booking = SELECT * FROM :t_fulfill_booking where (BOOKING_ID,FROM_LOCATION) 
                      IN (SELECT BOOKING_ID,LOCATION FROM :booking_valid_locations);
    					
    t_stage_04_surplus_temp = SELECT "NODE_ID",
    							"LOCATION",
    							"CONTAINER_TYPE",
    							"SURPLUS"-"MIN_STOCK" AS "SURPLUS"
    					 FROM :t_stage_04_current_stock
    					 WHERE "SURPLUS"-"MIN_STOCK">0;
    					 
    					
    CALL "sap.tm.trp.db.pickupreturn.algorithm::p_p_stock_update" ( 
    :t_stage_04_current_stock,
    :t_stage_04_surplus_temp ,
    :t_depot_cost,
    :t_stage_04_customer_merchant,
    :t_stage_04_customer_carrier,
    :t_trans_merchant,
    :t_trans_carrier,
    t_fulfill_booking2,
    t_stage_05_customer_merchant,
    t_stage_05_customer_carrier,
    t_stage_05_current_stock
    );
    
    t_fulfill_booking = SELECT * FROM :t_fulfill_booking
    					UNION ALL
    					SELECT * FROM :t_fulfill_booking2;
    					
    t_fulfill_booking = SELECT * FROM :t_fulfill_booking where (BOOKING_ID,FROM_LOCATION) 
                      IN (SELECT BOOKING_ID,LOCATION FROM :booking_valid_locations);
    
    /**Start-->The blance from 0 to Min-safte stock should not be usd during Automatic Opti Run
    t_stage_05_surplus_temp = SELECT "NODE_ID",
    							"LOCATION",
    							"CONTAINER_TYPE",
    							"SURPLUS"
    					 FROM :t_stage_05_current_stock
    					 WHERE "SURPLUS">0;
    					 
    CALL "sap.tm.trp.db.pickupreturn.algorithm::p_p_stock_update" ( 
    :t_stage_05_current_stock,
    :t_stage_05_surplus_temp ,
    :t_depot_cost,
    :t_stage_05_customer_merchant,
    :t_stage_05_customer_carrier,
    :t_trans_merchant,
    :t_trans_carrier,
    t_fulfill_booking2,
    t_stage_06_customer_merchant,
    t_stage_06_customer_carrier,
    t_stage_06_current_stock
    );
    
    t_fulfill_booking = SELECT * FROM :t_fulfill_booking
    					UNION ALL
    					SELECT * FROM :t_fulfill_booking2;
    */ --<--End 

END IF;

t_fulfill_booking = SELECT "BOOKING_ID",
						   "FROM_LOCATION",
						   "TO_LOCATION",	
					       "FROM_TIME",
						   "TO_TIME",
						   "CONTAINER_TYPE",
						   SUM("QUANTITY") AS "QUANTITY",
						   "STORAGE_COST"/100.0 AS "STORAGE_COST",
						   "HANDLING_COST"/100.0 AS "HANDLING_COST",
						   "TRANSPORTATION_COST"/100.0 AS "TRANSPORTATION_COST",
						   "TOTAL_COST"/100.0 AS "TOTAL_COST",
						   "MODE",
						   "HAULAGE_TYPE"
					FROM :t_fulfill_booking
					GROUP BY "BOOKING_ID",
						     "FROM_LOCATION",
						     "TO_LOCATION",	
					         "FROM_TIME",
						     "TO_TIME",
						     "CONTAINER_TYPE",
						     "STORAGE_COST",
						     "HANDLING_COST",
						     "TRANSPORTATION_COST",
						     "TOTAL_COST",
						     "MODE",
						     "HAULAGE_TYPE";

						     
t_max_booking = SELECT "BOOKING_ID",
                       MAX("QUANTITY") AS QUANTITY
                FROM :t_fulfill_booking
                GROUP BY "BOOKING_ID";
                
t_fulfill_booking = SELECT A."BOOKING_ID",
						   A."FROM_LOCATION",
						   A."TO_LOCATION",	
					       A."FROM_TIME",
						   A."TO_TIME",
						   A."CONTAINER_TYPE",
						   A."QUANTITY",
						   A."STORAGE_COST",
						   A."HANDLING_COST",
						   A."TRANSPORTATION_COST",
						   A."TOTAL_COST",
						   A."MODE",
						   A."HAULAGE_TYPE"
					FROM :t_fulfill_booking A
					INNER JOIN :t_max_booking B
					ON A."BOOKING_ID"=B."BOOKING_ID"
					AND A."QUANTITY"=B."QUANTITY";
							 
t_key_booking = SELECT ROW_NUMBER() OVER() AS "KEY",* FROM :t_fulfill_booking;
t_filter_booking = SELECT MAX("KEY") AS "KEY" FROM :t_key_booking GROUP BY "BOOKING_ID";

t_fulfill_booking = SELECT A."BOOKING_ID",
						   A."FROM_LOCATION",
						   A."TO_LOCATION",	
					       A."FROM_TIME",
						   A."TO_TIME",
						   A."CONTAINER_TYPE",
						   A."QUANTITY",
						   A."STORAGE_COST",
						   A."HANDLING_COST",
						   A."TRANSPORTATION_COST",
						   A."TOTAL_COST",
						   A."MODE",
						   A."HAULAGE_TYPE"
					FROM :t_key_booking A
					INNER JOIN :t_filter_booking B
					ON A."KEY"=B."KEY";

END;