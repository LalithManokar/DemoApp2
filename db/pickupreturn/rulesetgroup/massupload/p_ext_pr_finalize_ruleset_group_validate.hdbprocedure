PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn.rulesetgroup.massupload::p_ext_pr_finalize_ruleset_group_validate" (
  IN KNOWN_INVALID_ITEMS "sap.tm.trp.db.massupload::tt_massupload_invalid_item",
  IN PICKUP_RETURN_ITEMS "sap.tm.trp.db.pickupreturn.rulesetgroup.massupload::tt_pickup_return_ruleset_group",

  IN RESOURCE_CATEGORY_ID VARCHAR(20),
  IN ERROR_LIMIT INTEGER,
  OUT INVALID_ITEMS "sap.tm.trp.db.massupload::tt_massupload_invalid_item"
)
  LANGUAGE SQLSCRIPT
  SQL SECURITY INVOKER
  DEFAULT SCHEMA "SAP_TM_TRP"
  
AS
BEGIN

  DECLARE MINUTES VARCHAR(20) := 'MINUTES';
  DECLARE HOURS VARCHAR(20) := 'HOURS';
  DECLARE DAYS VARCHAR(20) := 'DAYS';
  DECLARE WEEKS VARCHAR(20) := 'WEEKS';
  DECLARE CNT INTEGER := 0 ;
  DECLARE PLAN_SD SMALLINT := 1;
  DECLARE PLAN_VSD SMALLINT := 3;

  ITEMS =
      SELECT  ROW_INDEX,
              UPPER(RULE_GROUP_NAME) AS RULE_GROUP_NAME,
	      UPPER(DESC) AS DESC,
              UPPER(RULE_TYPE_NAME) AS RULE_TYPE_NAME,
              UPPER(EXECUTE_TIME_UNIT_NAME) AS EXECUTE_TIME_UNIT_NAME,
              TIMEZONES,
              EXECUTE_INTERVAL_NAME,
              UPPER(RULE_NAME) AS RULE_NAME,
              START_DATE_TIME,
              END_DATE_TIME,
              EXECUTE_IN_WORKING_HOUR,
              START_WORKING_TIME,
              END_WORKING_TIME
         FROM :PICKUP_RETURN_ITEMS;

  ---Ruleset type check and duplicate name check
  INVALID_ITEMS = 
  SELECT A.ROW_INDEX, 12 AS COL_INDEX , 'RULESET_ASSIGNED_MULTIPLE_TIMES' AS REASON_CODE
    FROM :ITEMS AS A
      INNER JOIN :ITEMS AS B
       ON ( A.RULE_NAME = B.RULE_NAME AND A.ROW_INDEX <> B.ROW_INDEX )
   UNION
   SELECT A.ROW_INDEX, 2 AS COL_INDEX , 'RULESET_GROUP_MULTIPLE_DESC' AS REASON_CODE
    FROM :ITEMS AS A
      INNER JOIN :ITEMS AS B
       ON ( A.DESC != B.DESC AND A.ROW_INDEX <> B.ROW_INDEX AND A.RULE_GROUP_NAME = B.RULE_GROUP_NAME)
   UNION
   SELECT A.ROW_INDEX, 3 AS COL_INDEX, 'RULESET_TYPE_MISMATCH' AS REASON_CODE
   FROM :ITEMS AS A
   LEFT OUTER JOIN (
          SELECT RULE_NAME,
                CASE RULE_TYPE
                 WHEN 1 THEN 'PICK-UP'
                 WHEN 2 THEN 'RETURN'
                END AS RULE_TYPE_NAME, RESOURCE_CATEGORY FROM
          "sap.tm.trp.db.pickupreturn::t_location_assignment_rule"
     ) AS B
   ON A.RULE_NAME = B.RULE_NAME AND B.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID
   WHERE B.RULE_NAME IS NOT NULL AND B.RULE_TYPE_NAME <> A.RULE_TYPE_NAME
    UNION
    SELECT ROW_INDEX, COL_INDEX, REASON_CODE FROM :KNOWN_INVALID_ITEMS;

   SELECT COUNT (*) INTO CNT FROM :INVALID_ITEMS;
   IF :CNT >= :ERROR_LIMIT THEN
     INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
     RETURN;
   END IF;
   
      
   --rulegroup name already exists--
    INVALID_ITEMS =
	SELECT * FROM :INVALID_ITEMS UNION
    SELECT A.ROW_INDEX, 1 AS COL_INDEX , 'RULEGROUP_NAME_ALREADY_EXISTS' AS REASON_CODE
    FROM :ITEMS AS A
    INNER JOIN "sap.tm.trp.db.pickupreturn.rulesetgroup::t_ruleset_schedule_group" AS B
    ON ( A.RULE_GROUP_NAME = B.NAME AND B.JOB_PROCESS != 3 ) ;
    
    SELECT COUNT (*) INTO CNT FROM :INVALID_ITEMS;
    IF :CNT >= :ERROR_LIMIT THEN
     INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
     RETURN;
    END IF;
   
       
   --ruleset doesnot exist 
    INVALID_ITEMS = 
    SELECT * FROM :INVALID_ITEMS UNION
    SELECT A.ROW_INDEX, 12 AS COL_INDEX , 'RULESET_DOESNOT_EXIST' AS REASON_CODE
    FROM :ITEMS AS A WHERE A.RULE_NAME NOT IN (SELECT RULE_NAME FROM "sap.tm.trp.db.pickupreturn::t_location_assignment_rule");
    
    IF :CNT >= :ERROR_LIMIT THEN
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
    RETURN;
    END IF;
	
    -- ruleset should be of schedule type
    INVALID_ITEMS = 
    SELECT * FROM :INVALID_ITEMS UNION
    SELECT A.ROW_INDEX, 12 AS COL_INDEX , 'RULEGROUP_SCHEDULED_TYPE' AS REASON_CODE
    FROM :ITEMS AS A
    INNER JOIN "sap.tm.trp.db.pickupreturn::t_location_assignment_rule" AS B
    ON ( A.RULE_NAME = B.RULE_NAME AND B.SCHEDULE_TIME_TYPE != 1 ) ;
    
    IF :CNT >= :ERROR_LIMIT THEN
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
    RETURN;
    END IF;
       
    CHECK_FIELDS = SELECT A.RULE_GROUP_NAME,A.ROW_INDEX,A.RULE_NAME,B.KEEP_EXECUTION_RUNS FROM :ITEMS A
                   INNER JOIN "sap.tm.trp.db.pickupreturn::t_location_assignment_rule"  B ON (A.RULE_NAME = B.RULE_NAME );
                   
    -- SAME KEEP EXECUTION RUNS                
   KEEP_EXECUTION_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,KEEP_EXECUTION_RUNS FROM :CHECK_FIELDS;
                             
    KEEP_EXECUTION_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :KEEP_EXECUTION_COUNT 
                     GROUP BY RULE_GROUP_NAME HAVING COUNT(RULE_GROUP_NAME)>1;
    
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION
                    SELECT ROW_INDEX, 12 AS COLUMN_INDEX, 'MULTIPLE_KER_SETTINGS' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :KEEP_EXECUTION_RULE_COUNT);
    
    
       IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;
    
     --time zones--
    SCHEDULE_TIMEZONE_DETAILS = SELECT ROW_INDEX,RULE_GROUP_NAME, TIMEZONES FROM :ITEMS;
                      
    SCHEDULE_TIMEZONE_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,TIMEZONES
                             FROM :SCHEDULE_TIMEZONE_DETAILS;
    
    SCHEDULE_TIMEZONE_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :SCHEDULE_TIMEZONE_COUNT 
                         GROUP BY RULE_GROUP_NAME  HAVING COUNT(RULE_GROUP_NAME)>1;
                         
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION
                    SELECT ROW_INDEX, 4 AS COLUMN_INDEX, 'MAINTAIN_SAME_TIMEZONES' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :SCHEDULE_TIMEZONE_RULE_COUNT);
                                    
     IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;                  
                    
                    
      --recurrence interval--
    SCHEDULE_INTERVAL_DETAILS = SELECT ROW_INDEX,RULE_GROUP_NAME, EXECUTE_INTERVAL_NAME FROM :ITEMS;
                      
    SCHEDULE_INTERVAL_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,EXECUTE_INTERVAL_NAME
                             FROM :SCHEDULE_INTERVAL_DETAILS;
    
    SCHEDULE_INTERVAL_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :SCHEDULE_INTERVAL_COUNT 
                         GROUP BY RULE_GROUP_NAME  HAVING COUNT(RULE_GROUP_NAME)>1;
                         
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION
                    SELECT ROW_INDEX, 5 AS COLUMN_INDEX, 'MAINTAIN_SAME_RECURRENCE_INTERVAL' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :SCHEDULE_INTERVAL_RULE_COUNT);
                                    
     IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;                
    
      --recurrence unit--                
    SCHEDULE_UNIT_DETAILS = SELECT ROW_INDEX,RULE_GROUP_NAME,EXECUTE_TIME_UNIT_NAME FROM :ITEMS;
                      
    SCHEDULE_EXECUTION_UNIT_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,EXECUTE_TIME_UNIT_NAME FROM :SCHEDULE_UNIT_DETAILS;
    
    SCHEDULE_UNIT_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :SCHEDULE_EXECUTION_UNIT_COUNT 
                         GROUP BY RULE_GROUP_NAME  HAVING COUNT(RULE_GROUP_NAME)>1;
                         
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION
                    SELECT ROW_INDEX, 6 AS COLUMN_INDEX, 'MAINTAIN_SAME_RECURRENCE_UNIT' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :SCHEDULE_UNIT_RULE_COUNT);
    
     IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;
  
  
    -- same start time for same rule group
    SCHEDULE_START_TIME_DETAILS = SELECT ROW_INDEX,RULE_GROUP_NAME, START_DATE_TIME FROM :ITEMS;
                      
    SCHEDULE_EXECUTION_START_TIME_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,
                             START_DATE_TIME FROM :SCHEDULE_START_TIME_DETAILS;
    
    SCHEDULE_START_TIME_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :SCHEDULE_EXECUTION_START_TIME_COUNT 
                         GROUP BY RULE_GROUP_NAME  HAVING COUNT(RULE_GROUP_NAME)>1;
                         
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION 
                    SELECT ROW_INDEX, 7 AS COLUMN_INDEX, 'MAINTAIN_SAME_START_TIME' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :SCHEDULE_START_TIME_RULE_COUNT);
    
     IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;
    
    -- same end time for same rule group         
    SCHEDULE_END_TIME_DETAILS = SELECT ROW_INDEX,RULE_GROUP_NAME,END_DATE_TIME FROM :ITEMS;
                      
    SCHEDULE_END_TIME_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,END_DATE_TIME FROM :SCHEDULE_END_TIME_DETAILS;
    
    SCHEDULE_END_TIME_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :SCHEDULE_END_TIME_COUNT 
                         GROUP BY RULE_GROUP_NAME  HAVING COUNT(RULE_GROUP_NAME)>1;
                         
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION
                    SELECT ROW_INDEX, 8 AS COLUMN_INDEX, 'MAINTAIN_SAME_END_TIME' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :SCHEDULE_END_TIME_RULE_COUNT);
    
     IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;
       
    --execute in working hours--
    SCHEDULE_WH_DETAILS = SELECT ROW_INDEX,RULE_GROUP_NAME,EXECUTE_IN_WORKING_HOUR FROM :ITEMS;
                      
    SCHEDULE_WH_EXECUTION_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,EXECUTE_IN_WORKING_HOUR
                               FROM :SCHEDULE_WH_DETAILS;
    
    SCHEDULE_WH_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :SCHEDULE_WH_EXECUTION_COUNT 
                         GROUP BY RULE_GROUP_NAME  HAVING COUNT(RULE_GROUP_NAME)>1;
                         
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION
                    SELECT ROW_INDEX, 9 AS COLUMN_INDEX, 'MAINTAIN_SAME_WORKING_HOUR_CONDITION' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :SCHEDULE_WH_RULE_COUNT);
                    
     IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;
  
    -- START_WORKING_TIME --     
    SCHEDULE_START_WH_DETAILS = SELECT ROW_INDEX,RULE_GROUP_NAME,START_WORKING_TIME FROM :ITEMS;
                      
    SCHEDULE_START_WH_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,START_WORKING_TIME FROM :SCHEDULE_START_WH_DETAILS;
    
    SCHEDULE_START_WH_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :SCHEDULE_START_WH_COUNT 
                         GROUP BY RULE_GROUP_NAME  HAVING COUNT(RULE_GROUP_NAME)>1;
                         
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION
                    SELECT ROW_INDEX, 10 AS COLUMN_INDEX, 'MAINTAIN_SAME_START_WORKING_TIME' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :SCHEDULE_START_WH_RULE_COUNT);
      
     IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;
       
    --end working time--
    SCHEDULE_END_WH_DETAILS = SELECT ROW_INDEX,RULE_GROUP_NAME,END_WORKING_TIME FROM :ITEMS;
                      
    SCHEDULE_EXECUTION_END_WH_COUNT = SELECT DISTINCT RULE_GROUP_NAME ,END_WORKING_TIME FROM :SCHEDULE_END_WH_DETAILS;
    
    SCHEDULE_END_WH_RULE_COUNT = SELECT RULE_GROUP_NAME FROM :SCHEDULE_EXECUTION_END_WH_COUNT 
                         GROUP BY RULE_GROUP_NAME  HAVING COUNT(RULE_GROUP_NAME)>1;
                         
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION
                    SELECT ROW_INDEX, 11 AS COLUMN_INDEX, 'MAINTAIN_SAME_END_WORKING_TIME' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_GROUP_NAME IN (SELECT RULE_GROUP_NAME FROM :SCHEDULE_END_WH_RULE_COUNT);
    
     IF :CNT >= :ERROR_LIMIT THEN
        INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS ORDER BY ROW_INDEX, COL_INDEX limit :ERROR_LIMIT ;
        RETURN;
       END IF;
    
    RULE_NAMES = SELECT C.RULE_NAME,B.NAME AS RULE_GROUP_NAME FROM "sap.tm.trp.db.pickupreturn::t_location_assignment_rule" C
                 INNER JOIN "sap.tm.trp.db.pickupreturn.rulesetgroup::t_ruleset_schedule_group_item" A 
                 ON (A.RULE_ID = C.ID)
                 INNER JOIN "sap.tm.trp.db.pickupreturn.rulesetgroup::t_ruleset_schedule_group" B ON (B.ID = A.RULE_GROUP_ID)
                 WHERE B.JOB_PROCESS = 3;
    
    --RULE DOUBLE MAINTENANCE--
    RULE_REPEATED = SELECT A.RULE_NAME FROM :ITEMS A
                    INNER JOIN :RULE_NAMES B
                    ON (A.RULE_NAME = B.RULE_NAME AND A.RULE_GROUP_NAME != B.RULE_GROUP_NAME);
    
    INVALID_ITEMS = SELECT * FROM :INVALID_ITEMS UNION 
                    SELECT ROW_INDEX, 12 AS COLUMN_INDEX, 'MULTIPLE_MAINTENANCE_OF_RULESET' AS REASON_CODE FROM :CHECK_FIELDS
                    WHERE RULE_NAME IN (SELECT RULE_NAME FROM :RULE_REPEATED);
                    
END;
