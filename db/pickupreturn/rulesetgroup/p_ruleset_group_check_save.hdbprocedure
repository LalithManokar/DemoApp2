PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn.rulesetgroup::p_ruleset_group_check_save" (
    IN ID BIGINT,
    IN NAME VARCHAR(200),
    IN DESCRIPTION VARCHAR(500),
    IN RULESET_TYPE INTEGER,-- comment="1:pick up  2:return"
    IN JOB_PROCESS BIGINT,-- comment="1:Fetch TU 2:Optimize TU 3:Update TU"
    IN RESOURCE_CATEGORY VARCHAR(20),
    IN RULESET_LIST TABLE (ID BIGINT),
    
    IN START_TIME TIMESTAMP,
    IN EXPIRY_TIME TIMESTAMP,
    IN RECURRENCE_TYPE VARCHAR(50),
    IN RECURRENCE_INTERVAL INTEGER,
    IN RECURRENCE_DAY INTEGER,
    IN EXECUTE_WORKING_HOUR VARCHAR(1),
    IN START_WORKING_HOUR_TIME TIMESTAMP,
    IN END_WORKING_HOUR_TIME TIMESTAMP,
    IN TIMEZONES VARCHAR(50),
    
    OUT STATUS INTEGER,  --0 error  1 success
    OUT MESSAGE VARCHAR(200)
   )
	 LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_TRP"
    AS
BEGIN

    DECLARE EXISTING_COUNT INTEGER;
    DECLARE DIFFERENT_COUNT INTEGER;
    
	STATUS := 1;
	MESSAGE :='MSG_SUCCESS_STATUS';
	
	
	-- Check existing or not existing
	IF ID IS NULL THEN
	    SELECT COUNT(*) INTO EXISTING_COUNT
	    FROM "sap.tm.trp.db.pickupreturn.rulesetgroup::t_ruleset_schedule_group"
	    WHERE NAME = :NAME;
	    IF :EXISTING_COUNT > 0 THEN
	        STATUS := 0;
	        MESSAGE := 'MSG_RULESET_GROUP_NAME_EXISTS';
        END IF;
	ELSE
	    SELECT COUNT(*) INTO EXISTING_COUNT
	    FROM "sap.tm.trp.db.pickupreturn.rulesetgroup::t_ruleset_schedule_group"
	    WHERE ID = :ID;
	    IF :EXISTING_COUNT = 0 THEN
	      STATUS := 0;
	  	  MESSAGE := 'MSG_ERROR_NO_RULESET_GROUP';
	  	ELSE
		  	SELECT TOP 1 RULESET_TYPE INTO RULESET_TYPE
		    FROM "sap.tm.trp.db.pickupreturn.rulesetgroup::t_ruleset_schedule_group"
		    WHERE ID = :ID;
        END IF;
	END IF;
	
	-- check if empty ruleset list
	IF STATUS = 1 THEN
		SELECT COUNT(*) INTO DIFFERENT_COUNT FROM :RULESET_LIST;
		IF DIFFERENT_COUNT = 0 THEN
	      STATUS := 0;
	  	  MESSAGE := 'MSG_ERROR_RULESET_GROUP_EMPTY_RULESET_LIST';
		END IF;
	END IF;
	
	-- check ruleset type
	IF STATUS = 1 THEN
		SELECT 
			COUNT(*)
		INTO DIFFERENT_COUNT
		FROM "sap.tm.trp.db.pickupreturn::v_role_check_location_rule"
		WHERE ID IN (SELECT ID FROM :RULESET_LIST) AND RULE_TYPE <> :RULESET_TYPE;
		IF DIFFERENT_COUNT > 0 THEN
	      STATUS := 0;
	  	  MESSAGE := 'MSG_ERROR_RULESET_GROUP_DIFFERENT_RULESET_TYPE';
		END IF;
	END IF;
	
	-- check ruleset already assigned
	IF STATUS = 1 THEN
		SELECT 
			COUNT(*)
		INTO DIFFERENT_COUNT
		FROM "sap.tm.trp.db.pickupreturn.rulesetgroup::v_ruleset_valuehelp_for_group"
		WHERE ID IN (SELECT ID FROM :RULESET_LIST) 
		AND (
			(:JOB_PROCESS = 1 AND TO_BIGINT (ASSIGNED_GROUP_FETCH_TU) <> -1 AND (ASSIGNED_GROUP_FETCH_TU <> :ID OR :ID IS NULL))
			OR
			(:JOB_PROCESS = 2 AND TO_BIGINT (ASSIGNED_GROUP_OPTIMIZE_TU) <> -1 AND (ASSIGNED_GROUP_OPTIMIZE_TU <> :ID OR :ID IS NULL))
			OR
			(:JOB_PROCESS = 3 AND TO_BIGINT (ASSIGNED_GROUP_UPDATE_TU) <> -1 AND (ASSIGNED_GROUP_UPDATE_TU <> :ID OR :ID IS NULL))
		);
		IF DIFFERENT_COUNT > 0 THEN
	      STATUS := 0;
	  	  MESSAGE := 'MSG_ERROR_RULESET_GROUP_RULESET_ASSIGNED';
		END IF;
	END IF;
	

	RULESET_DATA = SELECT 
			IFNULL(FILTER_EXECUTION,-1) AS FILTER_EXECUTION,
			IFNULL(SELECTION_DATE,'') AS SELECTION_DATE,
			IFNULL(NETWORK_SETTING_GROUP_ID,-1) AS NETWORK_SETTING_GROUP_ID,
			IFNULL(OPTIMIZATION,-1) AS OPTIMIZATION,
			IFNULL(OP_SETTING_TYPE,-1) AS OP_SETTING_TYPE,
			IFNULL(KEEP_EXECUTION_RUNS,0) AS KEEP_EXECUTION_RUNS
		FROM "sap.tm.trp.db.pickupreturn::v_role_check_location_rule"
		WHERE ID IN (SELECT ID FROM :RULESET_LIST);
		
	IF JOB_PROCESS = 1 THEN
		
		-- check Exclude Processed TUs
		IF STATUS = 1 THEN
			DIFFERENT_LIST_FILTER_EXECUTION = SELECT DISTINCT FILTER_EXECUTION FROM :RULESET_DATA;
			SELECT COUNT(*) INTO DIFFERENT_COUNT FROM :DIFFERENT_LIST_FILTER_EXECUTION;
			IF DIFFERENT_COUNT > 1 THEN
				STATUS := 0;
		        MESSAGE := 'MSG_ERROR_RULESET_GROUP_SAME_EXCLUDE';
			END IF;
		END IF;
		-- check Date Selection
		IF STATUS = 1 THEN
			DIFFERENT_LIST_SELECTION_DATE = SELECT DISTINCT SELECTION_DATE FROM :RULESET_DATA;
			SELECT COUNT(*) INTO DIFFERENT_COUNT FROM :DIFFERENT_LIST_SELECTION_DATE;
			IF DIFFERENT_COUNT > 1 THEN
				STATUS := 0;
		        MESSAGE := 'MSG_ERROR_RULESET_GROUP_SAME_SELECTION_DATE';
			END IF;
		END IF;
	END IF;
	
	IF JOB_PROCESS = 2 THEN
	
		-- check ruleset plan information
		IF STATUS = 1 THEN
			PLAN_INFO = SELECT DISTINCT CALCULATION_MODEL_ID, TIME_FILTER_ID, ATTRIBUTE_GROUP_ID FROM "sap.tm.trp.db.pickupreturn.rulesetgroup::v_ruleset_valuehelp_for_group"
				WHERE ID IN (SELECT ID FROM :RULESET_LIST);
			SELECT COUNT(*) INTO DIFFERENT_COUNT FROM :PLAN_INFO;
			IF DIFFERENT_COUNT > 1 THEN
				STATUS := 0;
				MESSAGE := 'MSG_ERROR_RULESET_GROUP_SAME_PLAN_INFO';
			END IF;
		END IF;
		
		-- check Network Setting Group
		IF STATUS = 1 THEN
			DIFFERENT_LIST_NETWORK_SETTING_GROUP_ID = SELECT DISTINCT NETWORK_SETTING_GROUP_ID FROM :RULESET_DATA;
			SELECT COUNT(*) INTO DIFFERENT_COUNT FROM :DIFFERENT_LIST_NETWORK_SETTING_GROUP_ID;
			IF DIFFERENT_COUNT > 1 THEN
				STATUS := 0;
		        MESSAGE := 'MSG_ERROR_RULESET_GROUP_SAME_SETTING_GROUP';
			END IF;
		END IF;
		-- check Optimization Setting
		IF STATUS = 1 THEN
			DIFFERENT_LIST_OP_SETTING_TYPE = SELECT DISTINCT OP_SETTING_TYPE FROM :RULESET_DATA;
			SELECT COUNT(*) INTO DIFFERENT_COUNT FROM :DIFFERENT_LIST_OP_SETTING_TYPE;
			IF DIFFERENT_COUNT > 1 THEN
				STATUS := 0;
		        MESSAGE := 'MSG_ERROR_RULESET_GROUP_SAME_OPTIMIZATION_SETTING';
			END IF;
		END IF;
		-- check Automatic Optimization
		IF STATUS = 1 THEN
			DIFFERENT_LIST_OPTIMIZATION = SELECT DISTINCT OPTIMIZATION FROM :RULESET_DATA;
			SELECT COUNT(*) INTO DIFFERENT_COUNT FROM :DIFFERENT_LIST_OPTIMIZATION;
			IF DIFFERENT_COUNT > 1 THEN
				STATUS := 0;
		        MESSAGE := 'MSG_ERROR_RULESET_GROUP_SAME_OPTIMIZATION';
			END IF;
		END IF;
	END IF;
	
	IF JOB_PROCESS = 3 THEN
		
		-- check Keep Exceuation Runs
		IF STATUS = 1 THEN
			DIFFERENT_LIST_KEEP_EXECUTION_RUNS = SELECT DISTINCT KEEP_EXECUTION_RUNS FROM :RULESET_DATA;
			SELECT COUNT(*) INTO DIFFERENT_COUNT FROM :DIFFERENT_LIST_KEEP_EXECUTION_RUNS;
			IF DIFFERENT_COUNT > 1 THEN
				STATUS := 0;
		        MESSAGE := 'MSG_ERROR_RULESET_GROUP_SAME_KEEP_RUN';
			END IF;
		END IF;
		
	END IF;
	
END;