PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn::p_ext_location_suggest_pickup_by_optimizer" ( 
    IN V_OPTIMIZATION INTEGER,  
    IN handling_capa INTEGER,
    IN t_selected_tu "sap.tm.trp.db.pickupreturn::tt_tu_info",      
    IN t_impacted_supply_demand "sap.tm.trp.db.pickupreturn::tt_impacted_supply_demand",
    IN t_transportation_cost "sap.tm.trp.db.pickupreturn::tt_transportation_cost",
    IN t_handling_cost "sap.tm.trp.db.pickupreturn::tt_handling_cost",
    IN t_storage_cost "sap.tm.trp.db.costmodel.storagecost::tt_storage_cost_period",
    IN T_HANDLING_CAPACITY "sap.tm.trp.db.planningcockpit::tt_location_handling_capacity",    
    OUT result "sap.tm.trp.db.pickupreturn::tt_suggestion_data_short"            
   ) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
    AS
BEGIN

    DECLARE V_QUANTITY INTEGER;
    DECLARE V_SHIPPER_LOCATION VARCHAR(50);
    
    SELECT IFNULL (MAX (QUANTITY),0), IFNULL(MAX(SHIPPER_LOCATION),'') INTO V_QUANTITY, V_SHIPPER_LOCATION 
    FROM :t_selected_tu;    
    
   --optimization:cost                    
   IF :V_OPTIMIZATION=1 THEN 
       t_cost = SELECT DISTINCT T0.LOCATION_ID, 
                     T0.LOCATION_NAME,
                     T0.EQUIP_TYPE_ID, 
                     T0.EQUIP_TYPE_NAME,
                     T0.START_TIME,
                     T0.END_TIME,
                     :V_QUANTITY AS QUANTITY,        
                     T1.COST*:V_QUANTITY     AS TRANSPORTATION_COST,
                     T2.COST*:V_QUANTITY     AS HANDLING_COST,
                     T3.COST*:V_QUANTITY     AS STORAGE_COST,
                     T1.COST+IFNULL(T2.COST,0)-IFNULL(T3.COST,0) AS COST, -- it's ok to not multiply QUANTIY here, as this COST is only used for RANKING
                     T0.SUPPLY,
                     T0.DEMAND,
                     T0.IMPACTED_DEMAND,
                     T0.IMPACTED_SUPPLY,
                     T0.STOCK,
                     T0.MAX_CAPACITY
              FROM :t_impacted_supply_demand        T0
              INNER JOIN :t_transportation_cost  T1 ON (T0.LOCATION_NAME=T1.FROM_LOCATION AND T1.RESOURCE_TYPE = T0.EQUIP_TYPE_ID 
                                                        AND T1.TO_LOCATION = :V_SHIPPER_LOCATION )
              LEFT JOIN :t_handling_cost        T2 ON (T0.LOCATION_NAME = T2.LOCATION AND T2.RESOURCE_TYPE = T0.EQUIP_TYPE_ID)
              LEFT JOIN :t_storage_cost         T3 ON (T0.LOCATION_NAME = T3.LOCATION AND T3.RESOURCE_TYPE = T0.EQUIP_TYPE_ID)
			  WHERE T0.SUPPLY - T0.DEMAND + T0.IMPACTED_SUPPLY - T0.IMPACTED_DEMAND >= :V_QUANTITY;    
       
       IF HANDLING_CAPA = 1 THEN  --Consider handling capacity --requirement from 2.0 patch8
       
	       result = SELECT DISTINCT A.LOCATION_ID,
	                       A.LOCATION_NAME,
	                       A.EQUIP_TYPE_ID,
	                       A.EQUIP_TYPE_NAME,                                             
	                       IFNULL (TO_VARCHAR(TO_DECIMAL(A.TRANSPORTATION_COST, 13, 2)),'0.00') || ' / ' 
	                       || IFNULL (TO_VARCHAR(TO_DECIMAL(A.HANDLING_COST, 13, 2)),'0.00')  || ' / '
	                       || IFNULL (TO_VARCHAR(TO_DECIMAL(A.STORAGE_COST, 13, 2)),'0.00') AS EXP_TRAN_COS,
	                       A.COST*:V_QUANTITY AS TOTAL_COST,
	                       A.SUPPLY - A.DEMAND                       AS CUR_BALANCING_SD_PLAN,
	                       A.SUPPLY - A.DEMAND - A.IMPACTED_DEMAND + A.IMPACTED_SUPPLY  AS IMPACTED_SD_PLAN,                        
	                       IFNULL (TO_VARCHAR(A.STOCK),'0')||' / '||IFNULL (TO_VARCHAR(A.MAX_CAPACITY),'999999') AS CUR_STOCK, 
	                       B.HANDLING_CAPACITY - B.SUPPLY  - B.DEMAND AS REMAINING_HANDLING_CAPACITY,                                    
	                       ROW_NUMBER() OVER (ORDER BY COST)         AS RANK 
	                 FROM (SELECT * FROM :t_cost WHERE COST IS NOT NULL)  A
	                 LEFT OUTER JOIN :T_HANDLING_CAPACITY B ON A.LOCATION_ID = B.LOCATION_ID AND A.START_TIME = B.START_TIME AND A.END_TIME = B.END_TIME
                     WHERE IFNULL(B.HANDLING_CAPACITY - B.SUPPLY  - B.DEMAND, 999999) > 0;  --Ensure have available handling capacity;   
 
       ELSE    --
       
          result = SELECT DISTINCT A.LOCATION_ID,
			               A.LOCATION_NAME,
			               A.EQUIP_TYPE_ID,
			               A.EQUIP_TYPE_NAME,                                             
			               IFNULL (TO_VARCHAR(TO_DECIMAL(A.TRANSPORTATION_COST, 13, 2)),'0.00') || ' / ' 
			               || IFNULL (TO_VARCHAR(TO_DECIMAL(A.HANDLING_COST, 13, 2)),'0.00')  || ' / '
			               || IFNULL (TO_VARCHAR(TO_DECIMAL(A.STORAGE_COST, 13, 2)),'0.00') AS EXP_TRAN_COS,
			               A.COST*:V_QUANTITY AS TOTAL_COST,
			               A.SUPPLY - A.DEMAND                       AS CUR_BALANCING_SD_PLAN,
			               A.SUPPLY - A.DEMAND - A.IMPACTED_DEMAND + A.IMPACTED_SUPPLY  AS IMPACTED_SD_PLAN,                        
			               IFNULL (TO_VARCHAR(A.STOCK),'0')||' / '||IFNULL (TO_VARCHAR(A.MAX_CAPACITY),'999999') AS CUR_STOCK, 
			               B.HANDLING_CAPACITY - B.SUPPLY  - B.DEMAND AS REMAINING_HANDLING_CAPACITY,                                   
			               ROW_NUMBER() OVER (ORDER BY COST)         AS RANK 
			         FROM (SELECT * FROM :t_cost WHERE COST IS NOT NULL)  A
			         LEFT OUTER JOIN :T_HANDLING_CAPACITY B ON A.LOCATION_ID = B.LOCATION_ID AND A.START_TIME = B.START_TIME AND A.END_TIME = B.END_TIME;   
			         
	  END IF; 
	  
   ELSEIF :V_OPTIMIZATION = 3 THEN              
       t_cost_balance = SELECT DISTINCT T0.LOCATION_ID, T0.LOCATION_NAME,
	                   T0.EQUIP_TYPE_ID, T0.EQUIP_TYPE_NAME,
	                   T0.START_TIME,
	                   T0.END_TIME,
	                   :V_QUANTITY AS QUANTITY,        
	                   T1.COST*:V_QUANTITY     AS TRANSPORTATION_COST,
	                   T2.COST*:V_QUANTITY     AS HANDLING_COST,
                       T3.COST*:V_QUANTITY     AS STORAGE_COST,
	                   T1.COST+IFNULL(T2.COST,0)-IFNULL(T3.COST,0) AS COST,  -- it's ok to not multiply QUANTIY here, as this COST is only used for RANKING
	                   (T0.STOCK + T0.SUPPLY - T0.DEMAND- T0.IMPACTED_DEMAND +T0.IMPACTED_SUPPLY - :V_QUANTITY) - T0.MIN_SAFETY_STOCK AS BALANCE,
	                   T0.SUPPLY,
	                   T0.DEMAND,
	                   T0.IMPACTED_DEMAND,
	                   T0.IMPACTED_SUPPLY,
	                   T0.STOCK,
	                   T0.MAX_CAPACITY
	              FROM :t_impacted_supply_demand        T0
		          INNER JOIN :t_transportation_cost  T1 
		          ON (T0.LOCATION_NAME=T1.FROM_LOCATION AND T1.RESOURCE_TYPE = T0.EQUIP_TYPE_ID AND T1.TO_LOCATION = :V_SHIPPER_LOCATION AND T0.SUPPLY-T0.DEMAND>0)
		          LEFT JOIN :t_handling_cost         T2 ON (T0.LOCATION_NAME = T2.LOCATION AND T2.RESOURCE_TYPE = T0.EQUIP_TYPE_ID)
	              LEFT JOIN :t_storage_cost          T3 ON (T0.LOCATION_NAME = T3.LOCATION AND T3.RESOURCE_TYPE = T0.EQUIP_TYPE_ID)
	              WHERE T0.SUPPLY - T0.DEMAND + T0.IMPACTED_SUPPLY - T0.IMPACTED_DEMAND >= :V_QUANTITY;
	   
	   IF HANDLING_CAPA = 1 THEN  --Consider handling capacity --requirement from 2.0 patch8
	   
	      result = SELECT DISTINCT A.LOCATION_ID,
                          A.LOCATION_NAME,
                          A.EQUIP_TYPE_ID,
                          A.EQUIP_TYPE_NAME,                                                    
                          IFNULL (TO_VARCHAR(TO_DECIMAL(A.TRANSPORTATION_COST, 13, 2)),'0.00') || ' / ' 
                          || IFNULL (TO_VARCHAR(TO_DECIMAL(A.HANDLING_COST, 13, 2)),'0.00') || ' / '
                          || IFNULL (TO_VARCHAR(TO_DECIMAL(A.STORAGE_COST, 13, 2)),'0.00') AS EXP_TRAN_COS,
                          A.COST*:V_QUANTITY AS TOTAL_COST,
                          A.SUPPLY - A.DEMAND AS CUR_BALANCING_SD_PLAN,
                          A.SUPPLY - A.DEMAND - A.IMPACTED_DEMAND + A.IMPACTED_SUPPLY  AS IMPACTED_SD_PLAN,                         
                         IFNULL (TO_VARCHAR(A.STOCK),'0')||' / '||IFNULL (TO_VARCHAR(A.MAX_CAPACITY),'999999')  AS CUR_STOCK, 
                         B.HANDLING_CAPACITY - B.SUPPLY  - B.DEMAND AS REMAINING_HANDLING_CAPACITY,                                      
                         ROW_NUMBER() OVER (ORDER BY COST,BALANCE)      AS RANK 
                   FROM (SELECT * FROM :t_cost_balance WHERE COST IS NOT NULL) A  
                   LEFT OUTER JOIN :T_HANDLING_CAPACITY B ON A.LOCATION_ID = B.LOCATION_ID AND A.START_TIME = B.START_TIME AND A.END_TIME = B.END_TIME
                   WHERE IFNULL(B.HANDLING_CAPACITY - B.SUPPLY  - B.DEMAND, 999999) > 0;  --Ensure have available handling capacity;   
                    
	   ELSE

		   result = SELECT DISTINCT A.LOCATION_ID,
	                          A.LOCATION_NAME,
	                          A.EQUIP_TYPE_ID,
	                          A.EQUIP_TYPE_NAME,                                                    
	                          IFNULL (TO_VARCHAR(TO_DECIMAL(A.TRANSPORTATION_COST, 13, 2)),'0.00') || ' / ' 
	                          || IFNULL (TO_VARCHAR(TO_DECIMAL(A.HANDLING_COST, 13, 2)),'0.00') || ' / '
	                          || IFNULL (TO_VARCHAR(TO_DECIMAL(A.STORAGE_COST, 13, 2)),'0.00') AS EXP_TRAN_COS,
	                          A.COST*:V_QUANTITY AS TOTAL_COST,
	                          A.SUPPLY - A.DEMAND AS CUR_BALANCING_SD_PLAN,
	                          A.SUPPLY - A.DEMAND - A.IMPACTED_DEMAND + A.IMPACTED_SUPPLY  AS IMPACTED_SD_PLAN,                         
	                         IFNULL (TO_VARCHAR(A.STOCK),'0')||' / '||IFNULL (TO_VARCHAR(A.MAX_CAPACITY),'999999')  AS CUR_STOCK, 
	                         B.HANDLING_CAPACITY - B.SUPPLY  - B.DEMAND AS REMAINING_HANDLING_CAPACITY,                                   
	                         ROW_NUMBER() OVER (ORDER BY COST,BALANCE)      AS RANK 
	                   FROM (SELECT * FROM :t_cost_balance WHERE COST IS NOT NULL) A 
	                   LEFT OUTER JOIN :T_HANDLING_CAPACITY B ON A.LOCATION_ID = B.LOCATION_ID AND A.START_TIME = B.START_TIME AND A.END_TIME = B.END_TIME;  
	                   
      END IF;               
   END IF;                
                   		 
END;