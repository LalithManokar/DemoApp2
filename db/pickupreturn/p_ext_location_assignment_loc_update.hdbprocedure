PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn::p_ext_location_assignment_loc_update"(
    IN RULE_ID BIGINT,
    IN TU_IDS CLOB,
    IN LOCATION_NAME VARCHAR(20),
    OUT MESSAGE VARCHAR(50),
    OUT ASSIGN_STATUS_INVALID "sap.tm.trp.db.pickupreturn::tt_tu_assign_status",
    OUT ASSIGN_STATUS_SUCCESS "sap.tm.trp.db.pickupreturn::tt_tu_assign_status"
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    AS
BEGIN
    DECLARE LOC_COUNT INTEGER;
    DECLARE LOCATION_ID VARCHAR(22);
    DECLARE COUNT_TU_DRAFT INTEGER;
    DECLARE USER_NAME VARCHAR(60);
    DECLARE TOTAL_COUNT INTEGER;
    
     DECLARE TU_IDS_P TABLE(
        "TU_ID" VARCHAR(200)
       );
        CALL "sap.tm.trp.db.dashboard::sp_splitter_clob" (:TU_IDS,',',TU_IDS_STRING);
        TU_IDS_P = SELECT string as TU_ID FROM :TU_IDS_STRING;

    SELECT IFNULL (MAX (USERNAME),'') INTO USER_NAME
    FROM "sap.tm.trp.db.systemmanagement.user::cv_get_username";

    SELECT COUNT(*) INTO COUNT_TU_DRAFT
    FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
    WHERE RULE_ID = :RULE_ID
    AND USER = :USER_NAME;

    --CALL "sap.tm.trp.db.pickupreturn::p_ext_get_staging_tu"(:RULE_ID, TU_INFO);

    --WHETHER THE ASSIGN LOCATION EXIST
    SELECT COUNT(*) INTO LOC_COUNT
    FROM "sap.tm.trp.db.systemmanagement.user::cv_user_location_all_ui"
    WHERE LOCATION_NAME = :LOCATION_NAME;

    --NOT EXIST
    IF :LOC_COUNT = 0 THEN
        IF :LOCATION_NAME = '' THEN
          --update draft table and clear previous assignment
          UPDATE "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
          SET PRE_LOCATION_ID = '',
              ASSIGN_STATUS = 0,
              STREETTURN_TU_ID = '' ,  -- clear street turn id
              FLAG = 0
          WHERE RULE_ID = :RULE_ID
          AND TU_ID IN (SELECT TU_ID FROM :TU_IDS_P)
          AND USER = :USER_NAME;

          MESSAGE := 'SUCCESS';
        ELSE
          MESSAGE := 'MSG_ERROR_INVALID_LOCATION_NAME';
        END IF;
        ASSIGN_STATUS_INVALID = SELECT TOP 0 0 AS RULE_ID,'' AS TU_ID, 0 AS QUANTITY, 0 AS ASSIGN_STATUS,'' AS MESSAGE_KEY
                                FROM DUMMY;
        ASSIGN_STATUS_SUCCESS = SELECT TOP 0 0 AS RULE_ID,'' AS TU_ID, 0 AS QUANTITY, 0 AS ASSIGN_STATUS,'' AS MESSAGE_KEY
                                FROM DUMMY;
    ELSE

      SELECT IFNULL(MAX(ID), '') INTO LOCATION_ID
      FROM "sap.tm.trp.db.semantic.location::v_location"
      WHERE NAME = :LOCATION_NAME;

       --get assigned TU valid status
      CALL "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn::p_required_quantity_compare_capacity" (
        :LOCATION_ID,
        :RULE_ID,
        :TU_IDS,
        VALID_STATUS,
        TU_INFO
      );

	--PREPARE TU INFO
    TUS = SELECT DISTINCT RULE_ID,TRANSPORTATION_ID AS TU_ID,QUANTITY,RESOURCE_TYPE
          FROM :TU_INFO
          WHERE TRANSPORTATION_ID IN (SELECT TU_ID FROM :TU_IDS_P);

      --if have draft
      IF :COUNT_TU_DRAFT >0 THEN
        --update valid flag in TU view table
	    ASSIGNED_STATUS = SELECT DISTINCT T1.RULE_ID,
							    T1.USER,
							    T1.TU_ID,
							    T1.TU_TYPE_CODE,
							    T1.EXECUTION_STATUS_CODE,
							    T1.SHIPPER_ID,
							    T1.CONSIGNEE_ID,
							    T1.RESOURCE_TYPE,
							    T1.QUANTITY,
							    T1.ASSIGN_QUANTITY,
							    T1.RESOURCE_NUMBER,
							    T1.SOURCE_LOCATION_ID,
							    T1.DESTINATION_LOCATION_ID,
							    T1.POL,
							    T1.POD,
							    T1.DATE,
							    CASE WHEN  T3.TU_ID IS NULL THEN T1.PRE_LOCATION_ID
				                 ELSE :LOCATION_ID END AS PRE_LOCATION_ID,
							    T1.CUR_LOCATION_ID,
							    T1.PRE_DATE,
							    T1.CUR_DATE,
							    T1.OP_SETTING_TYPE,
							    T1.SCHEDULE_TIME_TYPE,
							    T1.PLANNING_RELEVANT,
							    T1.CUSTOMER_CODE,
							    T1.ITE_KEY,
							    T1.LIFECYCLE_CODE,
							    T1.BOOKING_DATE,
							    CASE WHEN T2.ASSIGN_STATUS = 0 THEN T1.ASSIGN_STATUS
							    ELSE CASE WHEN T2.ASSIGN_STATUS IS NOT NULL THEN T2.ASSIGN_STATUS 
				                     ELSE T1.ASSIGN_STATUS 
				                     END
				                END AS ASSIGN_STATUS,
							    T1.RULE_TYPE,
							    T1.SAVE_TIME,
							    CASE WHEN T3.TU_ID IS NOT NULL  THEN 2
				                ELSE T1.FLAG END AS FLAG,
							    T1.BOOKING_REFERENCE,
							    T1.MOT,
							    T1.MEANS_OF_TRANSPORTATION,
							    T1.CARRIER_POL,
							    T1.CARRIER_POD,
							    T1.VOYAGE_POL,
							    T1.VOYAGE_POD,
							    T1.SPECIAL_INSTRUCTION_CODE,
							    T1.SPECIAL_INSTRUCTION_NAME,
							    T1.LAST_LOCATION_ID,
							    T1.LAST_LOCATION_NAME,
							    T1.LEASE_AGREEMENT,
							    T1.LEASE_TYPE_CODE,
							    T1.LEASE_TYPE,
							    T1.ASSIGNED_RESOURCE,
							    T1.VESSEL_CUTOFF_TIME,
							    T1.VESSEL_ARRIVAL_DATE,
							    T1.VESSEL_POL,
							    T1.VESSEL_POD,
							    CASE WHEN T3.TU_ID IS NOT NULL THEN '' ELSE T1.STREETTURN_TU_ID END AS STREETTURN_TU_ID,
							    T1.INVALID,
							    T1.PLAN_STATUS
						FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft" T1
						LEFT JOIN :VALID_STATUS T2
						ON (T1.RULE_ID = T2.RULE_ID AND T1.TU_ID = T2.TU_ID)
						LEFT JOIN :TU_IDS_P T3
						ON (T1.TU_ID=T3.TU_ID)
						WHERE T1.USER = :USER_NAME
						AND T1.RULE_ID = :RULE_ID;

		DELETE FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
		WHERE USER = :USER_NAME
	    AND RULE_ID = :RULE_ID;

	    INSERT INTO "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"(
                   RULE_ID,
	               USER,
	               TU_ID,
	               TU_TYPE_CODE,
	               EXECUTION_STATUS_CODE,
	               SHIPPER_ID,
	               CONSIGNEE_ID,
	               RESOURCE_TYPE,
	               QUANTITY,
	               ASSIGN_QUANTITY,
	               RESOURCE_NUMBER,
	               SOURCE_LOCATION_ID,
	               DESTINATION_LOCATION_ID,
	               POL,
	               POD,
	               DATE,
	               PRE_LOCATION_ID,
	               CUR_LOCATION_ID,
	               PRE_DATE,
	               CUR_DATE,
	               OP_SETTING_TYPE,
	               SCHEDULE_TIME_TYPE,
	               PLANNING_RELEVANT,
	               CUSTOMER_CODE,
	               ITE_KEY,
	               LIFECYCLE_CODE,
	               BOOKING_DATE,
	               ASSIGN_STATUS,
	               RULE_TYPE,
	               SAVE_TIME,
	               FLAG,
	               BOOKING_REFERENCE,
				   MOT,
				   MEANS_OF_TRANSPORTATION,
				   CARRIER_POL,
				   CARRIER_POD,
				   VOYAGE_POL,
				   VOYAGE_POD,
				   SPECIAL_INSTRUCTION_CODE,
				   SPECIAL_INSTRUCTION_NAME,
				   LAST_LOCATION_ID,
				   LAST_LOCATION_NAME,
				   LEASE_AGREEMENT,
				   LEASE_TYPE_CODE,
				   LEASE_TYPE,
			       ASSIGNED_RESOURCE,
			       VESSEL_CUTOFF_TIME,
			       VESSEL_ARRIVAL_DATE,
				   VESSEL_POL,
				   VESSEL_POD,
				   STREETTURN_TU_ID,
				   INVALID,
				   PLAN_STATUS
				   )
	    SELECT DISTINCT * FROM :ASSIGNED_STATUS;

      ELSE

        pre_data = SELECT DISTINCT * FROM (
                     SELECT T1.RULE_ID,
				             :USER_NAME AS USER,
				             T1.TRANSPORTATION_ID,
				             T1.TU_TYPE_CODE,
				             T1.EXECUTION_STATUS_CODE,
				             T1.SHIPPER_ID,
				             T1.CONSIGNEE_ID,
				             T1.RESOURCE_TYPE,
				             T1.QUANTITY,
				             T1.ASSIGNED_CONTAINERS,
				             T1.RESOURCE_NUMBER,
				             T1.SOURCE_LOCATION_ID,
				             T1.DESTINATION_LOCATION_ID,
				             T1.POL,
				             T1.POD,
				             IFNULL(T1.VESSEL_CUTOFF_TIME,T1.VESSEL_ARRIVAL_DATE) AS DATE,
				             '' AS PRE_LOCATION_ID,
				             CASE T1.RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID
				             	 ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
				             CASE T1.RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE
				             	 ELSE T1.RETURN_DATE END AS PRE_DATE,
				             CASE T1.RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE
				             	 ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
				             T2.OP_SETTING_TYPE,
				             T2.SCHEDULE_TIME_TYPE,
				             T1.RELEVANT_PLANNING,
				             T1.CUSTOMER_CODE,
				             T1.ITE_KEY,
				             T1.LIFECYCLE_CODE,
				             T1.BOOKING_DATE,
				             0 AS ASSIGN_STATUS,
				             T2.RULE_TYPE,
				             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
				             0 AS FLAG,
				             T1.BOOKING_REFERENCE,
		                     T1.MOT,
			                 T1.MEANS_OF_TRANSPORTATION,
		                     T1.CARRIER_POL,
		                     T1.CARRIER_POD,
			                 T1.VOYAGE_POL,
				             T1.VOYAGE_POD,
			                 T1.SPECIAL_INSTRUCTION_CODE,
			                 T1.SPECIAL_INSTRUCTION_NAME,
			                 T1.LAST_LOCATION_ID,
			                 T1.LAST_LOCATION_NAME,
			                 T1.LEASE_AGREEMENT,
			                 T1.LEASE_TYPE_CODE,
			                 T1.LEASE_TYPE,
			                 T1.ASSIGNED_RESOURCE,
			                 T1.VESSEL_CUTOFF_TIME,
			                 T1.VESSEL_ARRIVAL_DATE,
				             T1.VESSEL_POL,
				             T1.VESSEL_POD,
				             T1.STREETTURN_TU_ID,
				             T1.INVALID,
				             T1.PLAN_STATUS
				      FROM :TU_INFO T1
				      LEFT JOIN "sap.tm.trp.db.pickupreturn::t_location_assignment_rule" T2
				      ON (T1.RULE_ID = T2.ID)
				      WHERE T1.TRANSPORTATION_ID NOT IN (SELECT TU_ID FROM :TUS)
				      UNION
				      SELECT T1.RULE_ID,
				             :USER_NAME AS USER,
				             T1.TRANSPORTATION_ID,
				             T1.TU_TYPE_CODE,
				             T1.EXECUTION_STATUS_CODE,
				             T1.SHIPPER_ID,
				             T1.CONSIGNEE_ID,
				             T1.RESOURCE_TYPE,
				             T1.QUANTITY,
				             T1.ASSIGNED_CONTAINERS,
				             T1.RESOURCE_NUMBER,
				             T1.SOURCE_LOCATION_ID,
				             T1.DESTINATION_LOCATION_ID,
				             T1.POL,
				             T1.POD,
				             IFNULL(T1.VESSEL_CUTOFF_TIME,T1.VESSEL_ARRIVAL_DATE) AS DATE,
				             CASE T3.ASSIGN_STATUS WHEN 0 THEN IFNULL(NULLIF(T1.PICKUP_LOCATION_ID, ''),T1.RETURN_LOCATION_ID)
				                 ELSE :LOCATION_ID END AS PRE_LOCATION_ID,
				             CASE T1.RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID
				             	 ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
				             CASE T1.RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE
				             	 ELSE T1.RETURN_DATE END AS PRE_DATE,
				             CASE T1.RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE
				             	 ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
				             T2.OP_SETTING_TYPE,
				             T2.SCHEDULE_TIME_TYPE,
				             T1.RELEVANT_PLANNING,
				             T1.CUSTOMER_CODE,
				             T1.ITE_KEY,
				             T1.LIFECYCLE_CODE,
				             T1.BOOKING_DATE,
				             CASE T3.ASSIGN_STATUS
			                   WHEN 0 THEN T1.ASSIGN_STATUS
			                   ELSE T3.ASSIGN_STATUS
			                 END AS ASSIGN_STATUS,
				             T2.RULE_TYPE,
				             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
				             CASE T3.ASSIGN_STATUS WHEN 0 THEN T1.FLAG
				                 ELSE 2 END AS FLAG,
				             T1.BOOKING_REFERENCE,
		                     T1.MOT,
			                 T1.MEANS_OF_TRANSPORTATION,
		                     T1.CARRIER_POL,
		                     T1.CARRIER_POD,
				             T1.VOYAGE_POL,
				             T1.VOYAGE_POD,
			                 T1.SPECIAL_INSTRUCTION_CODE,
			                 T1.SPECIAL_INSTRUCTION_NAME,
			                 T1.LAST_LOCATION_ID,
			                 T1.LAST_LOCATION_NAME,
			                 T1.LEASE_AGREEMENT,
			                 T1.LEASE_TYPE_CODE,
			                 T1.LEASE_TYPE,
			                 T1.ASSIGNED_RESOURCE,
			                 T1.VESSEL_CUTOFF_TIME,
			                 T1.VESSEL_ARRIVAL_DATE,
				             T1.VESSEL_POL,
				             T1.VESSEL_POD,
				             T1.STREETTURN_TU_ID,
				             T1.INVALID,
				             T1.PLAN_STATUS
				      FROM :TU_INFO T1
				      LEFT JOIN "sap.tm.trp.db.pickupreturn::t_location_assignment_rule" T2
				      ON (T1.RULE_ID = T2.ID)
				      LEFT JOIN :VALID_STATUS T3
				      ON ((T1.RULE_ID = T3.RULE_ID AND T1.TRANSPORTATION_ID = T3.TU_ID))
				      WHERE T1.TRANSPORTATION_ID IN (SELECT TU_ID FROM :TU_IDS_P))
				      ORDER BY RULE_ID, USER, TRANSPORTATION_ID;

        --insert data to draft table if there is no such data
        INSERT INTO "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"(
                   RULE_ID,
	               USER,
	               TU_ID,
	               TU_TYPE_CODE,
	               EXECUTION_STATUS_CODE,
	               SHIPPER_ID,
	               CONSIGNEE_ID,
	               RESOURCE_TYPE,
	               QUANTITY,
	               ASSIGN_QUANTITY,
	               RESOURCE_NUMBER,
	               SOURCE_LOCATION_ID,
	               DESTINATION_LOCATION_ID,
	               POL,
	               POD,
	               DATE,
	               PRE_LOCATION_ID,
	               CUR_LOCATION_ID,
	               PRE_DATE,
	               CUR_DATE,
	               OP_SETTING_TYPE,
	               SCHEDULE_TIME_TYPE,
	               PLANNING_RELEVANT,
	               CUSTOMER_CODE,
	               ITE_KEY,
	               LIFECYCLE_CODE,
	               BOOKING_DATE,
	               ASSIGN_STATUS,
	               RULE_TYPE,
	               SAVE_TIME,
	               FLAG,
	               BOOKING_REFERENCE,
				   MOT,
				   MEANS_OF_TRANSPORTATION,
				   CARRIER_POL,
				   CARRIER_POD,
				   VOYAGE_POL,
				   VOYAGE_POD,
				   SPECIAL_INSTRUCTION_CODE,
				   SPECIAL_INSTRUCTION_NAME,
				   LAST_LOCATION_ID,
				   LAST_LOCATION_NAME,
				   LEASE_AGREEMENT,
				   LEASE_TYPE_CODE,
				   LEASE_TYPE,
			       ASSIGNED_RESOURCE,
			       VESSEL_CUTOFF_TIME,
			       VESSEL_ARRIVAL_DATE,
				   VESSEL_POL,
				   VESSEL_POD,
				   STREETTURN_TU_ID,
				   INVALID,
				   PLAN_STATUS)
	    SELECT RULE_ID,
			   USER,
			   TRANSPORTATION_ID,
			   TU_TYPE_CODE,
			   EXECUTION_STATUS_CODE,
			   SHIPPER_ID,
			   CONSIGNEE_ID,
			   RESOURCE_TYPE,
			   QUANTITY,
			   ASSIGNED_CONTAINERS,
			   RESOURCE_NUMBER,
			   SOURCE_LOCATION_ID,
			   DESTINATION_LOCATION_ID,
			   POL,
			   POD,
			   DATE,
			   PRE_LOCATION_ID,
			   CUR_LOCATION_ID,
			   PRE_DATE,
			   CUR_DATE,
			   OP_SETTING_TYPE,
			   SCHEDULE_TIME_TYPE,
			   RELEVANT_PLANNING,
			   CUSTOMER_CODE,
			   ITE_KEY,
			   LIFECYCLE_CODE,
			   BOOKING_DATE,
			   ASSIGN_STATUS,
			   RULE_TYPE,
			   SAVE_TIME,
			   FLAG,
			   BOOKING_REFERENCE,
		       MOT,
			   MEANS_OF_TRANSPORTATION,
		       CARRIER_POL,
		       CARRIER_POD,
			   VOYAGE_POL,
			   VOYAGE_POD,
			   SPECIAL_INSTRUCTION_CODE,
			   SPECIAL_INSTRUCTION_NAME,
			   LAST_LOCATION_ID,
			   LAST_LOCATION_NAME,
			   LEASE_AGREEMENT,
			   LEASE_TYPE_CODE,
			   LEASE_TYPE,
			   ASSIGNED_RESOURCE,
			   VESSEL_CUTOFF_TIME,
			   VESSEL_ARRIVAL_DATE,
			   VESSEL_POL,
			   VESSEL_POD,
			   STREETTURN_TU_ID,
			   INVALID,
			   PLAN_STATUS FROM :PRE_DATA;

      END IF ;

      ASSIGN_STATUS_INVALID = SELECT * FROM :VALID_STATUS WHERE ASSIGN_STATUS = 2;
      ASSIGN_STATUS_SUCCESS = SELECT * FROM :VALID_STATUS WHERE ASSIGN_STATUS = 1;
      MESSAGE := 'SUCCESS';
    END IF;
END;
