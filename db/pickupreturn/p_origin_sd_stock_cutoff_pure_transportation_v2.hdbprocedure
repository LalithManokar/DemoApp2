PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn::p_origin_sd_stock_cutoff_pure_transportation_v2" ( 
 IN SD_EXECUTIION_RESULT "sap.tm.trp.db.pipeline::t_pipeline_output_dataset",
 IN IV_EXECUTION_ID BIGINT,
 IN IV_NETWORK_GROUP_ID BIGINT,
 IN IT_SD_DATA "sap.tm.trp.db.planningcockpit::tt_sd_result",
 OUT ET_SD_DATA "sap.tm.trp.db.planningcockpit::tt_sd_result"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
	READS SQL DATA AS
BEGIN

 DECLARE LV_INCL_ON_OFF_HIRE INT DEFAULT 0;
  DECLARE LV_INCL_OVERDUE INT DEFAULT 0;
  DECLARE LV_INCL_MAR INT DEFAULT 0;
  DECLARE V_COUNT INT DEFAULT 0;
  --Get the parameters from network setting group
  SELECT COUNT(*)
  INTO LV_INCL_ON_OFF_HIRE
  FROM "sap.tm.trp.db.planningcockpit::t_network_setting_group_parameter_value" as T0
  WHERE T0.NETWORK_SETTING_GROUP_ID = :IV_NETWORK_GROUP_ID AND
          T0.PARAMETER_ID             = '20' AND
          T0.VALUE = 'ON-OFF HIRE';  --Including On&Off Hire Activities
          
  SELECT COUNT(*)
	INTO LV_INCL_OVERDUE
    FROM "sap.tm.trp.db.planningcockpit::t_network_setting_group_parameter_value" as T0
    WHERE T0.NETWORK_SETTING_GROUP_ID = :IV_NETWORK_GROUP_ID AND
          T0.PARAMETER_ID             = '20' AND
          T0.VALUE = 'OVERDUE ACTIVITIES';  --Including Overdue Activities  
          
  SELECT COUNT(*)
	INTO LV_INCL_MAR
    FROM "sap.tm.trp.db.planningcockpit::t_network_setting_group_parameter_value" as T0
    WHERE T0.NETWORK_SETTING_GROUP_ID = :IV_NETWORK_GROUP_ID AND
          T0.PARAMETER_ID             = '20' AND
          T0.VALUE = 'MAINTENANCE AND REPAIR';  --Including Overdue Activities                           
   	
  ET_SD_DATA = SELECT * FROM :IT_SD_DATA;
   	
  IF LV_INCL_OVERDUE = 1  OR LV_INCL_ON_OFF_HIRE = 1 OR LV_INCL_MAR = 1 THEN
    SELECT COUNT(*) INTO V_COUNT FROM :SD_EXECUTIION_RESULT;
    IF V_COUNT <= 0 THEN
      SD_EXECUTIION_RESULT =
        SELECT * FROM  "sap.tm.trp.db.pipeline::t_pipeline_output_dataset" WHERE PLAN_EXECUTION_ID = :IV_EXECUTION_ID;
    END IF;
  END IF;
  
  IF LV_INCL_OVERDUE = 1 THEN
    --get all the overdue activities
  	LT_OVERDUE = 
  	SELECT LOCATION_ID,LOCATION_NAME,EQUIP_TYPE_ID,TIME_INTERVAL_ID,START_TIME,END_TIME,
		SUM( CASE OUTPUT_KEY WHEN 'SUPPLY' THEN OUTPUT_VALUE ELSE 0 END ) AS SUPPLY,
		SUM( CASE OUTPUT_KEY WHEN 'DEMAND' THEN OUTPUT_VALUE ELSE 0 END ) AS DEMAND
	FROM :SD_EXECUTIION_RESULT A
	JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" B
		ON A.NODE_ID = B.ID AND B.NAME IN ('OVERDUE_EMPTY_PICKUP','OVERDUE_INLAND_REPO_OUT','OVERDUE_MARITIME_REPO_OUT','OVERDUE_EMPTY_RETURN','OVERDUE_MARITIME_REPO_IN','OVERDUE_INLAND_REPO_IN')
	GROUP BY LOCATION_ID,LOCATION_NAME,EQUIP_TYPE_ID,TIME_INTERVAL_ID,START_TIME,END_TIME;  
	
	--remove overdue activities data	
	ET_SD_DATA = 
	SELECT A.LOCATION_ID,A.LOCATION_NAME,A.EQUIP_TYPE_ID,A.TIME_INTERVAL_ID,A.START_TIME,A.END_TIME, 
		   (IFNULL (A.SUPPLY,0) - IFNULL (B.SUPPLY,0)) AS SUPPLY, 
		   (IFNULL (A.DEMAND,0) - IFNULL (B.DEMAND,0)) AS DEMAND
		   FROM :ET_SD_DATA A
		   LEFT JOIN :LT_OVERDUE B
		   ON A.LOCATION_ID = B.LOCATION_ID 
		   AND A.EQUIP_TYPE_ID = B.EQUIP_TYPE_ID 
		   AND A.TIME_INTERVAL_ID = B.TIME_INTERVAL_ID;
  END IF ;
  
  IF LV_INCL_ON_OFF_HIRE = 1 THEN
    --get on&off-hire activities
  	LT_ONFF_HIRE = 
  	SELECT LOCATION_ID,LOCATION_NAME,EQUIP_TYPE_ID,TIME_INTERVAL_ID,START_TIME,END_TIME,
		SUM( CASE OUTPUT_KEY WHEN 'SUPPLY' THEN OUTPUT_VALUE ELSE 0 END ) AS SUPPLY,
		SUM( CASE OUTPUT_KEY WHEN 'DEMAND' THEN OUTPUT_VALUE ELSE 0 END ) AS DEMAND
	FROM :SD_EXECUTIION_RESULT A
	JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" B
		ON A.NODE_ID = B.ID AND B.NAME IN ('EQUIP_ON_HIRE','EQUIP_OFF_HIRE')
	GROUP BY LOCATION_ID,LOCATION_NAME,EQUIP_TYPE_ID,TIME_INTERVAL_ID,START_TIME,END_TIME;  
	
	--remove on-off hire activities data	
	ET_SD_DATA = 
	SELECT A.LOCATION_ID,A.LOCATION_NAME,A.EQUIP_TYPE_ID,A.TIME_INTERVAL_ID,A.START_TIME,A.END_TIME, 
		   (IFNULL (A.SUPPLY,0) - IFNULL (B.SUPPLY,0)) AS SUPPLY, 
		   (IFNULL (A.DEMAND,0) - IFNULL (B.DEMAND,0)) AS DEMAND
		   FROM :ET_SD_DATA A
		   LEFT JOIN :LT_ONFF_HIRE B
		   ON A.LOCATION_ID = B.LOCATION_ID 
		   AND A.EQUIP_TYPE_ID = B.EQUIP_TYPE_ID 
		   AND A.TIME_INTERVAL_ID = B.TIME_INTERVAL_ID;
  END IF ;
  
   IF LV_INCL_MAR = 1 THEN
    --get maintanence and repair activities
  	LT_MAR = 
  	SELECT LOCATION_ID,LOCATION_NAME,EQUIP_TYPE_ID,TIME_INTERVAL_ID,START_TIME,END_TIME,
		SUM( CASE OUTPUT_KEY WHEN 'SUPPLY' THEN OUTPUT_VALUE ELSE 0 END ) AS SUPPLY,
		SUM( CASE OUTPUT_KEY WHEN 'DEMAND' THEN OUTPUT_VALUE ELSE 0 END ) AS DEMAND
	FROM :SD_EXECUTIION_RESULT A
	JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" B
		ON A.NODE_ID = B.ID AND B.NAME IN ('EQUIP_DOWNTIME_IN','EQUIP_DOWNTIME_OUT','STOCK_DAMAGED')
	GROUP BY LOCATION_ID,LOCATION_NAME,EQUIP_TYPE_ID,TIME_INTERVAL_ID,START_TIME,END_TIME;  
	
	--remove maintanence and repair data	
	ET_SD_DATA = 
	SELECT A.LOCATION_ID,A.LOCATION_NAME,A.EQUIP_TYPE_ID,A.TIME_INTERVAL_ID,A.START_TIME,A.END_TIME, 
		   (IFNULL (A.SUPPLY,0) - IFNULL (B.SUPPLY,0)) AS SUPPLY, 
		   (IFNULL (A.DEMAND,0) - IFNULL (B.DEMAND,0)) AS DEMAND
		   FROM :ET_SD_DATA A
		   LEFT JOIN :LT_MAR B
		   ON A.LOCATION_ID = B.LOCATION_ID 
		   AND A.EQUIP_TYPE_ID = B.EQUIP_TYPE_ID 
		   AND A.TIME_INTERVAL_ID = B.TIME_INTERVAL_ID;
  END IF ; 
  
END;
