PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn::p_ext_determination_for_facet_filter" (
    IN RULE_ID  BIGINT,
    IN IV_LOCATION_BASED_COST CLOB
   )
     LANGUAGE SQLSCRIPT
     SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_TRP"
     AS
BEGIN

    DECLARE V_USER_ID                  BIGINT;
    DECLARE V_USERNAME                 VARCHAR(60);
    DECLARE V_TIME_ZONE_ID VARCHAR(20);   

  --rule info
    DECLARE V_RULE_TYPE                INTEGER;
    DECLARE V_SD_PLAN_ID               BIGINT;
    DECLARE V_TIME_RANGE_ID            INTEGER;
    DECLARE V_EQUIP_FILTER_ID          BIGINT;
    DECLARE V_LOCATION_FILTER_ID       BIGINT;
    DECLARE V_NETWORK_SETTING_GROUP_ID BIGINT;
    DECLARE V_OP_SETTING_TYPE          INTEGER;
    DECLARE V_OPTIMIZATION             INTEGER;
    DECLARE V_SCHEDULE_TIME_TYPE       INTEGER;
    DECLARE V_LDR_RULE_ID              INTEGER;
    DECLARE V_OPTIMIZATION_OPTION      VARCHAR(50);
    DECLARE V_EXCLUSIVE_RULE_ID        INTEGER;
    DECLARE V_FILTER_EXECUTION         SMALLINT;

   --supply_demand info
    DECLARE V_EXECUTION_ID             BIGINT;
    DECLARE V_NODE_ID                  BIGINT;
    DECLARE V_SD_LF_ID                 BIGINT;
    DECLARE V_SD_EF_ID                 BIGINT;
    DECLARE TMP_PROV_STOCK_NODE_FLAG   INTEGER;

    DECLARE V_SUCCESS_FLAG             INTEGER;
    DECLARE  MIN_SAFETY_KEY            VARCHAR(20) := 'MIN_SAFETY_STOCK';
    DECLARE MAX_SAFETY_KEY             VARCHAR(20) := 'MAX_SAFETY_STOCK';
    DECLARE MAX_CAPACITY_KEY           VARCHAR(20) := 'MAX_CAPACITY';
    DECLARE MIN_SAFETY_DEFAULT         INTEGER;
    DECLARE MAX_SAFETY_DEFAULT         INTEGER;
    DECLARE MAX_CAPACITY_DEFAULT       INTEGER;

    DECLARE DATE_OFFSET                INTEGER;
    DECLARE COUNT_DATEOFFSET           INTEGER;

    DECLARE SCRIPT                     VARCHAR(5000);
    DECLARE RULE_SP                    VARCHAR(200);
    DECLARE DRAFT_FLAG                 INTEGER;
    DECLARE RESOURCE_CATEGORY          VARCHAR(20);

    DECLARE PICKUPRETURN_MODE          VARCHAR(2);
    DECLARE TOTAL_COUNT                INTEGER;
    DECLARE MANDATORY_COST_MODEL_ID    INTEGER;
	
	DECLARE V_MAX_COST                 DOUBLE;
	DECLARE V_MIN_INTERVAL_ID          INT;
	
	DECLARE shift_c                    INT;
	DECLARE shift                      INT;
	DECLARE V_PLAN_TYPE                INTEGER;

    DECLARE MAX_INTERVAL_BEFORE_CUTOFF BIGINT;
    DECLARE MIN_TIME_INTERVAL          BIGINT;
    DECLARE HANDLING_CAPA              INTEGER;

    -- average stay
    DECLARE END_TIME TIMESTAMP;
    DECLARE START_TIME TIMESTAMP;
    DECLARE V_RESOURCE_TYPE VARCHAR(20);
    DECLARE V_ALL_RESULTS_WITH_X VARCHAR(1);
    DECLARE V_ALL_RESULTS_WITHOUT_X VARCHAR(1);
    
     --LOOPING VARIABLES
    DECLARE j INTEGER := 0;
	DECLARE lv_offset BIGINT;
	DECLARE lv_batch_offset BIGINT;
	DECLARE lv_rule_id VARCHAR(20);
	DECLARE lv_plan_id VARCHAR(20);
	DECLARE lv_ldr_rules VARCHAR(20);
	DECLARE lv_no_of_batches BIGINT;
	DECLARE lv_of_tus_per_batch BIGINT;
	DECLARE lv_configuration_count INTEGER;
	DECLARE lv_tu_count bigint;
	DECLARE lv_loc_count bigint;
	------configuration variables
    DECLARE lv_tu_batch_max_process_record VARCHAR(20);
    DECLARE lv_tu_batch_max_tu_count VARCHAR(20);
    DECLARE lv_tu_batch_max_process_record_cnt bigint;
    DECLARE lv_tu_batch_max_tu_count_cnt bigint;
    DECLARE lv_data_packet_size bigint;
    DECLARE lv_default_data_packet_size bigint := 5000000 ; -- 5 Million
    DECLARE lv_min_data_packet_size bigint := 100000; -- 1lakh
    DECLARE lv_max_data_packet_size bigint := 50000000; --50 Million
    
    CALL "sap.tm.trp.db.dashboard::sp_splitter_clob" (:IV_LOCATION_BASED_COST,'~',lt_loc_cost_raw);
    LOCATION_BASED_COST = select CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 1) as VARCHAR(200)) as FROM_LOCATION,
                                CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 2) as VARCHAR(200)) as TO_LOCATION,
                                CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 3) as NVARCHAR(20)) as MTR,
                                CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 4) as NVARCHAR(20)) as RESOURCE_TYPE,
                                CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 5) as NVARCHAR(20)) as CARRIER,
                                CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 6) as DECIMAL(13,3)) as DISTANCE,
                                CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 7) as INTEGER) as DURATION
                            from :lt_loc_cost_raw;
  
  	CALL "sap.tm.trp.db.pickupreturn.settings::p_check_lane_for_location_pair_group"(:LOCATION_BASED_COST, LOCATION_BASED_COST);
    --Rule INFO
    CALL "sap.tm.trp.db.pickupreturn::p_location_ruleset_info" ( 
      :RULE_ID,
      V_RULE_TYPE,
      V_SD_PLAN_ID,
      V_TIME_RANGE_ID, 
      V_EQUIP_FILTER_ID,
      V_LOCATION_FILTER_ID,
      V_NETWORK_SETTING_GROUP_ID,
      V_OP_SETTING_TYPE,
      V_OPTIMIZATION,
      V_SCHEDULE_TIME_TYPE,
      V_LDR_RULE_ID,
      V_EXCLUSIVE_RULE_ID,
      V_FILTER_EXECUTION,
      RESOURCE_CATEGORY
    );

    SELECT IFNULL(MAX(T1.NAME), '') INTO RULE_SP
    FROM "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_rule" T1
    WHERE T1.RULE_ID = :V_LDR_RULE_ID;

    SELECT IFNULL(MAX(CASE RULE_TYPE WHEN 1 THEN 'EP' WHEN 2 THEN 'ER' END),'') INTO PICKUPRETURN_MODE
    FROM "sap.tm.trp.db.pickupreturn::t_location_assignment_rule"
    WHERE ID=:RULE_ID;

    SELECT IFNULL (MAX (USERNAME),''),'','','X'
    INTO V_USERNAME,V_RESOURCE_TYPE,V_ALL_RESULTS_WITHOUT_X,V_ALL_RESULTS_WITH_X
    FROM "sap.tm.trp.db.systemmanagement.user::cv_get_username";

    SELECT IFNULL (MAX (SHIFT),0) INTO shift
	FROM "sap.tm.trp.db.pickupreturn::t_shift2" WHERE NAME=:V_USERNAME;
	
	
    --Optimization options
    SELECT IFNULL (MAX(CASE OPTIMIZATION WHEN 1 THEN 'COST' ELSE 'BALANCE' END),'') INTO V_OPTIMIZATION_OPTION
    FROM "sap.tm.trp.db.pickupreturn::t_location_assignment_rule"
    WHERE ID=:RULE_ID;

    CALL "sap.tm.trp.db.pickupreturn::p_ext_get_staging_tu"(:RULE_ID, TU_INFO);
    
        TU_IDS = SELECT DISTINCT TRANSPORTATION_ID AS TU_ID, RESOURCE_TYPE
          --  CASE WHEN :V_RULE_TYPE=1 THEN IFNULL(PICKUP_DATE,NULL)
            --    WHEN :V_RULE_TYPE=2 THEN IFNULL (RETURN_DATE,NULL) 
               -- END AS PRE_DATE  
                FROM :TU_INFO;
                

    --DATEOFFSET OF THIS USER TO QUERY OLD INFO
    SELECT IFNULL(MAX (DATE_OFFSET), 0) INTO DATE_OFFSET
    FROM "sap.tm.trp.db.stock::t_start_time_for_user"
    WHERE USER = :V_USERNAME;

    --Check the PLAN is Virtual Plan or Scheudled SD Plan
    SELECT PLAN_MODEL_TYPE_ID
    INTO  V_PLAN_TYPE
    FROM "sap.tm.trp.db.pipeline::t_plan_model" 
    WHERE ID = :V_SD_PLAN_ID ;

    --GET USED SD PLAN'S LOCATION FILTER
    SELECT IFNULL (MAX (LOCATION_FILTER_ID),0) INTO V_SD_LF_ID
    FROM "sap.tm.trp.db.pipeline::t_plan_model" A
    INNER JOIN "sap.tm.trp.db.filter::t_filter_location_filter" B
    ON A.FILTER_GROUP_ID = B.FILTER_GROUP_ID
    WHERE A.ID  = :V_SD_PLAN_ID;

    --GET USED SD PLAN'S RESOURCE FILTER
    SELECT IFNULL (MAX (EQUIPMENT_FILTER_ID),0) INTO V_SD_EF_ID
    FROM "sap.tm.trp.db.pipeline::t_plan_model" A
    INNER JOIN "sap.tm.trp.db.filter::t_filter_equipment_filter" B
    ON A.FILTER_GROUP_ID = B.FILTER_GROUP_ID
    WHERE A.ID = :V_SD_PLAN_ID;

    --Get cost model
    SELECT IFNULL (MAX (MANDATORY_COST_MODEL_ID),0) INTO MANDATORY_COST_MODEL_ID
    FROM "sap.tm.trp.db.planningcockpit::v_network_setting_group"
    WHERE ID = :V_NETWORK_SETTING_GROUP_ID;
    
     RESOURCE_TYPES_CODE_TEU_COUNT=SELECT DISTINCT T1.RESOURCE_TYPE_CODE,T3.TEU_COUNT
                     FROM "sap.tm.trp.db.semantic.resource::v_resource_type_with_category" T1
                     INNER JOIN "sap.tm.trp.db.costmodel::v_cost_model" T2
                     ON (T1.RESOURCE_CATEGORY = T2.RESOURCE_CATEGORY)
                     INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_type" T3
                     ON (T1.RESOURCE_TYPE_CODE = T3.RESOURCE_TYPE_CODE)-- and T1.EQUI_TYPE = T3.EQUI_TYPE)
                     WHERE T2.ID = :MANDATORY_COST_MODEL_ID;
                     
    LOCATION_BASED_COST_TMP = SELECT FROM_LOCATION,
                                     TO_LOCATION,
                                     MTR,
                                     CARRIER,
                                     RESOURCE_TYPE,
                                     DISTANCE,
                                     DURATION
                              FROM :LOCATION_BASED_COST;
    
    --Get transportation cost by cost model
    CALL "sap.tm.trp.routing.db.cost::p_calculate_connection_transport_cost_new"(
        :MANDATORY_COST_MODEL_ID,
        :RESOURCE_TYPES_CODE_TEU_COUNT,
        :LOCATION_BASED_COST_TMP,
        CALCULATED_TRANSPORT_COST
    );
    
   
	-- get the default stock threshold  
    SELECT IFNULL(MAX(T1.DEFAULT_VALUE),0) INTO MIN_SAFETY_DEFAULT
    FROM "sap.tm.trp.db.hrf.ruleManage::t_global_default_minMaxSafetyCapacity" T1
    WHERE T1.DEFAULT_KEY = :MIN_SAFETY_KEY;
    
    SELECT IFNULL(MAX(T1.DEFAULT_VALUE),999999) INTO MAX_SAFETY_DEFAULT
    FROM "sap.tm.trp.db.hrf.ruleManage::t_global_default_minMaxSafetyCapacity" T1
    WHERE T1.DEFAULT_KEY = :MAX_SAFETY_KEY; 
    
    SELECT IFNULL(MAX(T1.DEFAULT_VALUE),999999) into MAX_CAPACITY_DEFAULT
    FROM "sap.tm.trp.db.hrf.ruleManage::t_global_default_minMaxSafetyCapacity" T1
    WHERE T1.DEFAULT_KEY = :MAX_CAPACITY_KEY;
	
	--Get handling cost by cost model
	prepare_direction = SELECT DISTINCT 
	                           CASE :V_RULE_TYPE WHEN 1 THEN FROM_LOCATION
	                                             WHEN 2 THEN TO_LOCATION 
	                           END AS LOCATION,
	                           CASE :V_RULE_TYPE WHEN 1 THEN ''
							                     WHEN 2 THEN MTR 
							   END AS FROM_MTR,
	                           CASE :V_RULE_TYPE WHEN 1 THEN MTR
							                     WHEN 2 THEN '' 
							   END AS TO_MTR,
	                           RESOURCE_TYPE
	                    FROM :LOCATION_BASED_COST;
    
    CALL "sap.tm.trp.routing.db.cost::p_calculate_location_handling_cost_new"(
        :MANDATORY_COST_MODEL_ID,
        :RESOURCE_TYPES_CODE_TEU_COUNT,
        :PREPARE_DIRECTION,
        HANDLING_COST
    );
	
		--Get Pure SD data
    IF V_PLAN_TYPE = 1 THEN
        -----begin of change for redesign Jan 15 2020 ---
        call "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn::p_get_plan_data_by_sd_planid"(:V_SD_PLAN_ID,:V_RESOURCE_TYPE,:V_ALL_RESULTS_WITH_X,V_SD_LF_ID, V_SD_EF_ID, V_EXECUTION_ID, V_NODE_ID,plan_data_from_cv,SD_EXECUTIION_RESULT);
        CALL "sap.tm.trp.db.pickupreturn::p_origin_sd_stock_cutoff_v2" 
          (
            :SD_EXECUTIION_RESULT,
            :V_EXECUTION_ID,
            :V_SD_PLAN_ID,
            :V_NODE_ID,
            PURE_SD,
            INITIAL_STOCK
           );
       -----end of change for redesign Jan 15 2020 ---
    	SELECT MIN(TIME_INTERVAL_ID) INTO V_MIN_INTERVAL_ID FROM :PURE_SD;
    	
    	PURE_SD =   SELECT T0.LOCATION_ID,
    					   T0.LOCATION_NAME,
    					   T0.EQUIP_TYPE_ID,      
    					   T0.TIME_INTERVAL_ID,
    					   T0.START_TIME,
    					   T0.END_TIME,
    					   IFNULL(T0.SUPPLY-T1.INIT_STOCK,SUPPLY) AS SUPPLY,
    					   DEMAND
    				FROM   :PURE_SD T0
    				LEFT JOIN :INITIAL_STOCK T1	ON  T0.LOCATION_ID      = T1.LOCATION_ID
                                		    	AND T0.EQUIP_TYPE_ID    = T1.RESOURCE_TYPE
                                				AND T0.TIME_INTERVAL_ID =:V_MIN_INTERVAL_ID;
        
        loc_equip = SELECT DISTINCT EQUIP_TYPE_ID AS RESOURCE_TYPE, EQUIP_TYPE_NAME AS RESOURCE_TYPE_NAME,
                  LOCATION_ID, LOCATION_NAME FROM :plan_data_from_cv;
                  
        t_current_stock = SELECT LOCATION_NAME AS LOCATION,EQUIP_TYPE_ID AS RESOURCE_TYPE, START_TIME, END_TIME, SUPPLY, DEMAND, 0 AS STOCK
                        FROM :plan_data_from_cv;
        
     IF :V_OP_SETTING_TYPE = 1 OR :V_OP_SETTING_TYPE = 3  THEN         
        PLAN_DATA  = SELECT 
                        V_EXECUTION_ID AS PLAN_EXECUTION_ID,
                        V_NODE_ID AS NODE_ID,
                        T0.EQUIP_TYPE_ID,
                        T0.EQUIP_TYPE_NAME,
                        T0.LOCATION_ID,
                        T0.LOCATION_NAME,
                        T0.SUPPLY,
                        T0.DEMAND,
                        T0.BALANCE_SUPPLY_DEMAND,
                        T0.BALANCE_STOCK_SUPPLY_DEMAND,
                        IFNULL (T0.MIN_SAFETY_STOCK,0) AS MIN_SAFETY_STOCK,
                        T0.MAX_SAFETY_STOCK,
                        T0.MAX_CAPACITY,
                        T0.MIN_SAFETY_STOCK_HEADER,
                        T0.MAX_SAFETY_STOCK_HEADER,
                        T0.MAX_CAPACITY_HEADER,
                        T0.STOCK_BALANCE_HEADER,
					    T0.START_TIME,
					    T0.END_TIME           
                      FROM :plan_data_from_cv T0;
                     -- INNER JOIN  :TU_IDS ON 
                      --EQUIP_TYPE_ID = RESOURCE_TYPE AND
                    --  ADD_DAYS (T0.END_TIME, :DATE_OFFSET) >=  PRE_DATE AND
                     -- ADD_DAYS(T0.START_TIME, :DATE_OFFSET)< PRE_DATE 
                    --  where EQUIP_TYPE_ID in (select distinct resource_type from :tu_ids);--with hint(NO_RANGE_JOIN);                                       
        END IF;
    ELSE 
   
        call "SAP_TM_TRP"."sap.tm.trp.db.pickupreturn::p_get_plan_data_by_sd_planid"(:V_SD_PLAN_ID,:V_RESOURCE_TYPE,:V_ALL_RESULTS_WITHOUT_X,V_SD_LF_ID, V_SD_EF_ID, V_EXECUTION_ID, V_NODE_ID,PURE_VSD,SD_EXECUTIION_RESULT);
         /*                  
  -- only sd values in the future time ranges are passed to solver
  -- The provisional stock of the first time interval after cutoff need to add into the sd values 
  -- The activities fall in the past time range have become expired, no more effect the sd values
  -- so we can do cutoff here and add the provisional stock of plan execution restuls 
  */
        
        SELECT MIN(TIME_INTERVAL_ID) INTO V_MIN_INTERVAL_ID FROM :PURE_VSD;

        
        INITIAL_STOCK = SELECT
        	                 T0.LOCATION_ID,
    					     T0.LOCATION_NAME,
    					     T0.EQUIP_TYPE_ID AS RESOURCE_TYPE,
    					     T0.TIME_INTERVAL_ID,
    					     T0.STOCK AS INIT_STOCK
    					  FROM :PURE_VSD T0
    					 WHERE TIME_INTERVAL_ID = V_MIN_INTERVAL_ID AND
    					       STOCK > 0;

    	PRE_TIMEINTERVAL_SD = SELECT T0.LOCATION_ID,
    					   T0.LOCATION_NAME,
    					   T0.EQUIP_TYPE_ID,      
    					   T0.TIME_INTERVAL_ID+1 AS TIME_INTERVAL_ID,
    					   T0.START_TIME,
    					   T0.END_TIME,
    					   T0.SUPPLY,
    					   T0.DEMAND,
    					   T0.BALANCE_SUPPLY_DEMAND
    				FROM   :PURE_VSD T0
    			    WHERE  TIME_INTERVAL_ID > :V_MIN_INTERVAL_ID;
    	
        SELECT MIN(TIME_INTERVAL_ID) INTO MIN_TIME_INTERVAL
        FROM :PURE_VSD;
  
        SELECT IFNULL(MAX(TIME_INTERVAL_ID),:MIN_TIME_INTERVAL - 1) INTO MAX_INTERVAL_BEFORE_CUTOFF FROM
          (SELECT *, ADD_SECONDS(START_TIME, SECONDS_BETWEEN(START_TIME,END_TIME)/2) AS MIDDLE_TIME
           FROM :PURE_VSD
          ) WHERE MIDDLE_TIME <= CURRENT_UTCTIMESTAMP;
          
          
    	IF V_MIN_INTERVAL_ID > MAX_INTERVAL_BEFORE_CUTOFF THEN  --Execution date is same date for run automatic optimization date
        	PURE_SD =   SELECT T0.LOCATION_ID,
        					   T0.LOCATION_NAME,
        					   T0.EQUIP_TYPE_ID,      
        					   T0.TIME_INTERVAL_ID,
        					   T0.START_TIME,
        					   T0.END_TIME,
        					   CASE WHEN  T0.TIME_INTERVAL_ID =:V_MIN_INTERVAL_ID THEN IFNULL(T0.SUPPLY-T0.STOCK,T0.SUPPLY) 
        					        WHEN  T0.DEMAND = -T2.BALANCE_SUPPLY_DEMAND THEN IFNULL(T0.SUPPLY,0)
        					        WHEN  (T0.SUPPLY = T2.BALANCE_SUPPLY_DEMAND OR T0.SUPPLY = 0) THEN 0
        					        WHEN  (T0.SUPPLY <> T2.BALANCE_SUPPLY_DEMAND AND T0.DEMAND <> -T2.BALANCE_SUPPLY_DEMAND) THEN T0.SUPPLY - IFNULL(T2.BALANCE_SUPPLY_DEMAND,0)
        					        ELSE  0
        					        --ELSE IF T0.SUPPLY -T2.--IFNULL(T0.SUPPLY-T0.DEMAND-T0.BALANCE_SUPPLY_DEMAND,T0.SUPPLY)
        					   END AS SUPPLY,
        					   CASE WHEN  T0.TIME_INTERVAL_ID =:V_MIN_INTERVAL_ID THEN IFNULL(T0.DEMAND,0)
        					        WHEN  T0.SUPPLY = T2.BALANCE_SUPPLY_DEMAND THEN IFNULL(T0.DEMAND,0)
        					        WHEN  (T0.DEMAND = -T2.BALANCE_SUPPLY_DEMAND OR T0.DEMAND = 0) THEN 0
        					        WHEN  (T0.SUPPLY <> T2.BALANCE_SUPPLY_DEMAND AND T0.DEMAND <> -T2.BALANCE_SUPPLY_DEMAND) THEN T0.DEMAND + IFNULL(T2.BALANCE_SUPPLY_DEMAND,0)
        					        --ELSE  T0.DEMAND+T0.BALANCE_SUPPLY_DEMAND-T0.SUPPLY
        					        ELSE  0
        					   END AS DEMAND
        				FROM   :PURE_VSD T0
        			--	LEFT JOIN :INITIAL_STOCK T1	ON  T0.LOCATION_ID      = T1.LOCATION_ID
                    --                		    	AND T0.EQUIP_TYPE_ID    = T1.RESOURCE_TYPE
                    --                				AND T0.TIME_INTERVAL_ID =:V_MIN_INTERVAL_ID
                        LEFT JOIN :PRE_TIMEINTERVAL_SD T2 ON   T0.LOCATION_ID      = T2.LOCATION_ID
                                    		    	AND T0.EQUIP_TYPE_ID    = T2.EQUIP_TYPE_ID
                                    				AND T0.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID;
                                    				
    	ELSE        --Execution date is before run automatic optimiation date
        	PURE_SD =   SELECT T0.LOCATION_ID,
        					   T0.LOCATION_NAME,
        					   T0.EQUIP_TYPE_ID,      
        					   T0.TIME_INTERVAL_ID,
        					   T0.START_TIME,
        					   T0.END_TIME,
        					   CASE WHEN  T0.TIME_INTERVAL_ID =:MAX_INTERVAL_BEFORE_CUTOFF+1 THEN IFNULL(T0.SUPPLY-T1.INIT_STOCK,T0.SUPPLY) 
        					        WHEN  T0.DEMAND = -T2.BALANCE_SUPPLY_DEMAND THEN IFNULL(T0.SUPPLY,0)
        					        WHEN  (T0.SUPPLY = T2.BALANCE_SUPPLY_DEMAND OR T0.SUPPLY = 0) THEN 0
        					        WHEN  (T0.SUPPLY <> T2.BALANCE_SUPPLY_DEMAND AND T0.DEMAND <> -T2.BALANCE_SUPPLY_DEMAND) THEN T0.SUPPLY - IFNULL(T2.BALANCE_SUPPLY_DEMAND,0)
        					        ELSE  0
        					        --ELSE IF T0.SUPPLY -T2.--IFNULL(T0.SUPPLY-T0.DEMAND-T0.BALANCE_SUPPLY_DEMAND,T0.SUPPLY)
        					   END AS SUPPLY,
        					   CASE --WHEN  T0.TIME_INTERVAL_ID =:MAX_INTERVAL_BEFORE_CUTOFF+1 THEN IFNULL(T0.DEMAND,0)
        					        WHEN  T0.SUPPLY = T2.BALANCE_SUPPLY_DEMAND THEN IFNULL(T0.DEMAND,0)
        					        WHEN  (T0.DEMAND = -T2.BALANCE_SUPPLY_DEMAND OR T0.DEMAND = 0) THEN 0
        					        WHEN  (T0.SUPPLY <> T2.BALANCE_SUPPLY_DEMAND AND T0.DEMAND <> -T2.BALANCE_SUPPLY_DEMAND) THEN T0.DEMAND + IFNULL(T2.BALANCE_SUPPLY_DEMAND,0)
        					        --ELSE  T0.DEMAND+T0.BALANCE_SUPPLY_DEMAND-T0.SUPPLY
        					        ELSE  0
        					   END AS DEMAND
        				FROM   :PURE_VSD T0 
        				LEFT JOIN :INITIAL_STOCK T1	ON  T0.LOCATION_ID      = T1.LOCATION_ID
                                    		    	AND T0.EQUIP_TYPE_ID    = T1.RESOURCE_TYPE
                                    			--	AND T0.TIME_INTERVAL_ID =:V_MIN_INTERVAL_ID
                        LEFT JOIN :PRE_TIMEINTERVAL_SD T2 ON   T0.LOCATION_ID      = T2.LOCATION_ID
                                    		    	AND T0.EQUIP_TYPE_ID    = T2.EQUIP_TYPE_ID
                                    				AND T0.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID
                        WHERE T0.TIME_INTERVAL_ID >= :MAX_INTERVAL_BEFORE_CUTOFF + 1;    		
    	END IF;
        
        loc_equip = SELECT DISTINCT EQUIP_TYPE_ID AS RESOURCE_TYPE, EQUIP_TYPE_NAME AS RESOURCE_TYPE_NAME,
                  LOCATION_ID, LOCATION_NAME FROM :PURE_VSD;
                  
    	t_current_stock = SELECT LOCATION_NAME AS LOCATION,EQUIP_TYPE_ID AS RESOURCE_TYPE, START_TIME, END_TIME, SUPPLY, DEMAND, 0 AS STOCK
                        FROM :PURE_VSD;
                  
        IF :V_OP_SETTING_TYPE = 1 OR :V_OP_SETTING_TYPE = 3  THEN    
        PLAN_DATA  = SELECT 
                        V_EXECUTION_ID AS PLAN_EXECUTION_ID,
                        V_NODE_ID AS NODE_ID,
                        T0.EQUIP_TYPE_ID,
                        T0.EQUIP_TYPE_NAME,
                        T0.LOCATION_ID,
                        T0.LOCATION_NAME,
                        T0.SUPPLY, 
                        T0.DEMAND,
                        T0.BALANCE_SUPPLY_DEMAND,
                        T0.BALANCE_STOCK_SUPPLY_DEMAND,
                        IFNULL (T0.MIN_SAFETY_STOCK,0) AS MIN_SAFETY_STOCK,
                        T0.MAX_SAFETY_STOCK,
                        T0.MAX_CAPACITY,
                        T0.MIN_SAFETY_STOCK_HEADER,
                        T0.MAX_SAFETY_STOCK_HEADER,
                        T0.MAX_CAPACITY_HEADER,
                        T0.STOCK_BALANCE_HEADER,
					    T0.START_TIME,
					    T0.END_TIME           
                      FROM :PURE_VSD T0;
                     -- INNER JOIN  :TU_IDS ON 
                      --EQUIP_TYPE_ID = RESOURCE_TYPE AND
                    --  ADD_DAYS (T0.END_TIME, :DATE_OFFSET) >=  PRE_DATE AND
                     -- ADD_DAYS(T0.START_TIME, :DATE_OFFSET)< PRE_DATE with hint(NO_RANGE_JOIN)
                   --  where EQUIP_TYPE_ID in (select distinct resource_type from :tu_ids);  
        END IF;
    END IF;
    
    --check stock flag
    SELECT COUNT(1) 
    INTO TMP_PROV_STOCK_NODE_FLAG
    FROM "sap.tm.trp.db.pipeline::t_plan_model" AS A
    INNER JOIN "sap.tm.trp.db.pipeline::v_pipeline_node" B
            ON (A.PIPELINE_MODEL_ID = B.PIPELINE_MODEL_ID AND 
                UPPER (B.NAME) LIKE '%PROVISIONAL_STOCK%')
    WHERE B.RESULT_VISIBLE = 1 AND 
          A.ID = :V_SD_PLAN_ID;

    SELECT ADD_DAYS(CURRENT_UTCTIMESTAMP, :DATE_OFFSET), ADD_DAYS(CURRENT_UTCTIMESTAMP, :DATE_OFFSET - 180)
    INTO END_TIME, START_TIME FROM DUMMY;
    -- Get average stay days
    /*loc_equip = SELECT DISTINCT EQUIP_TYPE_ID AS RESOURCE_TYPE, EQUIP_TYPE_NAME AS RESOURCE_TYPE_NAME,
                  LOCATION_ID, LOCATION_NAME FROM :PLAN_DATA;*/
                  
     CALL "sap.tm.trp.db.pickupreturn::p_get_average_stay_day"(
               :loc_equip,
               :START_TIME,
               :END_TIME,
               :RESOURCE_CATEGORY,
               t_average_stay_days
    );
	
    -- storage cost
/*	t_current_stock = SELECT LOCATION_NAME AS LOCATION,EQUIP_TYPE_ID AS RESOURCE_TYPE, START_TIME, END_TIME, SUPPLY, DEMAND, 0 AS STOCK
    FROM :PLAN_DATA;*/
    STORAGE_TIME = SELECT LOCATION, RESOURCE_TYPE, :START_TIME AS START_TIME, ADD_SECONDS(:START_TIME, AVERAGE_STAY_DAYS*24*3600) AS END_TIME, 1 AS QUANTITY FROM :t_average_stay_days;
    
    	   CALL "sap.tm.trp.db.costmodel.storagecost::p_get_cost_for_pr_new"
     (:V_SD_PLAN_ID,:RESOURCE_CATEGORY,:MANDATORY_COST_MODEL_ID,:RESOURCE_TYPES_CODE_TEU_COUNT,:STORAGE_TIME,:t_current_stock,t_storage_cost);
    	
    --HANDLING COST
    t_handling_cost  = SELECT DISTINCT LOCATION,
                                       RESOURCE_TYPE,
                                       AVG(COST) AS COST
                       FROM :HANDLING_COST
                       GROUP BY LOCATION,
                                RESOURCE_TYPE;

					   
	SELECT MAX(COST) INTO V_MAX_COST FROM :CALCULATED_TRANSPORT_COST;			   
    --TRANSPORTATION COST
    t_transportation_cost = SELECT DISTINCT  T1.FROM_LOCATION,
            							     T1.TO_LOCATION,
            							     T2.RESOURCE_TYPE,
            							     T1.MTR,
            							     T2.DURATION,
            							     IFNULL (T1.COST,:V_MAX_COST) AS COST
						   FROM :CALCULATED_TRANSPORT_COST T1
						   INNER JOIN :LOCATION_BASED_COST T2 ON  (T1.FROM_LOCATION   = T2.FROM_LOCATION 
					       AND T1.TO_LOCATION = T2.TO_LOCATION
					       AND T1.MTR = T2.MTR);
					       
		lt_transportation_cost = 
        SELECT 
            FROM_LOCATION,
            TO_LOCATION,
            RESOURCE_TYPE,
            MTR,
            MIN(COST) AS COST
        FROM :t_transportation_cost
		GROUP BY FROM_LOCATION, TO_LOCATION, RESOURCE_TYPE, MTR;

    TU_TBL  = SELECT DISTINCT 
                     TRANSPORTATION_ID AS TU_ID,
                     TU_TYPE_CODE AS TU_TYPE,
                     RESOURCE_TYPE,
                     ITE_KEY,
                     SHIPPER_ID,
                     SHIPPER,
                     CONSIGNEE_ID,
                     CONSIGNEE,
                     CASE WHEN :V_RULE_TYPE=1 THEN IFNULL (ORIGINAL_PICKUP_LOCATION_ID,POL)
                          WHEN :V_RULE_TYPE=2 THEN IFNULL (ORIGINAL_RETURN_LOCATION_ID,POD) 
                     END AS CUR_LOCATION_ID,
                     QUANTITY,
                     CASE WHEN :V_RULE_TYPE=1 THEN IFNULL(ORIGINAL_PICKUP_DATE,NULL)
                          WHEN :V_RULE_TYPE=2 THEN IFNULL (ORIGINAL_RETURN_DATE,NULL) 
                     END AS CUR_DATE,
                     CASE WHEN :V_RULE_TYPE=1 THEN IFNULL(PICKUP_DATE,NULL)
                          WHEN :V_RULE_TYPE=2 THEN IFNULL (RETURN_DATE,NULL) 
                     END AS PRE_DATE,
                     CASE WHEN DESTINATION_LOCATION_ID  = '' THEN POL
                          ELSE DESTINATION_LOCATION_ID 
                     END AS SHIPPER_LOCATION_ID,
                     CASE WHEN DESTINATION_LOCATION     = '' THEN POL_NAME
                          ELSE DESTINATION_LOCATION 
                     END AS SHIPPER_LOCATION,
                     CASE WHEN SOURCE_LOCATION_ID       = '' THEN POD
                          ELSE SOURCE_LOCATION_ID 
                     END AS CONSIGNEE_LOCATION_ID,
                     CASE WHEN SOURCE_LOCATION          = '' THEN POD_NAME
                          ELSE SOURCE_LOCATION 
                     END AS CONSIGNEE_LOCATION,
                     CUSTOMER_NAME,
                     BOOKING_DATE,
                     FLAG,
                     RELEVANT_PLANNING,
                     POL,
                     POL_NAME,
                     POD,
                     POD_NAME,
                     EXECUTION_STATUS_CODE AS STATUS,
                     LIFECYCLE_CODE AS LIFECYCLE_STATUS
              FROM  :TU_INFO
              WHERE (FLAG <> 2 OR FLAG IS NULL) 
                    AND RESOURCE_TYPE  in (select distinct RESOURCE_TYPE from :loc_equip );
    
    --Solver parameters preparation
    t_supply_demand_p = SELECT DISTINCT t1.START_TIME,
                                        t1.END_TIME,
                                        t1.LOCATION_NAME AS LOCATION,  --LOC.NAME         AS LOCATION,
                                        t1.LOCATION_ID,
                                        t1.EQUIP_TYPE_ID AS CONTAINER_TYPE,
                                        t1.SUPPLY,
                                        t1.DEMAND
                        FROM :PURE_SD t1;
                        /*Commented by Zhengning as location name already existed in PURE_SD
                        INNER JOIN "sap.tm.trp.db.semantic.location::v_location" AS LOC
                                ON LOC.ID = T1.LOCATION_ID;
                        */
                        --WHERE END_TIME > CURRENT_UTCTIMESTAMP;
    
      -- prepare transportation cost, handling cost, AND storage cost
    t_transportation_cost_p = SELECT DISTINCT  T1.FROM_LOCATION,
                                               T1.TO_LOCATION,
                                               T1.MTR,
                                               T1.DURATION,
                                               T1.COST,
                                               T1.RESOURCE_TYPE AS CONTAINER_TYPE
                                FROM :t_transportation_cost T1;
    
      --Stock configuration
    t_stock_configuration_p = SELECT DISTINCT 
                                       T1.LOCATION_NAME AS LOCATION,--LOC.NAME AS LOCATION,
                                       T1.RESOURCE_TYPE AS CONTAINER_TYPE,
                                       IFNULL (T1.INIT_STOCK,0) AS CURRENT_STOCK,
                                       IFNULL (T2.MIN_SAFETY_STOCK,:MIN_SAFETY_DEFAULT) AS MIN_STOCK,
                                       IFNULL (T2.MAX_SAFETY_STOCK,:MAX_SAFETY_DEFAULT) AS MAX_STOCK,
                                       IFNULL (T2.MAX_PHYSICAL_STOCK,:MAX_CAPACITY_DEFAULT) AS MAX_PHY_CAPACITY
                                FROM :INITIAL_STOCK T1
                                /*Commented by Zhengning as LOCATION NAME already existed in INITIAL_STOCK
                                INNER JOIN "sap.tm.trp.db.semantic.location::v_location" AS LOC
                                ON LOC.ID = T1.LOCATION_ID
                                */
                                INNER JOIN "sap.tm.trp.db.stock::v_location_stock_location" T2
                                ON (T1.LOCATION_ID = T2.ID AND T1.RESOURCE_TYPE = T2.RESOURCE_ID);
    
      --locations' storage cost and handling cost
    t_location_cost_p = SELECT DISTINCT  
                                    LOCATION,
                                    RESOURCE_TYPE AS CONTAINER_TYPE,
                                    0             AS STORAGE_COSTUNIT,
                                    COST          AS HANDLING_COSTUNIT
                          FROM :t_handling_cost;
    
      --Some out parameters
    t_parameters = SELECT TOP 0 '' AS NAME,
                                '' AS VALUE
                     FROM :t_transportation_cost;
    
    
    	  --Pickup used provisioning location and resource
    --  TMP_PROV_STOCK_NODE_FLAG = 1;  --comment as it's just temparory setting
    IF :TMP_PROV_STOCK_NODE_FLAG > 0 THEN
        t_pro_loc_res = SELECT DISTINCT LOCATION, --LOC.NAME AS LOCATION,
                                        T0.RESOURCE_TYPE      AS CONTAINER_TYPE,
                                        (T0.SUPPLY-T0.DEMAND) AS MIN_PROVISION_STOCK
                       -- FROM :PLAN_DATA T0;  --:plan_data_from_cv T0;
                       FROM :t_current_stock T0; 
                        /*Commented by Zhengning as LOCATION NAME already return from cv_get_all_plan_data_with_alert
                        INNER JOIN "sap.tm.trp.db.semantic.location::v_location" AS LOC --
                                ON LOC.ID = T0.LOCATION_ID;
                        */
                        --WHERE T1.END_TIME > CURRENT_UTCTIMESTAMP; will add after test
    ELSE
        t_pro_loc_res = SELECT TOP 0 '' AS LOCATION,
                                     '' AS CONTAINER_TYPE,
                                     0 AS MIN_PROVISION_STOCK
                        FROM :t_transportation_cost;
    END IF ;
      --Patch8 new functionality to consider handling capacity
      
      	  CALL "sap.tm.trp.db.planningcockpit::p_get_network_setting_handling_capacity_value" ( 
	      :V_NETWORK_SETTING_GROUP_ID,
	      :V_SD_PLAN_ID,
	      HANDLING_CAPA
	  );
	  
	 IF (HANDLING_CAPA = 1 ) THEN  --ONLY Days time interval consider the handling capacity
  
    --Get the timezone id of the location filter of SD Plan 
	SELECT T3.TIMEZONE_ID INTO V_TIME_ZONE_ID 
		FROM "sap.tm.trp.db.pipeline::t_plan_model" T1 
		INNER JOIN "sap.tm.trp.db.filter::t_filter_group" T2 ON T2.ID = T1.FILTER_GROUP_ID
		INNER JOIN "sap.tm.trp.db.filter::t_time_filter" T3 ON T2.TIME_FILTER_ID = T3.ID
		WHERE T1.ID = :V_SD_PLAN_ID; 
		   
    CALL "sap.tm.trp.db.pickupreturn::p_origin_sd_stock_cutoff_pure_transportation_v2"
    (
        :SD_EXECUTIION_RESULT,
        :V_EXECUTION_ID,
        :V_NETWORK_SETTING_GROUP_ID,
        :PURE_SD,
        LT_PURE_SD
    ); 

    CALL "sap.tm.trp.db.planningcockpit::p_get_location_handling_capacity" (
      :LT_PURE_SD,
      :V_TIME_ZONE_ID,
      :RESOURCE_CATEGORY,
      T_HANDLING_CAPACITY
    );

    ELSE   --to do: check if works fine
     T_HANDLING_CAPACITY = SELECT NULL AS LOCATION_ID,
                                 NULL AS LOCATION_NAME,
                                 NULL AS TIME_INTERVAL_ID,
                                 NULL AS START_TIME,
                                 NULL AS END_TIME,
                                 NULL AS SUPPLY,
                                 NULL AS DEMAND,
                                 NULL AS HANDLING_CAPACITY
                            FROM DUMMY;  
	  END IF; 
	  
	  
----------------------current_stock begin---------------------------
    -- Location filter
    filtered_locations = SELECT LOCATION_ID AS GEO_ID, LOCATION_ID, 1 AS TYPE, LOCATION_ID AS GEO_GROUP_ID 
                         FROM "sap.tm.trp.db.filter::t_location_filter_location" 
                         WHERE LOCATION_FILTER_ID = :V_SD_LF_ID;       
    
    filtered_equip = SELECT EQUIP_CODE AS EQUIP_CODE, EQUIP_CODE AS EQUIP_GROUP_ID,RESOURCE_CATEGORY,
                    EQUIP_GROUP_ID EQUIPMENT_GROUP_ID, EQUIP_FILTER_ID EQUIPMENT_FILTER_ID 
                    FROM "sap.tm.trp.db.booking::cv_auth_equip_code_by_equip_filter_id"
					(PLACEHOLDER."$$IV_EQUIPMENT_FILTER_ID$$"=> :V_SD_EF_ID);
    filtered_equiptypes = 
      SELECT * FROM (SELECT EQUIP_CODE AS EQUIP_CODE, EQUIP_CODE AS EQUIP_GROUP_ID,RESOURCE_CATEGORY
                     FROM --"sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T1
                     :filtered_equip
                     WHERE  EQUIP_CODE IS NOT NULL)
                    UNION 
                    (SELECT a.EQUIP_CODE AS EQUIP_CODE, a.EQUIPMENT_GROUP_ID AS EQUIP_GROUP_ID, a.RESOURCE_CATEGORY
                    --  FROM "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" a 
                     from :filtered_equip a
                     INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" b 
                     ON (a.EQUIPMENT_GROUP_ID = b.EQUIPMENT_GROUP_ID AND B.RESOURCE_CATEGORY = A.RESOURCE_CATEGORY) 
                     WHERE a.EQUIPMENT_FILTER_ID = :V_SD_EF_ID and a.EQUIPMENT_GROUP_ID IS NOT NULL); 
        
    resource_out = 
       SELECT T1.RESOURCE_ID AS RESID,D.GEO_GROUP_ID,E.EQUIP_GROUP_ID 
       FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T1
       INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t6 ON (t1.RESOURCE_CATEGORY = t6.MAPPING_CODE)
       INNER JOIN :filtered_equiptypes AS E ON (E.EQUIP_CODE = T1.RESOURCE_TYPE AND E.RESOURCE_CATEGORY = T6.CODE)
       INNER JOIN :filtered_locations AS D ON (D.LOCATION_ID = T1.LOCATION_ID);

/*
Calculate stock group by location, equipment type and status
*/
    stock_out = SELECT GEO_GROUP_ID,
                       EQUIP_GROUP_ID,
                       COUNT(1) AS OUTPUT_VALUE
                FROM :resource_out
                 GROUP BY GEO_GROUP_ID,EQUIP_GROUP_ID;
/*
Loaction and equipment group
*/
    car_out =  SELECT DISTINCT A.GEO_GROUP_ID,B.EQUIP_GROUP_ID
               FROM :filtered_locations A, :filtered_equiptypes B;
/*
Output stock by location and equipment
*/
    pre_out = SELECT A.GEO_GROUP_ID AS LOCATION_ID, 
                     A.EQUIP_GROUP_ID AS RESOURCE_TYPE,
                     IFNULL(B.OUTPUT_VALUE,0) AS CURRENT_STOCK
              FROM :car_out A 
              LEFT OUTER JOIN :stock_out B ON 
              (A.GEO_GROUP_ID = B.GEO_GROUP_ID and A.EQUIP_GROUP_ID = B.EQUIP_GROUP_ID);
              
    lt_current_stock = SELECT A.LOCATION_ID, 
                     A.RESOURCE_TYPE,
                     A.CURRENT_STOCK,
                     C.UNIT_CODE AS UNIT
              FROM :pre_out A, "sap.tm.trp.db.systemmanagement::v_unit" C;
       
    -----------------------------------------------------initialization----------------------------------------------       
        	     
    ER_LDR_RES_TEMP = SELECT * from "SAP_TM_TRP"."sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::t_trp_hrf_ER_LDR_output_base"
    where 1=2;
    -----------------------------------------------------looping configuration--------------------------------------------------------    
    SELECT COUNT(DISTINCT TU_ID) INTO lv_tu_count FROM :TU_TBL;
    SELECT COUNT(DISTINCT LOCATION_NAME) INTO lv_loc_count FROM :loc_equip;
    
    loc_tu_data =  SELECT 
					   :lv_loc_count AS LOC_COUNT ,
					   :lv_tu_count AS TU_COUNT, 
					   :lv_loc_count*:lv_tu_count LOC_TU_MULTIPLE 
					   FROM DUMMY;
			                    
	-----------------------------------------------------Fetch Data Packet Size from configuration table-----------------------------
    SELECT value INTO lv_tu_batch_max_process_record
    	    FROM "sap.tm.trp.db.systemmanagement.customization::t_general_parameters"
            WHERE NAME =  'OPTIMIZE_TU_BATCH_MAX_PROCESS_RECORDS';
            
    SELECT value INTO lv_tu_batch_max_tu_count
    	    FROM "sap.tm.trp.db.systemmanagement.customization::t_general_parameters"
            WHERE NAME =  'OPTIMIZE_TU_BATCH_MAX_TU_COUNT';
            
    SELECT count(*) INTO lv_tu_batch_max_process_record_cnt
    	    FROM "sap.tm.trp.db.systemmanagement.customization::t_general_parameters"
            WHERE NAME =  'OPTIMIZE_TU_BATCH_MAX_PROCESS_RECORDS';
            
    SELECT count(*) INTO lv_tu_batch_max_tu_count_cnt
    	    FROM "sap.tm.trp.db.systemmanagement.customization::t_general_parameters"
            WHERE NAME =  'OPTIMIZE_TU_BATCH_MAX_TU_COUNT';
    
    if(:lv_tu_batch_max_process_record_cnt > 0 ) then
    	if (:lv_tu_batch_max_process_record='auto') then
    		lv_data_packet_size = :lv_default_data_packet_size;
    	else
    		if(:lv_tu_batch_max_process_record>=:lv_max_data_packet_size) then
        		lv_data_packet_size = :lv_default_data_packet_size;
    	    elseif (:lv_tu_batch_max_process_record<=:lv_min_data_packet_size) then
        		lv_data_packet_size = :lv_default_data_packet_size;
    	    else
        		lv_data_packet_size = :lv_tu_batch_max_process_record;
    	    end if;
    	end if;
    end if;
    
    configuration_with_ldr=SELECT *,CEIL(TU_COUNT/NO_OF_BATCHES) AS NO_OF_TUS_PER_BATCH from (
    select *,CEIL(LOC_TU_MULTIPLE/:lv_data_packet_size) NO_OF_BATCHES from :loc_tu_data);
         
        if(:lv_tu_count > :lv_tu_batch_max_tu_count) then 
            if(:lv_tu_batch_max_tu_count*:lv_loc_count < :lv_data_packet_size) then 
         		configuration_with_ldr=select *, :lv_tu_batch_max_tu_count as NO_OF_TUS_PER_BATCH from (
         		select *, ceil(tu_count/:lv_tu_batch_max_tu_count) as NO_OF_BATCHES from :loc_tu_data)
         		where tu_count > :lv_tu_batch_max_tu_count ;
         	end if;
         end if; 

    SELECT NO_OF_BATCHES,NO_OF_TUS_PER_BATCH INTO lv_no_of_batches,lv_of_tus_per_batch FROM :configuration_with_ldr ;
		
	 /*-----------------------------------------------------------------------------------------------PICKUP----------------------------------------------------------------------------------------------------------*/
    IF :V_RULE_TYPE =1  THEN

      --Optimized by ldr
      IF :V_OP_SETTING_TYPE = 1 THEN
      
        FOR j IN 1..:lv_no_of_batches DO
				    
				    IF :j=1 then
				        lv_batch_offset = :j-1; 
				    else
				        lv_batch_offset = :lv_of_tus_per_batch+:lv_batch_offset;
				    end if; 
				    
				    RULE_ITR = SELECT * FROM :TU_TBL 
					            ORDER BY TU_ID
							    LIMIT :lv_of_tus_per_batch
								OFFSET :lv_batch_offset;
		
        INSERT INTO "SAP_TM_TRP"."sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::t_booking_ER_LDR_balance_cost_base_inputGlobalTemp"(
                    PR_RULE_ID,
                    TU_ID,
                    EQUIPMENT_ID,
                    EQUIP_TYPE_NAME,
                    QUANTITY,
                    LOCATION_ID,
                    LOCATION_NAME,
                    PLANNED_DATE,
                    TU_TYPE,
                    ITE_KEY,
                    SHIPPER_ID,
                    SHIPPER_NAME,
                    POL,
                    POL_NAME,
                    POD,
                    POD_NAME,
                    CONSIGNEE_ID,
                    CONSIGNEE_NAME,
                    CUSTOMER_NAME,
                    PLANNING_RELEVANT,
                    EXECUTION_STATUS,
                    LIFECYCLE_STATUS,
                    BOOKING_DATE,
                    PLAN_EXECUTION_ID,
                    PLAN_MODEL_ID,
                    NODE_ID,
                    DEPOT_ID,
                    DEPOT_NAME,
                    STOCK,
                    SUPPLY,
                    DEMAND,
                    IMPACTED_SUPPLY,
                    IMPACTED_DEMAND,
                    BALANCE_SUPPLY_DEMAND,
                    BALANCE_STOCK_SUPPLY_DEMAND,
                    MIN_SAFETY_STOCK,
                    MAX_CAPACITY,
                    COST_MODEL_ID,
                    TR_COST,
                    HANDLE_COST,
                    FREE_DAYS,
                    FREE_AMOUNT,
                    STORAGE_COST,
                    MAX_SAFETY_STOCK,
                    MIN_SAFETY_STOCK_HEADER,
                    MAX_SAFETY_STOCK_HEADER,
                    MAX_CAPACITY_HEADER,
                    STOCK_BALANCE_HEADER,
                    HANDLING_CAPACITY,
                    SUPPLY_DEMAND,
                    REMAINING_HANDLING_CAPACITY)
                   SELECT DISTINCT :RULE_ID              AS RULE_ID,
                    T4.TU_ID,
                    T4.RESOURCE_TYPE,
                    T0.EQUIP_TYPE_NAME,
                    T4.QUANTITY ,
                    T4.SHIPPER_LOCATION_ID         AS LOCATION_ID,
                    T4.SHIPPER_LOCATION,
                    T4.PRE_DATE,
                    T4.TU_TYPE,
                    T4.ITE_KEY, -- T5.ITE_KEY,
                    T4.SHIPPER_ID,
                    T4.SHIPPER                     AS SHIPPER_NAME,
                    T4.POL,
                    T4.POL_NAME,
                    T4.POD,
                    T4.POD_NAME,
                    T4.CONSIGNEE_ID,
                    T4.CONSIGNEE                   AS CONSIGNEE_NAME,
                    T4.CUSTOMER_NAME, --T5."CUSTOMER_NAME",
                    T4.RELEVANT_PLANNING,
                    T4.STATUS, --T5."EXECUTION_STATUS",
                    T4.LIFECYCLE_STATUS, --T5."LIFECYCLE_STATUS",
                    T4.BOOKING_DATE, --T5."BOOKING_DATE"
                    :V_EXECUTION_ID                AS EXECUTION_ID,
                    :V_SD_PLAN_ID                  AS SD_PLAN_ID,
                    :V_NODE_ID                     AS NODE_ID,
                    T0.LOCATION_ID,
                    T0.LOCATION_NAME,
                    T5.CURRENT_STOCK    AS stock,-- T5.STOCK,
                    T0.SUPPLY,
                    T0.DEMAND,
                    IFNULL(T6.QUANTITY,0)          AS IMPACTED_DEMAND,
                    IFNULL(T7.QUANTITY,0)          AS IMPACTED_SUPPLY,
                    T0.BALANCE_SUPPLY_DEMAND,
                    T0.BALANCE_STOCK_SUPPLY_DEMAND,
                    IFNULL (T0.MIN_SAFETY_STOCK,0) AS MIN_STOCK,
                    T0.MAX_CAPACITY            AS MAX_CAPACITY,
                    :MANDATORY_COST_MODEL_ID       AS COST_MODEL_ID,
                    T1.COST                        AS TRANSPORTATION_COST,
                    T2.COST                        AS HANDLING_COST,
                    0                              AS FREE_DAYS,
                    0                              AS FREE_AMOUNT,
                    T3.COST                        AS STORAGE_COST,
                    T0.MAX_SAFETY_STOCK,
                    T0.MIN_SAFETY_STOCK_HEADER,
                    T0.MAX_SAFETY_STOCK_HEADER,
                    T0.MAX_CAPACITY_HEADER,
                    T0.STOCK_BALANCE_HEADER,
                    T8.HANDLING_CAPACITY,
                    IFNULL(T8.SUPPLY + T8.DEMAND,0) AS SUPPLY_DEMAND,
                    T8.HANDLING_CAPACITY - T8.SUPPLY - T8.DEMAND AS REMAINING_HANDLING_CAPACITY 
              /*Commented by Zhengning as data already fetech above        
              FROM "sap.tm.trp.db.planningcockpit::cv_get_all_plan_data_with_alert"
                    (placeholder."$$IN_EXECUTION_ID$$"=>:V_EXECUTION_ID) T0
              */
              FROM :PLAN_DATA      T0
        LEFT JOIN  :t_handling_cost        T2 ON T0.LOCATION_NAME=T2.LOCATION      AND 
                                                 T2.RESOURCE_TYPE=T0.EQUIP_TYPE_ID
        LEFT JOIN  :t_storage_cost         T3 ON T0.LOCATION_NAME = T3.LOCATION    AND T0.EQUIP_TYPE_ID = T3.RESOURCE_TYPE
                                                 AND T0.START_TIME = T3.START_TIME AND T0.END_TIME = T3.END_TIME
        INNER JOIN :RULE_ITR                 T4 ON T4.RESOURCE_TYPE = T0.EQUIP_TYPE_ID AND 
                                                 ADD_DAYS (T0.END_TIME, :DATE_OFFSET) >= T4.PRE_DATE AND
                                                 ADD_DAYS(T0.START_TIME, :DATE_OFFSET)< T4.PRE_DATE
		INNER JOIN :lt_transportation_cost  T1 ON T0.LOCATION_NAME=T1.FROM_LOCATION AND 
                                                 T1.RESOURCE_TYPE=T0.EQUIP_TYPE_ID
                                                AND T1.TO_LOCATION=T4.SHIPPER_LOCATION
        LEFT OUTER JOIN  :lt_current_stock T5
               ON  T0.EQUIP_TYPE_ID = T5.RESOURCE_TYPE
              AND  T0.LOCATION_ID   = T5.LOCATION_ID
        LEFT OUTER JOIN (SELECT TOP 1 * FROM :TU_INFO WHERE RULE_ID  = :RULE_ID)  T6
                ON  T0.EQUIP_TYPE_ID       = T6.RESOURCE_TYPE                 AND
                    ADD_DAYS(T0.END_TIME, :DATE_OFFSET)   >= T6.PICKUP_DATE   AND
                    ADD_DAYS(T0.START_TIME, :DATE_OFFSET) <= T6.PICKUP_DATE  -- AND
                    -- T6.RULE_ID             = :RULE_ID
        LEFT OUTER JOIN (SELECT TOP 1 * FROM :TU_INFO WHERE  RULE_ID             = :RULE_ID )  T7
                ON  T0.EQUIP_TYPE_ID       = T7.RESOURCE_TYPE                        AND
                    T0.LOCATION_ID         = T7.PICKUP_LOCATION_ID                   AND
                    ADD_DAYS (T0.START_TIME, :DATE_OFFSET)<= T7.ORIGINAL_PICKUP_DATE AND
                    ADD_DAYS (T0.END_TIME, :DATE_OFFSET)  >=T7.ORIGINAL_PICKUP_DATE  AND
                    T7.FLAG                = 2  --tbc
  	    LEFT OUTER JOIN :T_HANDLING_CAPACITY T8
				ON T0.LOCATION_ID = T8.LOCATION_ID 
				AND T0.START_TIME = T8.START_TIME
				AND T0.END_TIME = T8.END_TIME             
             WHERE   T0.PLAN_EXECUTION_ID   = :V_EXECUTION_ID
               AND   T0.NODE_ID             = :V_NODE_ID
               AND   T4.FLAG                <>2
               AND EQUIP_TYPE_ID in (select distinct resource_type from :tu_ids);-- WITH HINT(NO_RANGE_JOIN);
		
      
        CALL "sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::p_call_ER_LDR_rules"(
              :PICKUPRETURN_MODE,
              :RULE_SP,
              ER_LDR_RES
             );
            
            ER_LDR_RES_TEMP=SELECT * FROM :ER_LDR_RES
                                    UNION ALL 
                                    SELECT * FROM :ER_LDR_RES_TEMP;
            
        END FOR;
        ER_LDR_RESULT = SELECT * FROM :ER_LDR_RES_TEMP;
    
    	  IF :V_SCHEDULE_TIME_TYPE <> 1 THEN
          
            DELETE FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
            WHERE USER = :V_USERNAME
            AND RULE_ID = :RULE_ID;
          END IF ;

		 IF :V_SCHEDULE_TIME_TYPE = 1 THEN
	      
	      INSERT INTO "sap.tm.trp.db.pickupreturn::t_pickupreturn_global_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD, 
			          STREETTURN_TU_ID,
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.DEPOT_ID,T1.PICKUP_LOCATION_ID) ELSE IFNULL (T2.DEPOT_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_CUTOFF_TIME AS DATE,
	             IFNULL (T2.DEPOT_ID,T1.PICKUP_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_PICKUP_LOCATION_ID AS CUR_LOCATION_ID,
	             T1.PICKUP_DATE AS PRE_DATE,
	             T1.ORIGINAL_PICKUP_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE AS OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE AS SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS 
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT TU_ID,RESOURCE_TYPE,LOCATION_ID,DEPOT_ID
                     FROM (SELECT DISTINCT TU_ID,EQUIPMENT_ID AS RESOURCE_TYPE,LOCATION_ID,DEPOT_ID,
                                  ROW_NUMBER()OVER (PARTITION BY TU_ID,EQUIPMENT_ID,LOCATION_ID ORDER BY LOC_RANK) AS RANK
                           FROM (SELECT DISTINCT TU_ID,EQUIPMENT_ID,LOCATION_ID, DEPOT_ID,LOC_RANK   FROM :ER_LDR_RESULT WHERE ER_LDR = 'LDR'))
                     WHERE RANK =  1 ) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE =T2.RESOURCE_TYPE
              AND T1.FLAG<>2);
	      
	      ELSE
	      

	      INSERT INTO "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD, 
			          STREETTURN_TU_ID,
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.DEPOT_ID,T1.PICKUP_LOCATION_ID) ELSE IFNULL (T2.DEPOT_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_CUTOFF_TIME AS DATE,
	             IFNULL(T2.DEPOT_ID,T1.PICKUP_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_PICKUP_LOCATION_ID AS CUR_LOCATION_ID,
	             T1.PICKUP_DATE AS PRE_DATE,
	             T1.ORIGINAL_PICKUP_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE AS OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE AS SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS 
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT TU_ID,RESOURCE_TYPE,LOCATION_ID,DEPOT_ID
                     FROM (SELECT DISTINCT TU_ID,EQUIPMENT_ID AS RESOURCE_TYPE,LOCATION_ID,DEPOT_ID,
                                  ROW_NUMBER()OVER (PARTITION BY TU_ID,EQUIPMENT_ID,LOCATION_ID ORDER BY LOC_RANK) AS RANK
                           FROM (SELECT DISTINCT * FROM :ER_LDR_RESULT WHERE ER_LDR = 'LDR'))
                     WHERE RANK =  1 ) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE =T2.RESOURCE_TYPE
              AND T1.FLAG<>2);
              END IF;
              
          END IF;

      IF :V_OP_SETTING_TYPE = 2 THEN

        t_booking_depot = SELECT DISTINCT TU_ID AS BOOKING_ID,
	                         SHIPPER_LOCATION AS CUSTOMER_LOCATION,
	                         CURRENT_UTCTIMESTAMP AS START_TIME,
	                         ADD_DAYS(TO_TIMESTAMP(PRE_DATE),IFNULL(:shift,0)) AS BOOKING_TIME,
	                         RESOURCE_TYPE AS CONTAINER_TYPE,
	                         QUANTITY,
	                        /* CASE :V_RULE_TYPE WHEN 1 THEN 'PICKUP'
	                                           WHEN 2 THEN 'RETURN' END AS MODE,*/
	                        'PICKUP'AS MODE,
	                         RELEVANT_PLANNING AS HAULAGE_TYPE
	                  FROM :TU_TBL;	 
	     	              
	    --Suggest location get
	    IF :HANDLING_CAPA = 0 THEN
	       
          CALL "sap.tm.trp.db.pickupreturn.algorithm::p_pickup_optimize" (
            :V_OPTIMIZATION_OPTION,
            :HANDLING_CAPA,
            :T_TRANSPORTATION_COST_P,
            :T_PARAMETERS,
            :T_SUPPLY_DEMAND_P,
            :T_BOOKING_DEPOT,
            :T_STOCK_CONFIGURATION_P,
            :T_LOCATION_COST_P,
            :T_PRO_LOC_RES,
            :T_HANDLING_CAPACITY,
            CUR_RESULT
           );
        ELSE
           
           CALL "sap.tm.trp.db.pickupreturn.algorithm::p_pickup_optimize_genios" (
            :V_OPTIMIZATION_OPTION,
            :HANDLING_CAPA,
            :T_TRANSPORTATION_COST_P,
            :T_PARAMETERS,
            :T_SUPPLY_DEMAND_P,
            :T_BOOKING_DEPOT,
            :T_STOCK_CONFIGURATION_P,
            :T_LOCATION_COST_P,
            :T_PRO_LOC_RES,
            :T_HANDLING_CAPACITY,
            CUR_RESULT
           );
		END IF ;
		
			
	    --Location name to location id
	    CUR_RESULT = SELECT T1.BOOKING_ID,
        					T2.ID AS FROM_LOCATION,
        					T1.TO_LOCATION,	
        					T1.FROM_TIME,
        					T1.TO_TIME,
        					T1.CONTAINER_TYPE,
        					T1.QUANTITY,
        					T1.STORAGE_COST,
        					T1.HANDLING_COST,
        					T1.TRANSPORTATION_COST,
        					T1.TOTAL_COST,
        					T1.MODE,
        					T1.HAULAGE_TYPE
		  FROM :CUR_RESULT T1
		  INNER JOIN "sap.tm.trp.db.semantic.location::v_location" T2 ON T2.NAME = T1.FROM_LOCATION;
		
		
          IF :V_SCHEDULE_TIME_TYPE <> 1 THEN
	        DELETE FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
	        WHERE USER = :V_USERNAME
	        AND RULE_ID = :RULE_ID;    
	      END IF ;

		IF :V_SCHEDULE_TIME_TYPE = 1 THEN
	       
	      INSERT INTO "sap.tm.trp.db.pickupreturn::t_pickupreturn_global_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,
			          PLAN_STATUS
			         ) SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID)
	           --    ELSE IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_CUTOFF_TIME AS DATE,
	             IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_PICKUP_LOCATION_ID AS CUR_LOCATION_ID,
	             T1.PICKUP_DATE AS PRE_DATE,
	             T1.ORIGINAL_PICKUP_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE as testr,
	             :V_SCHEDULE_TIME_TYPE as ueye,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE as hdj,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT BOOKING_ID AS TU_ID,CONTAINER_TYPE,FROM_LOCATION AS LOCATION_ID
                     FROM :CUR_RESULT) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.CONTAINER_TYPE
              AND T1.FLAG <> 2);
	      
	      ELSE
	      

	      INSERT INTO "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,
			          PLAN_STATUS)  
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID)
	           --    ELSE IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	              T1.VESSEL_CUTOFF_TIME  AS DATE,
	             IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_PICKUP_LOCATION_ID  AS CUR_LOCATION_ID,
	             T1.PICKUP_DATE AS PRE_DATE,
	             T1.ORIGINAL_PICKUP_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT BOOKING_ID AS TU_ID,CONTAINER_TYPE,FROM_LOCATION AS LOCATION_ID
                     FROM :CUR_RESULT) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.CONTAINER_TYPE
              AND T1.FLAG <> 2);
              END IF;
              
	 END IF;

      IF :V_OP_SETTING_TYPE = 3 THEN
      
      FOR j IN 1..:lv_no_of_batches DO
				    
				    IF :j=1 then
				        lv_batch_offset = :j-1; 
				    else
				        lv_batch_offset = :lv_of_tus_per_batch+:lv_batch_offset;
				    end if; 
				    
				    RULE_ITR = SELECT * FROM :TU_TBL 
					            ORDER BY TU_ID
							    LIMIT :lv_of_tus_per_batch
								OFFSET :lv_batch_offset;
        	
        INSERT INTO "SAP_TM_TRP"."sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::t_booking_ER_LDR_balance_cost_base_inputGlobalTemp"(
                    PR_RULE_ID,
                    TU_ID,
                    EQUIPMENT_ID,
                    EQUIP_TYPE_NAME,
                    QUANTITY,
                    LOCATION_ID,
                    LOCATION_NAME,
                    PLANNED_DATE,
                    TU_TYPE,
                    ITE_KEY,
                    SHIPPER_ID,
                    SHIPPER_NAME,
                    POL,
                    POL_NAME,
                    POD,
                    POD_NAME,
                    CONSIGNEE_ID,
                    CONSIGNEE_NAME,
                    CUSTOMER_NAME,
                    PLANNING_RELEVANT,
                    EXECUTION_STATUS,
                    LIFECYCLE_STATUS,
                    BOOKING_DATE,
                    PLAN_EXECUTION_ID,
                    PLAN_MODEL_ID,
                    NODE_ID,
                    DEPOT_ID,
                    DEPOT_NAME,
                    STOCK,
                    SUPPLY,
                    DEMAND,
                    IMPACTED_SUPPLY,
                    IMPACTED_DEMAND,
                    BALANCE_SUPPLY_DEMAND,
                    BALANCE_STOCK_SUPPLY_DEMAND,
                    MIN_SAFETY_STOCK,
                    MAX_CAPACITY,
                    COST_MODEL_ID,
                    TR_COST,
                    HANDLE_COST,
                    FREE_DAYS,
                    FREE_AMOUNT,
                    STORAGE_COST,
                    MAX_SAFETY_STOCK,
                    MIN_SAFETY_STOCK_HEADER,
                    MAX_SAFETY_STOCK_HEADER,
                    MAX_CAPACITY_HEADER,
                    STOCK_BALANCE_HEADER,
                    HANDLING_CAPACITY,
                    SUPPLY_DEMAND,
                    REMAINING_HANDLING_CAPACITY)
                   SELECT DISTINCT :RULE_ID              AS RULE_ID,
                    T4.TU_ID,
                    T4.RESOURCE_TYPE,
                    T0.EQUIP_TYPE_NAME,
                    T4.QUANTITY ,
                    T4.SHIPPER_LOCATION_ID         AS LOCATION_ID,
                    T4.SHIPPER_LOCATION,
                    T4.PRE_DATE,
                    T4.TU_TYPE,
                    T4.ITE_KEY, -- T5.ITE_KEY,
                    T4.SHIPPER_ID,
                    T4.SHIPPER                     AS SHIPPER_NAME,
                    T4.POL,
                    T4.POL_NAME,
                    T4.POD,
                    T4.POD_NAME,
                    T4.CONSIGNEE_ID,
                    T4.CONSIGNEE                   AS CONSIGNEE_NAME,
                    T4.CUSTOMER_NAME, --T5."CUSTOMER_NAME",
                    T4.RELEVANT_PLANNING,
                    T4.STATUS, --T5."EXECUTION_STATUS",
                    T4.LIFECYCLE_STATUS, --T5."LIFECYCLE_STATUS",
                    T4.BOOKING_DATE, --T5."BOOKING_DATE"
                    :V_EXECUTION_ID                AS EXECUTION_ID,
                    :V_SD_PLAN_ID                  AS SD_PLAN_ID,
                    :V_NODE_ID                     AS NODE_ID,
                    T0.LOCATION_ID,
                    T0.LOCATION_NAME,
                    IFNULL(T5.CURRENT_STOCK, 0)    AS stock,-- T5.STOCK,
                    T0.SUPPLY,
                    T0.DEMAND,
                    IFNULL(T6.QUANTITY,0)          AS IMPACTED_DEMAND,
                    IFNULL(T7.QUANTITY,0)          AS IMPACTED_SUPPLY,
                    T0.BALANCE_SUPPLY_DEMAND,
                    T0.BALANCE_STOCK_SUPPLY_DEMAND,
                    IFNULL (T0.MIN_SAFETY_STOCK,0) AS MIN_STOCK,
                    T0.MAX_CAPACITY            AS MAX_CAPACITY,
                    :MANDATORY_COST_MODEL_ID       AS COST_MODEL_ID,
                    T1.COST                        AS TRANSPORTATION_COST,
                    T2.COST                        AS HANDLING_COST,
                    0                              AS FREE_DAYS,
                    0                              AS FREE_AMOUNT,
                    T3.COST                        AS STORAGE_COST,
                    T0.MAX_SAFETY_STOCK,
                    T0.MIN_SAFETY_STOCK_HEADER,
                    T0.MAX_SAFETY_STOCK_HEADER,
                    T0.MAX_CAPACITY_HEADER,
                    T0.STOCK_BALANCE_HEADER,
                    T8.HANDLING_CAPACITY,
                    IFNULL(T8.SUPPLY + T8.DEMAND,0) AS SUPPLY_DEMAND,
                    T8.HANDLING_CAPACITY - T8.SUPPLY - T8.DEMAND AS REMAINING_HANDLING_CAPACITY 
              /*Commented by Zhengning as data already fetech above        
              FROM "sap.tm.trp.db.planningcockpit::cv_get_all_plan_data_with_alert"
                    (placeholder."$$IN_EXECUTION_ID$$"=>:V_EXECUTION_ID) T0
              */
              FROM :PLAN_DATA      T0
        LEFT JOIN  :t_handling_cost        T2 ON T0.LOCATION_NAME=T2.LOCATION      AND 
                                                 T2.RESOURCE_TYPE=T0.EQUIP_TYPE_ID
        LEFT JOIN  :t_storage_cost         T3 ON T0.LOCATION_NAME = T3.LOCATION    AND T0.EQUIP_TYPE_ID = T3.RESOURCE_TYPE
                                                 AND T0.START_TIME = T3.START_TIME AND T0.END_TIME = T3.END_TIME
        INNER JOIN :RULE_ITR                 T4 ON T4.RESOURCE_TYPE = T0.EQUIP_TYPE_ID AND
                                                 ADD_DAYS (T0.END_TIME, :DATE_OFFSET) >= T4.PRE_DATE AND
                                                 ADD_DAYS(T0.START_TIME, :DATE_OFFSET)< T4.PRE_DATE
		INNER JOIN :t_transportation_cost  T1 ON T0.LOCATION_NAME=T1.FROM_LOCATION AND 
                                                 T1.RESOURCE_TYPE=T0.EQUIP_TYPE_ID
                                                  AND T1.TO_LOCATION=T4.SHIPPER_LOCATION       
        LEFT OUTER JOIN  :lt_current_stock T5
               ON  T0.EQUIP_TYPE_ID = T5.RESOURCE_TYPE
              AND  T0.LOCATION_ID   = T5.LOCATION_ID
        LEFT OUTER JOIN (SELECT TOP 1 * FROM :TU_INFO)  T6
                ON  T0.EQUIP_TYPE_ID       = T6.RESOURCE_TYPE                 AND
               --AND  T0.LOCATION_ID         = T6.PICKUP_LOCATION_ID
                    ADD_DAYS(T0.END_TIME, :DATE_OFFSET)   >= T6.PICKUP_DATE   AND
                    ADD_DAYS(T0.START_TIME, :DATE_OFFSET) <= T6.PICKUP_DATE   AND
                    T6.RULE_ID             = :RULE_ID
               --AND  T6.FLAG                = 2  --tbc
               --AND  (T6.PICKUP_LOCATION_ID IS NOT NULL OR T6.PICKUP_LOCATION_ID <> '')
        LEFT OUTER JOIN (SELECT TOP 1 * FROM :TU_INFO)  T7
                ON  T0.EQUIP_TYPE_ID       = T7.RESOURCE_TYPE                        AND
                    T0.LOCATION_ID         = T7.PICKUP_LOCATION_ID                   AND
                    ADD_DAYS (T0.START_TIME, :DATE_OFFSET)<= T7.ORIGINAL_PICKUP_DATE AND
                    ADD_DAYS (T0.END_TIME, :DATE_OFFSET)  >=T7.ORIGINAL_PICKUP_DATE  AND
                    T7.RULE_ID             = :RULE_ID                                AND
                    T7.FLAG                = 2  --tbc
  	    LEFT OUTER JOIN :T_HANDLING_CAPACITY T8
				ON T0.LOCATION_ID = T8.LOCATION_ID 
				AND T0.START_TIME = T8.START_TIME
				AND T0.END_TIME = T8.END_TIME               
               --AND  (T7.PICKUP_LOCATION_ID IS NOT NULL OR T7.PICKUP_LOCATION_ID <> '')
        --INNER JOIN :TU_INFO AS T10 ON T10.RULE_ID =:RULE_ID AND T10.TRANSPORTATION_ID = T4.TU_ID
             WHERE   T0.PLAN_EXECUTION_ID   = :V_EXECUTION_ID
               AND   T0.NODE_ID             = :V_NODE_ID
               AND   T4.FLAG                <>2 with hint(NO_RANGE_JOIN);
             
        CALL "sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::p_call_ER_LDR_rules"(
              :PICKUPRETURN_MODE,
              :RULE_SP,
              ER_LDR_RES
             );
             
        ER_LDR_RES_TEMP=SELECT * FROM :ER_LDR_RES
                                    UNION ALL 
                                    SELECT * FROM :ER_LDR_RES_TEMP;
            
        END FOR;
        ER_LDR_RESULT = SELECT * FROM :ER_LDR_RES_TEMP;
           
          t_booking_depot = SELECT DISTINCT a.TU_ID AS BOOKING_ID,
                                   c.SHIPPER_LOCATION AS CUSTOMER_LOCATION,
                                   CURRENT_UTCTIMESTAMP AS START_TIME,
                                   TO_TIMESTAMP(c.PRE_DATE) AS BOOKING_TIME,
                                   c.RESOURCE_TYPE AS CONTAINER_TYPE,
                                   c.QUANTITY,
                                   'PICKUP' AS MODE,
                                   C.RELEVANT_PLANNING AS HAULAGE_TYPE
                            FROM :ER_LDR_RESULT a
                            INNER JOIN :TU_TBL c
                            ON c.TU_ID   = a.TU_ID
                            --AND c.CUSTOMER_LOCATION    = a.DEPOT_ID
                            AND c.RESOURCE_TYPE   = a.EQUIPMENT_ID
                            AND c.PRE_DATE   = a.PLANNED_DATE;
	      IF :HANDLING_CAPA = 0 THEN
          CALL "sap.tm.trp.db.pickupreturn.algorithm::p_pickup_optimize" (
            :V_OPTIMIZATION_OPTION,
            :HANDLING_CAPA,
            :T_TRANSPORTATION_COST_P,
            :T_PARAMETERS,
            :T_SUPPLY_DEMAND_P,
            :T_BOOKING_DEPOT,
            :T_STOCK_CONFIGURATION_P,
            :T_LOCATION_COST_P,
            :T_PRO_LOC_RES,
            :T_HANDLING_CAPACITY,
            CUR_RESULT
           );
          ELSE
           	CALL "sap.tm.trp.db.pickupreturn.algorithm::p_pickup_optimize_genios" (
            :V_OPTIMIZATION_OPTION,
            :HANDLING_CAPA,
            :T_TRANSPORTATION_COST_P,
            :T_PARAMETERS,
            :T_SUPPLY_DEMAND_P,
            :T_BOOKING_DEPOT,
            :T_STOCK_CONFIGURATION_P,
            :T_LOCATION_COST_P,
            :T_PRO_LOC_RES,
            :T_HANDLING_CAPACITY,
            CUR_RESULT
           );
		  END IF ;
        --Location name to location id
	    CUR_RESULT = SELECT T1.BOOKING_ID,
					T2.ID AS FROM_LOCATION,
					T1.TO_LOCATION,	
					T1.FROM_TIME,
					T1.TO_TIME,
					T1.CONTAINER_TYPE,
					T1.QUANTITY,
					T1.STORAGE_COST,
					T1.HANDLING_COST,
					T1.TRANSPORTATION_COST,
					T1.TOTAL_COST,
					T1.MODE,
					T1.HAULAGE_TYPE
		  FROM :CUR_RESULT T1
		  INNER JOIN "sap.tm.trp.db.semantic.location::v_location" T2 ON T2.NAME = T1.FROM_LOCATION;
		
          IF :V_SCHEDULE_TIME_TYPE <> 1 THEN
		      DELETE FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
	          WHERE USER = :V_USERNAME
	          AND RULE_ID = :RULE_ID;
          END IF ;

IF :V_SCHEDULE_TIME_TYPE = 1 THEN
		  
		  INSERT INTO "sap.tm.trp.db.pickupreturn::t_pickupreturn_global_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID) ELSE IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_CUTOFF_TIME AS DATE,
	             IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_PICKUP_LOCATION_ID AS CUR_LOCATION_ID,
	             T1.PICKUP_DATE AS PRE_DATE,
	             T1.ORIGINAL_PICKUP_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT BOOKING_ID AS TU_ID,CONTAINER_TYPE,FROM_LOCATION AS LOCATION_ID
                     FROM :CUR_RESULT) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.CONTAINER_TYPE
              AND T1.FLAG <> 2);
		  
		  ELSE
		  


	      INSERT INTO "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID) ELSE IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_CUTOFF_TIME AS DATE,
	             IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_PICKUP_LOCATION_ID AS CUR_LOCATION_ID,
	             T1.PICKUP_DATE AS PRE_DATE,
	             T1.ORIGINAL_PICKUP_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT BOOKING_ID AS TU_ID,CONTAINER_TYPE,FROM_LOCATION AS LOCATION_ID
                     FROM :CUR_RESULT) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.CONTAINER_TYPE
              AND T1.FLAG <> 2);
               END IF;
     END IF;
      
   ELSE
   /*-----------------------------------------------------------------------------------------------RETURN----------------------------------------------------------------------------------------------------------*/
     IF :V_OP_SETTING_TYPE = 1 THEN
     
        FOR j IN 1..:lv_no_of_batches DO
				    
				    IF :j=1 then
				        lv_batch_offset = :j-1; 
				    else
				        lv_batch_offset = :lv_of_tus_per_batch+:lv_batch_offset;
				    end if; 
				    
				    RULE_ITR = SELECT * FROM :TU_TBL 
					            ORDER BY TU_ID
							    LIMIT :lv_of_tus_per_batch
								OFFSET :lv_batch_offset;
                   
       INSERT INTO "SAP_TM_TRP"."sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::t_booking_ER_LDR_balance_cost_base_inputGlobalTemp"(
                    PR_RULE_ID,
                    TU_ID,
                    EQUIPMENT_ID,
                    EQUIP_TYPE_NAME,
                    QUANTITY,
                    LOCATION_ID,
                    LOCATION_NAME,
                    PLANNED_DATE,
                    TU_TYPE,
                    ITE_KEY,
                    SHIPPER_ID,
                    SHIPPER_NAME,
                    POL,
                    POL_NAME,
                    POD,
                    POD_NAME,
                    CONSIGNEE_ID,
                    CONSIGNEE_NAME,
                    CUSTOMER_NAME,
                    PLANNING_RELEVANT,
                    EXECUTION_STATUS,
                    LIFECYCLE_STATUS,
                    BOOKING_DATE,
                    PLAN_EXECUTION_ID,
                    PLAN_MODEL_ID,
                    NODE_ID,
                    DEPOT_ID,
                    DEPOT_NAME,
                    STOCK,
                    SUPPLY,
                    DEMAND,
                    IMPACTED_SUPPLY,
                    IMPACTED_DEMAND,
                    BALANCE_SUPPLY_DEMAND,
                    BALANCE_STOCK_SUPPLY_DEMAND,
                    MIN_SAFETY_STOCK,
                    MAX_CAPACITY,
                    COST_MODEL_ID,
                    TR_COST,
                    HANDLE_COST,
                    FREE_DAYS,
                    FREE_AMOUNT,
                    STORAGE_COST,
                    MAX_SAFETY_STOCK,
                    MIN_SAFETY_STOCK_HEADER,
                    MAX_SAFETY_STOCK_HEADER,
                    MAX_CAPACITY_HEADER,
                    STOCK_BALANCE_HEADER,
                    HANDLING_CAPACITY,
                    SUPPLY_DEMAND,
                    REMAINING_HANDLING_CAPACITY)
                    SELECT DISTINCT :RULE_ID AS RULE_ID,
                    T4.TU_ID,
                    T4.RESOURCE_TYPE,
                    T0.EQUIP_TYPE_NAME,
                    T4.QUANTITY ,
                    T4.CONSIGNEE_LOCATION_ID AS LOCATION_ID,
                    T4.CONSIGNEE_LOCATION,
                    T4.PRE_DATE,
                    T4.TU_TYPE,
                    T4.ITE_KEY, -- T5.ITE_KEY,
                    T4.SHIPPER_ID,
                    T4.SHIPPER AS SHIPPER_NAME,
                    T4.POL,
                    T4.POL_NAME,
                    T4.POD,
                    T4.POD_NAME,
                    T4.CONSIGNEE_ID,
                    T4.CONSIGNEE AS CONSIGNEE_NAME,
                    T4.CUSTOMER_NAME, --T5."CUSTOMER_NAME",
                    T4.RELEVANT_PLANNING,
                    T4.STATUS, --T5."EXECUTION_STATUS",
                    T4.LIFECYCLE_STATUS, --T5."LIFECYCLE_STATUS",
                    T4.BOOKING_DATE, --T5."BOOKING_DATE"
                    :V_EXECUTION_ID AS EXECUTION_ID,
                    :V_SD_PLAN_ID AS SD_PLAN_ID,
                    :V_NODE_ID AS NODE_ID,
                    T0.LOCATION_ID,
                    T0.LOCATION_NAME,
                    T5.CURRENT_STOCK  AS stock,-- T5.STOCK,
                    T0.SUPPLY,
                    T0.DEMAND,
                    IFNULL(T6.QUANTITY,0) AS IMPACTED_DEMAND,
                    IFNULL(T7.QUANTITY,0) AS IMPACTED_SUPPLY,
                    T0.BALANCE_SUPPLY_DEMAND,
                    T0.BALANCE_STOCK_SUPPLY_DEMAND,
                    IFNULL (T0.MIN_SAFETY_STOCK,0) AS MIN_STOCK,
                    T0.MAX_CAPACITY,
                    :MANDATORY_COST_MODEL_ID AS COST_MODEL_ID,
                    T1.COST AS TRANSPORTATION_COST,
                    T2.COST AS HANDLING_COST,
                    0 AS FREE_DAYS,
                    0 AS FREE_AMOUNT,
                    T3.COST AS STORAGE_COST,
                    T0.MAX_SAFETY_STOCK,
                    T0.MIN_SAFETY_STOCK_HEADER,
                    T0.MAX_SAFETY_STOCK_HEADER,
                    T0.MAX_CAPACITY_HEADER,
                    T0.STOCK_BALANCE_HEADER,
                    T8.HANDLING_CAPACITY,
                    IFNULL(T8.SUPPLY + T8.DEMAND,0) AS SUPPLY_DEMAND,
                    T8.HANDLING_CAPACITY - T8.SUPPLY - T8.DEMAND AS REMAINING_HANDLING_CAPACITY                    
              FROM :PLAN_DATA      T0
        LEFT JOIN  :t_handling_cost        T2 ON T0.LOCATION_NAME = T2.LOCATION      AND T2.RESOURCE_TYPE=T0.EQUIP_TYPE_ID
        LEFT JOIN  :t_storage_cost         T3 ON T0.LOCATION_NAME = T3.LOCATION    AND T0.EQUIP_TYPE_ID = T3.RESOURCE_TYPE
                                                 AND T0.START_TIME = T3.START_TIME AND T0.END_TIME = T3.END_TIME
        INNER JOIN :RULE_ITR  T4
                ON T4.RESOURCE_TYPE          = T0.EQUIP_TYPE_ID AND
                                                ADD_DAYS (T0.END_TIME, :DATE_OFFSET) >= T4.PRE_DATE AND
                                                ADD_DAYS(T0.START_TIME, :DATE_OFFSET)< T4.PRE_DATE
        INNER JOIN :t_transportation_cost  T1 ON T0.LOCATION_NAME = T1.TO_LOCATION   
        AND T1.RESOURCE_TYPE=T0.EQUIP_TYPE_ID AND T4.CONSIGNEE_LOCATION=T1.FROM_LOCATION
        LEFT OUTER JOIN  :lt_current_stock T5
                ON  T0.EQUIP_TYPE_ID = T5.RESOURCE_TYPE
               AND  T0.LOCATION_ID   = T5.LOCATION_ID
        LEFT OUTER JOIN  (SELECT TOP 1 * FROM :TU_INFO WHERE  RULE_ID= :RULE_ID)  T6
                ON T0.EQUIP_TYPE_ID       = T6.RESOURCE_TYPE
               --AND T0.LOCATION_ID         = T6.RETURN_LOCATION_ID
               AND ADD_DAYS (T0.START_TIME, :DATE_OFFSET)<= T6.RETURN_DATE
               AND ADD_DAYS (T0.END_TIME, :DATE_OFFSET) >=T6.RETURN_DATE
            --   AND T6.RULE_ID             = :RULE_ID
               --AND T6.FLAG                = 2
        LEFT OUTER JOIN (SELECT TOP 1 * FROM :TU_INFO WHERE   RULE_ID             =:RULE_ID)  T7
                ON T0.EQUIP_TYPE_ID       = T7.RESOURCE_TYPE
               AND ADD_DAYS(T0.START_TIME, :DATE_OFFSET)<= T7.RETURN_DATE
               AND ADD_DAYS(T0.END_TIME, :DATE_OFFSET) >=T7.RETURN_DATE
            --   AND  T7.RULE_ID             =:RULE_ID
  	    LEFT OUTER JOIN :T_HANDLING_CAPACITY T8
				ON T0.LOCATION_ID = T8.LOCATION_ID   
				AND T0.START_TIME = T8.START_TIME
				AND T0.END_TIME = T8.END_TIME                            
             WHERE T0.PLAN_EXECUTION_ID   = :V_EXECUTION_ID
               AND  T0.NODE_ID             = :V_NODE_ID
               AND  T4.FLAG                <>2 with hint(no_range_join);
  
     CALL "sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::p_call_ER_LDR_rules"(
            :PICKUPRETURN_MODE,
            :RULE_SP,
            ER_LDR_RES
           );
           
        ER_LDR_RES_TEMP=SELECT * FROM :ER_LDR_RES
                                    UNION ALL 
                                    SELECT * FROM :ER_LDR_RES_TEMP;
            
        END FOR;
        ER_LDR_RESULT = SELECT * FROM :ER_LDR_RES_TEMP;
             
          IF :V_SCHEDULE_TIME_TYPE <> 1 THEN
	          DELETE FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
	          WHERE USER = :V_USERNAME
	          AND RULE_ID = :RULE_ID;
          END IF ;

IF :V_SCHEDULE_TIME_TYPE = 1 THEN
		  
		  INSERT INTO "sap.tm.trp.db.pickupreturn::t_pickupreturn_global_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.DEPOT_ID,T1.PICKUP_LOCATION_ID) ELSE IFNULL (T2.DEPOT_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_ARRIVAL_DATE AS DATE,
	             IFNULL (T2.DEPOT_ID,T1.RETURN_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_RETURN_LOCATION_ID  AS CUR_LOCATION_ID,
	             T1.RETURN_DATE AS PRE_DATE,
	             T1.ORIGINAL_RETURN_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT TU_ID,RESOURCE_TYPE,LOCATION_ID,DEPOT_ID
                     FROM (SELECT TU_ID,EQUIPMENT_ID AS RESOURCE_TYPE,LOCATION_ID,DEPOT_ID,
                                  ROW_NUMBER()OVER (PARTITION BY TU_ID,EQUIPMENT_ID,LOCATION_ID ORDER BY LOC_RANK) AS RANK,
                                  LOC_RANK
                           FROM (SELECT DISTINCT * FROM :ER_LDR_RESULT WHERE ER_LDR = 'LDR'))
                           WHERE RANK =  1 ) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
              AND T1.FLAG <> 2);
		  
		  ELSE 
		  

	      INSERT INTO "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.DEPOT_ID,T1.PICKUP_LOCATION_ID) ELSE IFNULL (T2.DEPOT_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_ARRIVAL_DATE AS DATE,
	             IFNULL (T2.DEPOT_ID,T1.RETURN_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_RETURN_LOCATION_ID  AS CUR_LOCATION_ID,
	             T1.RETURN_DATE AS PRE_DATE,
	             T1.ORIGINAL_RETURN_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT TU_ID,RESOURCE_TYPE,LOCATION_ID,DEPOT_ID
                     FROM (SELECT TU_ID,EQUIPMENT_ID AS RESOURCE_TYPE,LOCATION_ID,DEPOT_ID,
                                  ROW_NUMBER()OVER (PARTITION BY TU_ID,EQUIPMENT_ID,LOCATION_ID ORDER BY LOC_RANK) AS RANK,
                                  LOC_RANK
                           FROM (SELECT DISTINCT * FROM :ER_LDR_RESULT WHERE ER_LDR = 'LDR'))
                           WHERE RANK =  1 ) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
              AND T1.FLAG <> 2);
              
              END IF;
            
   END IF;
   IF :V_OP_SETTING_TYPE = 2 THEN
     
     t_booking_depot = SELECT DISTINCT TU_ID AS BOOKING_ID,
	                         CONSIGNEE_LOCATION AS CUSTOMER_LOCATION,
	                         CURRENT_UTCTIMESTAMP AS START_TIME,
	                         ADD_DAYS(TO_TIMESTAMP(PRE_DATE),IFNULL(:shift,0)) AS BOOKING_TIME,
	                         RESOURCE_TYPE AS CONTAINER_TYPE,
	                         QUANTITY,
	                         'RETURN' AS MODE,
	                         RELEVANT_PLANNING AS HAULAGE_TYPE
	                     FROM :TU_TBL
	                     WHERE  FLAG<>2;
      
      IF :HANDLING_CAPA = 0 THEN
      CALL "sap.tm.trp.db.pickupreturn.algorithm::p_return" (
            :V_OPTIMIZATION_OPTION,
            :HANDLING_CAPA,
            :T_TRANSPORTATION_COST_P,
            :T_PARAMETERS,
            :T_SUPPLY_DEMAND_P,
            :T_BOOKING_DEPOT,
            :T_STOCK_CONFIGURATION_P,
            :T_LOCATION_COST_P,
            :T_HANDLING_CAPACITY,
            CUR_RESULT
           );
      ELSE
        CALL "sap.tm.trp.db.pickupreturn.algorithm::p_return_genios" (
            :V_OPTIMIZATION_OPTION,
            :HANDLING_CAPA,
            :T_TRANSPORTATION_COST_P,
            :T_PARAMETERS,
            :T_SUPPLY_DEMAND_P,
            :T_BOOKING_DEPOT,
            :T_STOCK_CONFIGURATION_P,
            :T_LOCATION_COST_P,
            :T_HANDLING_CAPACITY,
            CUR_RESULT
           );   
	  END IF ; 
        
      --Location name to location id
	    CUR_RESULT = SELECT T1.BOOKING_ID,
					T1.FROM_LOCATION,
					T2.ID AS TO_LOCATION,	
					T1.FROM_TIME,
					T1.TO_TIME,
					T1.CONTAINER_TYPE,
					T1.QUANTITY,
					T1.STORAGE_COST,
					T1.HANDLING_COST,
					T1.TRANSPORTATION_COST,
					T1.TOTAL_COST,
					T1.MODE,
					T1.HAULAGE_TYPE
		  FROM :CUR_RESULT T1
		  INNER JOIN "sap.tm.trp.db.semantic.location::v_location" T2 ON T2.NAME = T1.TO_LOCATION;
		
          IF :V_SCHEDULE_TIME_TYPE <> 1 THEN
	          DELETE FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
	          WHERE USER = :V_USERNAME
	          AND RULE_ID = :RULE_ID;
          END IF ;
 
IF :V_SCHEDULE_TIME_TYPE = 1 THEN
		  
		  INSERT INTO "sap.tm.trp.db.pickupreturn::t_pickupreturn_global_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,  
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_RETURN_DATE ELSE T1.ORIGINAL_PICKUP_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID)
	           --    ELSE IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.ORIGINAL_PICKUP_DATE AS DATE,
	             IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_RETURN_LOCATION_ID  AS CUR_LOCATION_ID,
	             T1.RETURN_DATE AS PRE_DATE,
	             T1.ORIGINAL_RETURN_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT BOOKING_ID AS TU_ID,CONTAINER_TYPE,TO_LOCATION AS LOCATION_ID
                     FROM :CUR_RESULT) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.CONTAINER_TYPE
              AND T1.FLAG <> 2);
		  
		  ELSE
		  	

	      INSERT INTO "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,  
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_RETURN_DATE ELSE T1.ORIGINAL_PICKUP_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID)
	           --    ELSE IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.ORIGINAL_PICKUP_DATE AS DATE,
	             IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_RETURN_LOCATION_ID  AS CUR_LOCATION_ID,
	             T1.RETURN_DATE AS PRE_DATE,
	             T1.ORIGINAL_RETURN_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT BOOKING_ID AS TU_ID,CONTAINER_TYPE,TO_LOCATION AS LOCATION_ID
                     FROM :CUR_RESULT) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.CONTAINER_TYPE
              AND T1.FLAG <> 2);
              END IF;
               
   END IF;
   IF :V_OP_SETTING_TYPE = 3  THEN --rewrite
        
        FOR j IN 1..:lv_no_of_batches DO
				    
				    IF :j=1 then
				        lv_batch_offset = :j-1; 
				    else
				        lv_batch_offset = :lv_of_tus_per_batch+:lv_batch_offset;
				    end if; 
				    
				    RULE_ITR = SELECT * FROM :TU_TBL 
					            ORDER BY TU_ID
							    LIMIT :lv_of_tus_per_batch
								OFFSET :lv_batch_offset;
								
        INSERT INTO "SAP_TM_TRP"."sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::t_booking_ER_LDR_balance_cost_base_inputGlobalTemp"(
                    PR_RULE_ID,
                    TU_ID,
                    EQUIPMENT_ID,
                    EQUIP_TYPE_NAME,
                    QUANTITY,
                    LOCATION_ID,
                    LOCATION_NAME,
                    PLANNED_DATE,
                    TU_TYPE,
                    ITE_KEY,
                    SHIPPER_ID,
                    SHIPPER_NAME,
                    POL,
                    POL_NAME,
                    POD,
                    POD_NAME,
                    CONSIGNEE_ID,
                    CONSIGNEE_NAME,
                    CUSTOMER_NAME,
                    PLANNING_RELEVANT,
                    EXECUTION_STATUS,
                    LIFECYCLE_STATUS,
                    BOOKING_DATE,
                    PLAN_EXECUTION_ID,
                    PLAN_MODEL_ID,
                    NODE_ID,
                    DEPOT_ID,
                    DEPOT_NAME,
                    STOCK,
                    SUPPLY,
                    DEMAND,
                    IMPACTED_SUPPLY,
                    IMPACTED_DEMAND,
                    BALANCE_SUPPLY_DEMAND,
                    BALANCE_STOCK_SUPPLY_DEMAND,
                    MIN_SAFETY_STOCK,
                    MAX_CAPACITY,
                    COST_MODEL_ID,
                    TR_COST,
                    HANDLE_COST,
                    FREE_DAYS,
                    FREE_AMOUNT,
                    STORAGE_COST,
                    MAX_SAFETY_STOCK,
                    MIN_SAFETY_STOCK_HEADER,
                    MAX_SAFETY_STOCK_HEADER,
                    MAX_CAPACITY_HEADER,
                    STOCK_BALANCE_HEADER,
                    HANDLING_CAPACITY,
                    SUPPLY_DEMAND,
                    REMAINING_HANDLING_CAPACITY)
             SELECT DISTINCT :RULE_ID AS RULE_ID,
                    T4.TU_ID,
                    T4.RESOURCE_TYPE,
                    T0.EQUIP_TYPE_NAME,
                    T4.QUANTITY ,
                    T4.CONSIGNEE_LOCATION_ID AS LOCATION_ID,
                    T4.CONSIGNEE_LOCATION,
                    T4.PRE_DATE,
                    T4.TU_TYPE,
                    T4.ITE_KEY, -- T5.ITE_KEY,
                    T4.SHIPPER_ID,
                    T4.SHIPPER AS SHIPPER_NAME,
                    T4.POL,
                    T4.POL_NAME,
                    T4.POD,
                    T4.POD_NAME,
                    T4.CONSIGNEE_ID,
                    T4.CONSIGNEE AS CONSIGNEE_NAME,
                    T4.CUSTOMER_NAME, --T5."CUSTOMER_NAME",
                    T4.RELEVANT_PLANNING,
                    T4.STATUS, --T5."EXECUTION_STATUS",
                    T4.LIFECYCLE_STATUS, --T5."LIFECYCLE_STATUS",
                    T4.BOOKING_DATE, --T5."BOOKING_DATE"
                    :V_EXECUTION_ID AS EXECUTION_ID,
                    :V_SD_PLAN_ID AS SD_PLAN_ID,
                    :V_NODE_ID AS NODE_ID,
                    T0.LOCATION_ID,
                    T0.LOCATION_NAME,
                    IFNULL(T5.CURRENT_STOCK, 0)  AS stock,-- T5.STOCK,
                    T0.SUPPLY,
                    T0.DEMAND,
                    IFNULL(T6.QUANTITY,0) AS IMPACTED_DEMAND,
                    IFNULL(T7.QUANTITY,0) AS IMPACTED_SUPPLY,
                    T0.BALANCE_SUPPLY_DEMAND,
                    T0.BALANCE_STOCK_SUPPLY_DEMAND,
                    IFNULL (T0.MIN_SAFETY_STOCK,0) AS MIN_STOCK,
                    T0.MAX_CAPACITY,
                    :MANDATORY_COST_MODEL_ID AS COST_MODEL_ID,
                    T1.COST AS TRANSPORTATION_COST,
                    T2.COST AS HANDLING_COST,
                    0 AS FREE_DAYS,
                    0 AS FREE_AMOUNT,
                    T3.COST AS STORAGE_COST,
                    T0.MAX_SAFETY_STOCK,
                    T0.MIN_SAFETY_STOCK_HEADER,
                    T0.MAX_SAFETY_STOCK_HEADER,
                    T0.MAX_CAPACITY_HEADER,
                    T0.STOCK_BALANCE_HEADER,
                    T8.HANDLING_CAPACITY,
                    IFNULL(T8.SUPPLY + T8.DEMAND,0) AS SUPPLY_DEMAND,
                    T8.HANDLING_CAPACITY - T8.SUPPLY - T8.DEMAND AS REMAINING_HANDLING_CAPACITY                    
              /*Commented by Zhengning as data already fetech above        
              FROM "sap.tm.trp.db.planningcockpit::cv_get_all_plan_data_with_alert"
                    (placeholder."$$IN_EXECUTION_ID$$"=>:V_EXECUTION_ID) T0
              */
              FROM :PLAN_DATA      T0
        LEFT JOIN  :t_handling_cost        T2 ON T0.LOCATION_NAME = T2.LOCATION      AND T2.RESOURCE_TYPE=T0.EQUIP_TYPE_ID
        LEFT JOIN  :t_storage_cost         T3 ON T0.LOCATION_NAME = T3.LOCATION    AND T0.EQUIP_TYPE_ID = T3.RESOURCE_TYPE
                                                 AND T0.START_TIME = T3.START_TIME AND T0.END_TIME = T3.END_TIME
        INNER JOIN :RULE_ITR  T4
                ON T4.RESOURCE_TYPE          = T0.EQUIP_TYPE_ID AND
                                                 ADD_DAYS (T0.END_TIME, :DATE_OFFSET) >= T4.PRE_DATE AND
                                                 ADD_DAYS(T0.START_TIME, :DATE_OFFSET)< T4.PRE_DATE
        INNER JOIN :t_transportation_cost  T1 
        ON T0.LOCATION_NAME = T1.TO_LOCATION   AND T1.RESOURCE_TYPE=T0.EQUIP_TYPE_ID 
        AND T4.CONSIGNEE_LOCATION=T1.FROM_LOCATION
        LEFT OUTER JOIN :lt_current_stock T5
                ON  T0.EQUIP_TYPE_ID = T5.RESOURCE_TYPE
               AND  T0.LOCATION_ID   = T5.LOCATION_ID
        LEFT OUTER JOIN  (SELECT TOP 1 * FROM :TU_INFO)  T6
                ON T0.EQUIP_TYPE_ID       = T6.RESOURCE_TYPE
               --AND T0.LOCATION_ID         = T6.RETURN_LOCATION_ID
               AND ADD_DAYS (T0.START_TIME, :DATE_OFFSET)<= T6.RETURN_DATE
               AND ADD_DAYS (T0.END_TIME, :DATE_OFFSET) >=T6.RETURN_DATE
               AND T6.RULE_ID             = :RULE_ID
        LEFT OUTER JOIN (SELECT TOP 1 * FROM :TU_INFO)  T7
                ON T0.EQUIP_TYPE_ID       = T7.RESOURCE_TYPE
               --AND T0.LOCATION_ID         = T7.ORIGINAL_RETURN_LOCATION_ID
               AND ADD_DAYS(T0.START_TIME, :DATE_OFFSET)<= T7.RETURN_DATE
               AND ADD_DAYS(T0.END_TIME, :DATE_OFFSET) >=T7.RETURN_DATE
               AND  T7.RULE_ID             =:RULE_ID
  	    LEFT OUTER JOIN :T_HANDLING_CAPACITY T8
				ON T0.LOCATION_ID = T8.LOCATION_ID   
				AND T0.START_TIME = T8.START_TIME
				AND T0.END_TIME = T8.END_TIME                            
             WHERE T0.PLAN_EXECUTION_ID   = :V_EXECUTION_ID
               AND  T0.NODE_ID             = :V_NODE_ID
               AND  T4.FLAG                <>2 WITH HINT(NO_RANGE_JOIN);
             
              
        CALL "sap.tm.trp.db.hrf.pickupReturnScenario.locationDetermination.ERLDR::p_call_ER_LDR_rules"(
             :PICKUPRETURN_MODE,
             :RULE_SP,
             ER_LDR_RES
            );
            
        ER_LDR_RES_TEMP=SELECT * FROM :ER_LDR_RES
                                    UNION ALL 
                                    SELECT * FROM :ER_LDR_RES_TEMP;
            
        END FOR;
        ER_LDR_RESULT = SELECT * FROM :ER_LDR_RES_TEMP;
            
             
        t_booking_depot = SELECT DISTINCT a.TU_ID AS BOOKING_ID,
                                 c.CONSIGNEE_LOCATION AS CUSTOMER_LOCATION,
                                 CURRENT_UTCTIMESTAMP AS START_TIME,
                                 ADD_DAYS(TO_TIMESTAMP(c.PRE_DATE),IFNULL(:shift,0)) AS BOOKING_TIME,
                                 c.RESOURCE_TYPE AS CONTAINER_TYPE,
                                 c.QUANTITY,
                                 'RETURN' AS MODE,
                                 c.RELEVANT_PLANNING AS HAULAGE_TYPE
                            FROM :ER_LDR_RESULT a
                      INNER JOIN :TU_TBL c
                              ON (c.TU_ID = a.TU_ID
                                  --AND c.CONSIGNEE_LOCATION_ID    = a.DEPOT_ID
                                  AND c.RESOURCE_TYPE   = a.EQUIPMENT_ID
                                  AND c.PRE_DATE   = a.PLANNED_DATE);
  		 
  		IF :HANDLING_CAPA = 0 THEN
          CALL "sap.tm.trp.db.pickupreturn.algorithm::p_return" (
            :V_OPTIMIZATION_OPTION,
            :HANDLING_CAPA,
            :T_TRANSPORTATION_COST_P,
            :T_PARAMETERS,
            :T_SUPPLY_DEMAND_P,
            :T_BOOKING_DEPOT,
            :T_STOCK_CONFIGURATION_P,
            :T_LOCATION_COST_P,
            :T_HANDLING_CAPACITY,
            CUR_RESULT
           );
        ELSE
           CALL "sap.tm.trp.db.pickupreturn.algorithm::p_return_genios" (
            :V_OPTIMIZATION_OPTION,
            :HANDLING_CAPA,
            :T_TRANSPORTATION_COST_P,
            :T_PARAMETERS,
            :T_SUPPLY_DEMAND_P,
            :T_BOOKING_DEPOT,
            :T_STOCK_CONFIGURATION_P,
            :T_LOCATION_COST_P,
            :T_HANDLING_CAPACITY,
            CUR_RESULT
           );
		END IF ;
      --Location name to location id
	    CUR_RESULT = SELECT T1.BOOKING_ID,
					T1.FROM_LOCATION,
					T2.ID AS TO_LOCATION,	
					T1.FROM_TIME,
					T1.TO_TIME,
					T1.CONTAINER_TYPE,
					T1.QUANTITY,
					T1.STORAGE_COST,
					T1.HANDLING_COST,
					T1.TRANSPORTATION_COST,
					T1.TOTAL_COST,
					T1.MODE,
					T1.HAULAGE_TYPE
		  FROM :CUR_RESULT T1
		  INNER JOIN "sap.tm.trp.db.semantic.location::v_location" T2 ON T2.NAME = T1.TO_LOCATION;
		
          
          IF :V_SCHEDULE_TIME_TYPE <> 1 THEN
	          DELETE FROM "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"
	          WHERE USER = :V_USERNAME
	          AND RULE_ID = :RULE_ID;
          END IF ;
 
IF :V_SCHEDULE_TIME_TYPE = 1 THEN
		  
		  INSERT INTO "sap.tm.trp.db.pickupreturn::t_pickupreturn_global_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID)
	           --    ELSE IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_ARRIVAL_DATE AS DATE,
	             IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_RETURN_LOCATION_ID  AS CUR_LOCATION_ID,
	             T1.RETURN_DATE AS PRE_DATE,
	             T1.ORIGINAL_RETURN_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT BOOKING_ID AS TU_ID,CONTAINER_TYPE,TO_LOCATION AS LOCATION_ID
                     FROM :CUR_RESULT) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.CONTAINER_TYPE
              AND T1.FLAG <> 2);
		  
		  ELSE
	

	      INSERT INTO "sap.tm.trp.db.pickupreturn::t_location_rule_assignment_draft"(
	                  RULE_ID,
	                  USER,
	                  TU_ID,
	                  TU_TYPE_CODE,
	                  EXECUTION_STATUS_CODE,
	                  SHIPPER_ID,
	                  CONSIGNEE_ID,
	                  RESOURCE_TYPE,
	                  QUANTITY,
	                  ASSIGN_QUANTITY,
	                  RESOURCE_NUMBER,
	                  SOURCE_LOCATION_ID,
	                  DESTINATION_LOCATION_ID,	
	                  POL,
	                  POD,
	                  DATE,
	                  PRE_LOCATION_ID,
	                  CUR_LOCATION_ID,
	                  PRE_DATE,
	                  CUR_DATE,
	                  OP_SETTING_TYPE,
	                  SCHEDULE_TIME_TYPE,
	                  PLANNING_RELEVANT,
	                  CUSTOMER_CODE,
	                  ITE_KEY,
	                  LIFECYCLE_CODE,
	                  BOOKING_DATE,
	                  ASSIGN_STATUS,
	                  RULE_TYPE,
	                  SAVE_TIME,
	                  FLAG,
	                  BOOKING_REFERENCE,
		              MOT,
			          MEANS_OF_TRANSPORTATION,
		              CARRIER_POL,
		              CARRIER_POD,
			          VOYAGE_POL,
			          VOYAGE_POD,
			          SPECIAL_INSTRUCTION_CODE,
			          SPECIAL_INSTRUCTION_NAME,
			          LAST_LOCATION_ID,
			          LAST_LOCATION_NAME,
			          LEASE_AGREEMENT,
			          LEASE_TYPE_CODE,
			          LEASE_TYPE,
			          ASSIGNED_RESOURCE,
			          VESSEL_CUTOFF_TIME,
			          VESSEL_ARRIVAL_DATE,
			          VESSEL_POL,
			          VESSEL_POD,
			          STREETTURN_TU_ID,
			          PLAN_STATUS)
	      SELECT DISTINCT T1.RULE_ID,
	             :V_USERNAME AS USER,
	             T1.TRANSPORTATION_ID,
	             T1.TU_TYPE_CODE,
	             T1.EXECUTION_STATUS_CODE,
	             T1.SHIPPER_ID,
	             T1.CONSIGNEE_ID,
	             T1.RESOURCE_TYPE,
	             T1.QUANTITY,
	             T1.ASSIGNED_CONTAINERS,
	             T1.RESOURCE_NUMBER,
	             T1.SOURCE_LOCATION_ID,
	             T1.DESTINATION_LOCATION_ID,
	             T1.POL,
	             T1.POD,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.VESSEL_CUTOFF_TIME ELSE T1.VESSEL_ARRIVAL_DATE END AS DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN IFNULL (T2.LOCATION_ID,T1.PICKUP_LOCATION_ID)
	           --    ELSE IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) END AS PRE_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_LOCATION_ID ELSE T1.ORIGINAL_RETURN_LOCATION_ID END AS CUR_LOCATION_ID,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.PICKUP_DATE ELSE T1.RETURN_DATE END AS PRE_DATE,
	           --  CASE :V_RULE_TYPE WHEN 1 THEN T1.ORIGINAL_PICKUP_DATE ELSE T1.ORIGINAL_RETURN_DATE END AS CUR_DATE,
	             T1.VESSEL_ARRIVAL_DATE  AS DATE,
	             IFNULL (T2.LOCATION_ID,T1.RETURN_LOCATION_ID) AS PRE_LOCATION_ID,
	             T1.ORIGINAL_RETURN_LOCATION_ID  AS CUR_LOCATION_ID,
	             T1.RETURN_DATE AS PRE_DATE,
	             T1.ORIGINAL_RETURN_DATE AS CUR_DATE,
	             :V_OP_SETTING_TYPE,
	             :V_SCHEDULE_TIME_TYPE,
	             T1.RELEVANT_PLANNING,
	             T1.CUSTOMER_CODE,
	             T1.ITE_KEY,
	             T1.LIFECYCLE_CODE,
	             T1.BOOKING_DATE,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.ASSIGN_STATUS
	               ELSE 1 END AS ASSIGN_STATUS,
	             :V_RULE_TYPE,
	             CURRENT_UTCTIMESTAMP AS SAVE_TIME,
	             CASE WHEN T2.LOCATION_ID IS NULL THEN T1.FLAG
	               ELSE 1 END AS FLAG,
	             T1.BOOKING_REFERENCE,
		         T1.MOT,
			     T1.MEANS_OF_TRANSPORTATION,
		         T1.CARRIER_POL,
		         T1.CARRIER_POD,
			     T1.VOYAGE_POL,
			     T1.VOYAGE_POD,
			     T1.SPECIAL_INSTRUCTION_CODE,
			     T1.SPECIAL_INSTRUCTION_NAME,
			     T1.LAST_LOCATION_ID,
			     T1.LAST_LOCATION_NAME,
			     T1.LEASE_AGREEMENT,
			     T1.LEASE_TYPE_CODE,
			     T1.LEASE_TYPE,
			     T1.ASSIGNED_RESOURCE,
			     T1.VESSEL_CUTOFF_TIME,
			     T1.VESSEL_ARRIVAL_DATE,
			     T1.VESSEL_POL,
			     T1.VESSEL_POD,
			     T1.STREETTURN_TU_ID,
			     T1.PLAN_STATUS
	      FROM :TU_INFO T1
	      LEFT JOIN (SELECT DISTINCT BOOKING_ID AS TU_ID,CONTAINER_TYPE,TO_LOCATION AS LOCATION_ID
                     FROM :CUR_RESULT) T2
          ON (T1.TRANSPORTATION_ID = T2.TU_ID
              AND T1.RESOURCE_TYPE = T2.CONTAINER_TYPE
              AND T1.FLAG <> 2);
              END IF;
   END IF;
  
 END IF;
 
END;