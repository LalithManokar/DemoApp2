PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.planningcockpit::p_calculate_voyage_location_capcities" (
  IN SIM_PLAN_ID BIGINT,
  IN SCENARIO_ID BIGINT,  
  IN TRIP_IDS "sap.tm.trp.db.planningcockpit::tt_trip_id",
  OUT OUT_CAPACITY_INFO "sap.tm.trp.db.planningcockpit::tt_trip_location_capacity"
 ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
    DEFAULT SCHEMA SAP_TM_TRP
  	READS SQL DATA 
AS
BEGIN
   DECLARE V_RESOURCE_CATEGORY_TYPE NVARCHAR(50); 
   DECLARE V_RESOURCE_CATEGORY NVARCHAR(20); 
   DECLARE V_UOM VARCHAR(20);
   DECLARE UOM_TEU VARCHAR(10) := 'TEU';
   DECLARE UOM_PCS VARCHAR(10) := 'PCS';
   DECLARE OUT_DATASET_CODE VARCHAR(50);
   DECLARE MESSAGE VARCHAR(200);
   DECLARE STATUS_VALID INTEGER := 0; 
   DECLARE V_MIN_SEQUENCE INTEGER := 0;
    
    --Get the resource category type (CN, RC,GE) of the simulation plan
    SELECT IFNULL(MAX(T2.RESOURCE_CATEGORY_TYPE),''), IFNULL (MAX (T2.CODE),'') INTO V_RESOURCE_CATEGORY_TYPE,V_RESOURCE_CATEGORY
    FROM "sap.tm.trp.db.planningcockpit::t_simulation_plan"  T1
    INNER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings"  T2 ON (T1.RESOURCE_CATEGORY = T2.CODE)
    WHERE T1.ID = :SIM_PLAN_ID;
    
    RESOURCE_TYPES = 
       SELECT RESOURCE_TYPE_CODE, IFNULL(MAX(TEU_COUNT),1) AS TEU_COUNT
       FROM (SELECT DISTINCT T1.RESOURCE_TYPE_CODE, T2.TEU_COUNT
                FROM "sap.tm.trp.db.semantic.resource::v_resource_type_with_category" T1
                INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_type" T2
                ON (T1.RESOURCE_TYPE_CODE = T2.RESOURCE_TYPE_CODE)
                WHERE T1.RESOURCE_CATEGORY = :V_RESOURCE_CATEGORY
             )
        GROUP BY RESOURCE_TYPE_CODE;
    
    IF V_RESOURCE_CATEGORY_TYPE = 'CN' THEN
      V_UOM := :UOM_TEU;
    ELSE
      V_UOM := :UOM_PCS;
    END IF;
    
    --Get dataset code
    CALL "sap.tm.trp.db.planningcockpit::p_get_dataset_code_by_simulation_scenario_id"(
    :SIM_PLAN_ID,
    :SCENARIO_ID,
    OUT_DATASET_CODE,
    MESSAGE  
   );
   
   -- CALL "SAP_TM_ROUTING"."sap.tm.trp.routing.db.connector::p_query_trip_location_capacity" (:TRIP_IDS,trip_location_capacity);
  CALL "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_query_trip_location_capacity" (:OUT_DATASET_CODE,:TRIP_IDS,trip_location_capacity);
    --IN trip_ids TABLE (trip_id NVARCHAR(100)), 
    --OUT trip_location_capacity table (
    --     TRIP_ID NVARCHAR(100),
    --     SEQUENCE INTEGER,
    --     CAPACITY DECIMAL(15,3),
    --     CAPACITY_UOM NVARCHAR(10)
    
    -- Need to consider the acticity of current scenario impact on the capacity 
    
    -- Reposition activity (Anna)
    
    trip_location_capacity_of_the_uom =
       SELECT T1.TRIP_ID, 
            CASE IFNULL(T2.MIN_SEQUENCE,0) WHEN 0 THEN T1.SEQUENCE ELSE T1.SEQUENCE - 1 END AS SEQUENCE,
            T1.CAPACITY,T1.CAPACITY_UOM
            FROM (SELECT T1.TRIP_ID,T1.SEQUENCE,T1.CAPACITY,T1.CAPACITY_UOM
                FROM :trip_location_capacity T1 WHERE T1.CAPACITY_UOM = :V_UOM) T1
            LEFT OUTER JOIN (
            		SELECT TRIP_ID,MIN(SEQUENCE) AS MIN_SEQUENCE 
            		FROM (
            		  SELECT T1.TRIP_ID,T1.SEQUENCE,T1.CAPACITY,T1.CAPACITY_UOM
            		  FROM :trip_location_capacity T1 WHERE T1.CAPACITY_UOM = :V_UOM
            		)
            		GROUP BY TRIP_ID) T2
            ON T1.TRIP_ID = T2.TRIP_ID;
  
    --Get the trip sequence for each route
    ROUTE_TRIP_SEQUENCE = 
      SELECT T2.ROUTE_ID,T2.TRIP_ID,T2.FROM_TRIP_SEQUENCE,T2.TO_TRIP_SEQUENCE
      FROM 
      (
         SELECT  T1.ROUTE_ID,T1.SEQUENCE,T1.TRIP_ID,LAG(NEXT_TRIP_SEQUENCE) OVER( PARTITION BY ROUTE_ID ORDER BY SEQUENCE) AS FROM_TRIP_SEQUENCE, 
         T1.PRE_TRIP_SEQUENCE AS TO_TRIP_SEQUENCE
         FROM "sap.tm.trp.routing.db.path::t_route_sequence" t1
         ORDER BY T1.ROUTE_ID,T1.SEQUENCE
      ) T2 
      INNER JOIN :TRIP_IDS T3 ON (T2.TRIP_ID = T3.TRIP_ID);
      
    --get the trip id and the related route id, and then get the related activity
    TRIP_ACRIVITY_INFO = SELECT T2.ROUTE_ID,T2.TRIP_ID,T2.FROM_TRIP_SEQUENCE,T2.TO_TRIP_SEQUENCE,
    CASE WHEN TEU_COUNT > 0 THEN TEU_COUNT ELSE 1 END AS TEU_COUNT, 
     T3.FROM_LOC_ID, T6.NAME AS FROM_LOC_NAME, T3.TO_LOC_ID, T7.NAME AS TO_LOC_NAME,
    T3.QUANTITY AS ROUTE_QUANTITY--SUM(T3.QUANTITY) AS TRIP_TOTAL_ACTIVITY_QUNATITY
    FROM 
    (
        SELECT T1.ROUTE_ID, T1.TRIP_ID,T1.FROM_TRIP_SEQUENCE,T1.TO_TRIP_SEQUENCE
        FROM :ROUTE_TRIP_SEQUENCE T1
    ) T2 
    INNER JOIN "sap.tm.trp.db.planningcockpit::t_activity" T3 ON (T2.ROUTE_ID = T3.ROUTE_ID AND T3.STATUS = :STATUS_VALID)
    INNER JOIN "sap.tm.trp.db.planningcockpit::t_scenario" T4 ON (T3.REL_SCENARIO_ID = T4.ID AND T4.ID = :SCENARIO_ID)
    INNER JOIN :RESOURCE_TYPES T5 ON (T3.EQUIP_TYPE = T5.RESOURCE_TYPE_CODE)
    LEFT OUTER JOIN  "sap.tm.trp.db.semantic.location::v_all_location" T6 ON (T6.ID = T3.FROM_LOC_ID)
	LEFT OUTER JOIN  "sap.tm.trp.db.semantic.location::v_all_location" T7 ON (T7.ID = T3.TO_LOC_ID);  
    
    --get locations from the selected TRIP_IDS(voyages)
     CALL "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_query_trip_locations"
    (
    	:TRIP_IDS, TRIP_LOCATIONS
    );
    
   	RESP_EACH_STOP = 
	   SELECT ROUTE_ID,TRIP_ID, FROM_TRIP_SEQUENCE, TO_TRIP_SEQUENCE,TEU_COUNT,ROUTE_QUANTITY
	    FROM (
	    	SELECT  A.ROUTE_ID,A.TRIP_ID, IFNULL(B.SEQUENCE,A.FROM_TRIP_SEQUENCE) AS FROM_TRIP_SEQUENCE,
	    IFNULL(C.SEQUENCE, A.TO_TRIP_SEQUENCE) AS TO_TRIP_SEQUENCE,
	    TEU_COUNT,ROUTE_QUANTITY
	    FROM  :TRIP_ACRIVITY_INFO AS A
	    LEFT OUTER JOIN :TRIP_LOCATIONS as B
	       ON (A.TRIP_ID = B.TRIP_ID AND A.FROM_LOC_NAME = B.LOCATION AND B.SEQUENCE >= A.FROM_TRIP_SEQUENCE)
	    LEFT OUTER JOIN :TRIP_LOCATIONS AS C 
	      ON (A.TRIP_ID = B.TRIP_ID AND A.TO_LOC_NAME = C.LOCATION AND C.SEQUENCE <= A.TO_TRIP_SEQUENCE)
	    ) WHERE FROM_TRIP_SEQUENCE < TO_TRIP_SEQUENCE;
   
    TRIP_ACRIVITY_INFO_UOM_CONVERT =
    SELECT  TRIP_ID,SEQUENCE,TOTAL_CAPACITY,CAPACITY_UOM, SUM(ROUTE_QUANTITY_CONVERTED) AS TRIP_TOTAL_ACTIVITY_QUNATITY
    FROM (
	   SELECT T1.TRIP_ID,T1.SEQUENCE,T1.TOTAL_CAPACITY,T1.CAPACITY_UOM,T1.TEU_COUNT,
	    CASE WHEN :V_UOM = :UOM_TEU THEN T1.ROUTE_QUANTITY * T1.TEU_COUNT  ELSE ROUTE_QUANTITY END AS ROUTE_QUANTITY_CONVERTED
	   FROM (
	     SELECT T1.TRIP_ID,T1.SEQUENCE,T1.CAPACITY AS TOTAL_CAPACITY,T1.CAPACITY_UOM,T12.TEU_COUNT,
	          IFNULL(T12.ROUTE_QUANTITY,0) AS ROUTE_QUANTITY
	     FROM :trip_location_capacity_of_the_uom T1
	     LEFT OUTER JOIN :RESP_EACH_STOP T12 ON (T1.TRIP_ID = T12.TRIP_ID AND T1.SEQUENCE BETWEEN T12.FROM_TRIP_SEQUENCE AND T12.TO_TRIP_SEQUENCE)
	    ) T1
    ) GROUP BY TRIP_ID,SEQUENCE,TOTAL_CAPACITY,CAPACITY_UOM;
     
  -- Calculate delta change of Load and Discharge of the scenario  
    DELTA_CHANGE_OF_EACH_STOP = 
    SELECT TRIP_ID, SCHEDULE, VOYAGE, SEQUENCE, SUM(DELTA_CHANGE) AS SUM_DELTA_CHANGE
    FROM (
        SELECT TRIP_ID, SCHEDULE, VOYAGE, SEQUENCE,
               CASE WHEN :V_UOM = :UOM_TEU THEN      
                (UPDATED_LOAD - UPDATED_DISCHARGE - ORIGINAL_LOAD + ORIGINAL_DISCHARGE) * TEU_COUNT
               ELSE (UPDATED_LOAD - UPDATED_DISCHARGE - ORIGINAL_LOAD + ORIGINAL_DISCHARGE) 
               END AS DELTA_CHANGE      
    FROM (
         SELECT TRIP_ID,SCHEDULE,VOYAGE,SEQUENCE,
       CASE WHEN TEU_COUNT > 0 THEN TEU_COUNT ELSE 1 END AS TEU_COUNT, 
       ORIGINAL_LOAD, IFNULL(UPDATED_LOAD,ORIGINAL_LOAD) AS UPDATED_LOAD,
       ORIGINAL_DISCHARGE,IFNULL(UPDATED_DISCHARGE,ORIGINAL_DISCHARGE) AS UPDATED_DISCHARGE
       FROM (
             SELECT T3.TRIP_ID, T3.SCHEDULE, T3.VOYAGE, T3.SEQUENCE,            
	            T5.TEU_COUNT,IFNULL(ORIGINAL_LOAD,0) AS ORIGINAL_LOAD,T3.UPDATED_LOAD,
	            IFNULL(T3.ORIGINAL_DISCHARGE,0) AS ORIGINAL_DISCHARGE,T3.UPDATED_DISCHARGE
		     FROM "sap.tm.trp.db.planningcockpit::t_scenario" T1
		     INNER JOIN "sap.tm.trp.db.planningcockpit::t_activity" T2 ON (T1.ID = T2.REL_SCENARIO_ID AND T2.STATUS = :STATUS_VALID)
		     INNER JOIN "sap.tm.trp.db.planningcockpit::t_load_discharge_activity_detail" T3 ON (T2.ID = T3.ACTIVITY_ID)
		     INNER JOIN :RESOURCE_TYPES T5 ON (T2.EQUIP_TYPE = T5.RESOURCE_TYPE_CODE)
		     INNER JOIN :TRIP_IDS T6 ON (T6.TRIP_ID = T3.TRIP_ID)
		     WHERE T1.ID = :SCENARIO_ID
       )
      )
    ) GROUP BY TRIP_ID, SCHEDULE, VOYAGE, SEQUENCE;
    
  LD_ACTIVITY_INFO = 
         SELECT T1.TRIP_ID, T1.SCHEDULE, T1.VOYAGE, T1.SEQUENCE, 
	          IFNULL(SUM(T2.SUM_DELTA_CHANGE),0) AS LD_TAKEN_CAPACITY
	     FROM :DELTA_CHANGE_OF_EACH_STOP T1
	     LEFT OUTER JOIN :DELTA_CHANGE_OF_EACH_STOP T2
	          ON ( T1.SCHEDULE = T2.SCHEDULE AND T1.VOYAGE = T2.VOYAGE AND
	               T1.TRIP_ID = T2.TRIP_ID AND T1.SEQUENCE >= T2.SEQUENCE)
	     GROUP BY T1.TRIP_ID, T1.SCHEDULE, T1.VOYAGE, T1.SEQUENCE;
     
  OUT_CAPACITY_INFO = 
      SELECT T1.TRIP_ID,T1.SEQUENCE,
      (T1.TOTAL_CAPACITY - IFNULL(T1.TRIP_TOTAL_ACTIVITY_QUNATITY,0) - IFNULL(T2.LD_TAKEN_CAPACITY,0)) AS REMAIN_CAPACITY, 
      T1.TOTAL_CAPACITY,T1.CAPACITY_UOM
      FROM  :TRIP_ACRIVITY_INFO_UOM_CONVERT T1
      LEFT OUTER JOIN :LD_ACTIVITY_INFO T2 ON (T1.TRIP_ID = T2.TRIP_ID AND T1.SEQUENCE = T2.SEQUENCE); 

END;