PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.planningcockpit::p_query_route_for_map"(
    IN SIM_PLAN_ID BIGINT,
    IN SCENARIO_ID BIGINT,
    IN FROM_LOC_NAME VARCHAR(50),
    IN TO_LOC_NAME VARCHAR(50),
    IN START_TIME TIMESTAMP,
    IN END_TIME TIMESTAMP,
    IN XMIN DOUBLE, 
    IN XMAX DOUBLE, 
    IN YMIN DOUBLE, 
    IN YMAX DOUBLE, 
    OUT ROUTES "sap.tm.trp.db.planningcockpit::tt_routes_for_map",
    OUT ROUTE_CONNECTION "sap.tm.trp.db.planningcockpit::tt_route_connection_for_map",
    OUT POINTS "sap.tm.trp.db.planningcockpit::tt_points_for_map_with_transhipment",
    OUT GPS_INFO "sap.tm.trp.db.systemmanagement.location::t_gps_info",   
    OUT MESSAGE VARCHAR(200),
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"   
    AS
BEGIN
   DECLARE NETWORK_CODE VARCHAR(50);   
   DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER := 2000;
   DECLARE VAR_LOCATION_NUM INTEGER := 0 ;   
   DECLARE OUT_UUID VARCHAR(32) := SYSUUID;   
   DECLARE IN_POLYGON CLOB; 
   DECLARE USED_FLAG_CHAR VARCHAR(1);
   DECLARE ROUTE_HEAD_MESSAGE VARCHAR(500);
	
	CALL "sap.tm.trp.db.planningcockpit::p_get_route_head_info"(:SIM_PLAN_ID,:SCENARIO_ID,:FROM_LOC_NAME,:TO_LOC_NAME,:START_TIME,:END_TIME,TEMP_ROUTES,ROUTE_HEAD_MESSAGE);
   
   IF :ROUTE_HEAD_MESSAGE <> 'MSG_NETWORK_NOT_EXIST' THEN
	
	--Head:
	ROUTES = SELECT T1.ROUTE_ID,T1.FROM_LOCATION, T2.XPOS AS FROM_LONGITUDE,T2.YPOS AS FROM_LATITUDE,
    T1.TO_LOCATION,T3.XPOS AS TO_LONGITUDE, T3.YPOS AS TO_LATITUDE
    FROM :TEMP_ROUTES T1
    LEFT OUTER JOIN "sap.tm.trp.db.semantic.location::v_all_location" T2 ON (T1.FROM_LOCATION = T2.NAME)
	LEFT OUTER JOIN "sap.tm.trp.db.semantic.location::v_all_location" T3 ON (T1.TO_LOCATION = T3.NAME);
	
   --Detail: 
   TMP_ROUTE_CONNECTION =
     SELECT T1.ROUTE_ID,T1.SEQUENCE,T1.FROM_LOCATION,T1.FROM_LONGITUDE,T1.FROM_LATITUDE,
     T1.TO_LOCATION,T1.TO_LONGITUDE,T1.TO_LATITUDE,T1.MTR 
    FROM  "sap.tm.trp.routing.db.dataset::cv_route_sequence"()T1
    INNER JOIN (
     SELECT DISTINCT ROUTE_ID FROM :ROUTES
    )T2 ON (T1.ROUTE_ID = T2.ROUTE_ID)
    ;
   

   --Total Points of the root:
    TMP_POINTS = SELECT DISTINCT ROUTE_ID,LOCATION_NAME, LONGITUDE, LATITUDE 
            FROM 
            (
	            SELECT ROUTE_ID,FROM_LOCATION AS LOCATION_NAME,FROM_LONGITUDE AS LONGITUDE,FROM_LATITUDE AS LATITUDE
	            FROM :TMP_ROUTE_CONNECTION T1
	            UNION SELECT ROUTE_ID,TO_LOCATION AS LOCATION_NAME,TO_LONGITUDE AS LONGITUDE,TO_LATITUDE AS LATITUDE
	            FROM :TMP_ROUTE_CONNECTION T2
            )T3;
            
     /*TEMP_POINTS = SELECT  ROUTE_ID,LOCATION_NAME, MAP(A.LONGITUDE,NULL,-9999,0,-9999,A.LONGITUDE) AS LONGITUDE,
    MAP(A.LATITUDE,NULL,-9999,0,-9999,A.LATITUDE) AS LATITUDE
    FROM :TMP_POINTS A;
    */
    
     OUT_LOCATIONS_XPOS_YPOS_INVALID = SELECT 
      T2.ID AS LOCATION_ID,T2.NAME AS LOCATION_NAME, T2.XPOS, T2.YPOS
      FROM (SELECT DISTINCT LOCATION_NAME FROM :TMP_POINTS) T1 
      INNER JOIN "sap.tm.trp.db.semantic.location::v_location" T2 ON (T1.LOCATION_NAME = T2.NAME)
      WHERE (T2.XPOS IS NULL OR T2.YPOS IS NULL) OR (ABS(T2.XPOS) + ABS(T2.YPOS) =0);  
     
     --Check if the points with the screen:
    /* BOUNDARY_GEO_TEXT= 
		       SELECT T1.ROUTE_ID, 
					  CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG(CASE WHEN T1.LONGITUDE = 0 AND T1.LATITUDE = 0 THEN '(-9999 -9999)'
		                     			ELSE ',(' || T1.LONGITUDE || ' ' || T1.LATITUDE || ')' END) ,2, 22000000)),')') AS GEOTEXT
		       FROM :TMP_POINTS T1
		       GROUP BY T1.ROUTE_ID; 
		       */
		       
	BOUNDARY_GEO_TEXT= 
		       SELECT T1.ROUTE_ID, 
					  CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG(',(' || T1.LONGITUDE || ' ' || T1.LATITUDE || ')') ,2, 22000000)),')') AS GEOTEXT
		       FROM :TMP_POINTS T1
		       WHERE  (T1.LONGITUDE IS NOT NULL AND T1.LATITUDE IS NOT NULL) AND (ABS(T1.LONGITUDE) + ABS(T1.LATITUDE) > 0)
		       GROUP BY T1.ROUTE_ID;
		       
	 IN_POLYGON := 'Polygon(('||:XMIN||' '||:YMAX||','||:XMAX||' '||:YMAX||','||:XMAX||' '||:YMIN||','||:XMIN||' '||:YMIN||','||:XMIN||' '||:YMAX||'))';
     
     TMP_POINTS_INTERSECTS_WITH_SCREEN = 
	    SELECT T3.ROUTE_ID,T3.LOCATION_NAME, T3.LONGITUDE, T3.LATITUDE
        FROM :BOUNDARY_GEO_TEXT T1 		
		INNER JOIN :TMP_POINTS T3 ON (T1.ROUTE_ID = T3.ROUTE_ID)
		WHERE NEW ST_MultiPoint(TO_VARCHAR(T1.GEOTEXT) ).ST_INTERSECTS(NEW ST_POLYGON(:IN_POLYGON) ) = 1 ; 
              
     DISTINCT_POINTS_WITH_INTERSECTION = SELECT DISTINCT LOCATION_NAME, LONGITUDE, LATITUDE FROM :TMP_POINTS_INTERSECTS_WITH_SCREEN;
     
     SELECT COUNT(1) INTO VAR_LOCATION_NUM FROM :DISTINCT_POINTS_WITH_INTERSECTION;
     
     IF :VAR_LOCATION_NUM > MAX_LOCATION_NUM_ON_MAP THEN 
         POINTS = SELECT NULL AS LOCATION_NAME, NULL AS LONGITUDE, NULL AS LATITUDE, NULL AS WITHIN_FILTER_FLAG,NULL AS TRANSHIPMENT_FLAG FROM DUMMY;  
     
         ROUTES =  SELECT NULL AS ROUTE_ID,NULL AS FROM_LOCATION,NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
              NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE--,NULL AS MEANS_OF_TRANSPORT
              FROM DUMMY WHERE 1 = 0;
              
	     ROUTE_CONNECTION = 
	     SELECT NULL AS ROUTE_ID,NULL AS SEQUENCE,NULL AS FROM_LOCATION,
	     NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
		 NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE,
		 NULL AS MEANS_OF_TRANSPORT,
		 NULL AS HAS_GPS_INFO
		 FROM DUMMY WHERE 1 = 0 ;
        
        MESSAGE := 'MSG_TOO_MUCH_DATA_FOR_MAP';
        RETURN;    
     END IF;
     
     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue
     -- (just the display part needs to do the exchange, the polygon calculation does not needs to do )
     ROUTES = 
	 SELECT ROUTE_ID,FROM_LOCATION,FROM_LATITUDE AS FROM_LONGITUDE,FROM_LONGITUDE AS FROM_LATITUDE,
	 TO_LOCATION,TO_LATITUDE AS TO_LONGITUDE, TO_LONGITUDE AS TO_LATITUDE--, MEANS_OF_TRANSPORT
	 FROM :ROUTES;
	 
	 -- get locations within the location filter(primary location is returned for aggregate location)
     CALL "sap.tm.trp.db.planningcockpit::p_get_loc_primaryloc_by_simplanId"(:SIM_PLAN_ID, filter_locations);
	 
	 --Get the locatoins which is transhipment location:
	
	TRANSHIPMENT_LOCATION = SELECT DISTINCT LOCATION
	FROM "sap.tm.trp.routing.db.path::t_route_sequence" T1
	INNER JOIN :ROUTES T2 ON (T1.ROUTE_ID = T2.ROUTE_ID)
	--WHERE PRE_TRIP_SEQUENCE IS NOT NULL AND NEXT_TRIP_SEQUENCE IS NOT NULL;
	WHERE PRE_TRIP_SEQUENCE >0 AND NEXT_TRIP_SEQUENCE >0;
	

     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue 
     POINTS = SELECT T1.LOCATION_NAME, T1.LATITUDE AS LONGITUDE, T1.LONGITUDE AS LATITUDE, 
             CASE WHEN T2.LOCATION_ID IS NULL THEN 0 ELSE 1 END AS WITHIN_FILTER_FLAG ,
              MAP(T3.LOCATION,NULL,1,0)  AS TRANSHIPMENT_FLAG
              FROM (SELECT DISTINCT LOCATION_NAME, LONGITUDE, LATITUDE FROM :TMP_POINTS_INTERSECTS_WITH_SCREEN) T1
              LEFT OUTER JOIN :filter_locations T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME)
              LEFT OUTER JOIN :TRANSHIPMENT_LOCATION T3 ON (T1.LOCATION_NAME = T3.LOCATION);
              
              
     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue 
   /*  ROUTE_CONNECTION_TMP =
     SELECT DISTINCT T1.ROUTE_ID,T1.SEQUENCE,T1.FROM_LOCATION, T1.FROM_LATITUDE AS FROM_LONGITUDE, T1.FROM_LONGITUDE AS FROM_LATITUDE,
     T1.TO_LOCATION,T1.TO_LATITUDE AS TO_LONGITUDE, T1.TO_LONGITUDE AS TO_LATITUDE,T1.MTR AS MEANS_OF_TRANSPORT
     FROM :TMP_ROUTE_CONNECTION T1
     INNER JOIN :TMP_POINTS_INTERSECTS_WITH_SCREEN T2 ON (T1.ROUTE_ID = T2.ROUTE_ID
     AND (T1.FROM_LOCATION = T2.LOCATION_NAME
     OR T1.TO_LOCATION = T2.LOCATION_NAME));  --change for map*/


 ROUTE_CONNECTION_TMP =
     SELECT DISTINCT T1.ROUTE_ID,T1.SEQUENCE,T1.FROM_LOCATION, T1.FROM_LATITUDE AS FROM_LONGITUDE, T1.FROM_LONGITUDE AS FROM_LATITUDE,
     T1.TO_LOCATION,T1.TO_LATITUDE AS TO_LONGITUDE, T1.TO_LONGITUDE AS TO_LATITUDE,T1.MTR AS MEANS_OF_TRANSPORT
     FROM :TMP_ROUTE_CONNECTION T1
     INNER JOIN :TMP_POINTS_INTERSECTS_WITH_SCREEN T2 ON (T1.ROUTE_ID = T2.ROUTE_ID
     AND (T1.FROM_LOCATION = T2.LOCATION_NAME))
     UNION
     SELECT DISTINCT T1.ROUTE_ID,T1.SEQUENCE,T1.FROM_LOCATION, T1.FROM_LATITUDE AS FROM_LONGITUDE, T1.FROM_LONGITUDE AS FROM_LATITUDE,
     T1.TO_LOCATION,T1.TO_LATITUDE AS TO_LONGITUDE, T1.TO_LONGITUDE AS TO_LATITUDE,T1.MTR AS MEANS_OF_TRANSPORT
     FROM :TMP_ROUTE_CONNECTION T1
     INNER JOIN :TMP_POINTS_INTERSECTS_WITH_SCREEN T2 ON (T1.ROUTE_ID = T2.ROUTE_ID
     AND (T1.TO_LOCATION = T2.LOCATION_NAME));     
     
     
     -----------------------------------ADD BY HENRY-------------------------------------------------------
	 LOC_PAIR = 
	   SELECT DISTINCT
	       FROM_LOCATION AS FROM_LOC, 
	       TO_LOCATION   AS TO_LOC, 
	       MEANS_OF_TRANSPORT AS MTR 
       FROM :ROUTE_CONNECTION_TMP;
	     
	 CALL "sap.tm.trp.db.systemmanagement.location::p_query_gps_info"(:LOC_PAIR, GPS_INFO);  
	 
	 
	 ROUTE_CONNECTION  =
	 
	          SELECT  a.*, CASE WHEN b.FROM_LOC IS NULL THEN 0 ELSE 1 END AS HAS_GPS_INFO 
	            FROM  :ROUTE_CONNECTION_TMP a 
	 LEFT OUTER JOIN  :GPS_INFO b
	              ON  a.FROM_LOCATION = b.FROM_LOC
	             AND  a.TO_LOCATION = b.TO_LOC
	             AND  a.MEANS_OF_TRANSPORT = b.MTR;
	 
	 
	 -----------------------------------ADD BY HENRY---------------------------------------------------------
    
     MESSAGE := 'MSG_SUCCESS';	
      
   ELSE    
        POINTS = SELECT NULL AS LOCATION_NAME, NULL AS LONGITUDE, NULL AS LATITUDE, NULL AS WITHIN_FILTER_FLAG,NULL AS TRANSHIPMENT_FLAG FROM DUMMY;  
     
         ROUTES =  SELECT NULL AS ROUTE_ID,NULL AS FROM_LOCATION,NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
              NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE--,NULL AS MEANS_OF_TRANSPORT
              FROM DUMMY WHERE 1 = 0;
              
	     ROUTE_CONNECTION = 
	     SELECT NULL AS ROUTE_ID,NULL AS SEQUENCE,NULL AS FROM_LOCATION,
	     NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
		 NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE,
		 NULL AS MEANS_OF_TRANSPORT,
		 0 AS HAS_GPS_INFO
		 FROM DUMMY WHERE 1 = 0 ;  
		 
		 GPS_INFO = SELECT * FROM "sap.tm.trp.db.systemmanagement.location::t_gps_info" WHERE 1 = 0;  --add by henry
                
     MESSAGE := 'MSG_NETWORK_NOT_EXIST';
     
     OUT_LOCATIONS_XPOS_YPOS_INVALID = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS XPOS,NULL AS YPOS
     FROM DUMMY WHERE 1= 0;
                                                                        
   END IF; 
  

END;
