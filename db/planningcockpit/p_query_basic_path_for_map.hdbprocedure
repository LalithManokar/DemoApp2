PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.planningcockpit::p_query_basic_path_for_map"(
    IN SIM_PLAN_ID BIGINT,
    IN SCENARIO_ID BIGINT,
    IN FROM_LOC_NAME VARCHAR(50),
    IN TO_LOC_NAME VARCHAR(50),
    IN USED_FLAG INTEGER,    
    IN MTR VARCHAR(30),
    IN XMIN DOUBLE, 
    IN XMAX DOUBLE, 
    IN YMIN DOUBLE, 
    IN YMAX DOUBLE, 
    OUT POINTS "sap.tm.trp.db.planningcockpit::tt_points_for_map",
    OUT PATHS "sap.tm.trp.db.planningcockpit::tt_path_for_map",
	OUT PATH_CONNECTION "sap.tm.trp.db.planningcockpit::tt_path_connection_for_map",
	OUT GPS_INFO "sap.tm.trp.db.systemmanagement.location::t_gps_info",
    OUT MESSAGE VARCHAR(200),
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"   
    AS
BEGIN
   DECLARE NETWORK_CODE VARCHAR(50);   
   DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER := 2000;
   DECLARE VAR_LOCATION_NUM INTEGER := 0 ;   
   DECLARE OUT_UUID VARCHAR(32) := SYSUUID;   
   DECLARE IN_POLYGON CLOB; 
   DECLARE USED_FLAG_CHAR VARCHAR(1);   
    

   SELECT MAP(:USED_FLAG,1,'X',0,'','') INTO USED_FLAG_CHAR FROM DUMMY;  
      
   --Get network code:
    CALL "sap.tm.trp.db.planningcockpit::p_get_networkcode_by_simulation_scenario_id"(:SIM_PLAN_ID,:SCENARIO_ID,NETWORK_CODE);
   
   IF NETWORK_CODE <> '' THEN
	
	PATHS_TMP = 
	 SELECT ID AS PATH_ID,FROM_LOCATION,FROM_LONGITUDE,FROM_LATITUDE,
	 TO_LOCATION,TO_LONGITUDE,TO_LATITUDE,MTR AS MEANS_OF_TRANSPORT
	 FROM "sap.tm.trp.routing.db.path::cv_basic_path" (placeholder."$$NETWORK_CODE$$"=>:NETWORK_CODE,
	 PLACEHOLDER."$$FROM_LOCATION$$"=>:FROM_LOC_NAME,
	 PLACEHOLDER."$$TO_LOCATION$$"=>:TO_LOC_NAME, 
	 PLACEHOLDER."$$MTR$$"=>:MTR,PLACEHOLDER."$$USED_ONLY$$" =>:USED_FLAG_CHAR);
	 
   
   --Detail:
   TMP_PATH_CONNECTION =
     SELECT T1.PATH_ID,T1.SEQUENCE,T1.FROM_LOCATION,T1.FROM_LONGITUDE,T1.FROM_LATITUDE,
     T1.TO_LOCATION,T1.TO_LONGITUDE,T1.TO_LATITUDE,T1.DISTANCE,T1.DURATION,T1.STAY_TIME
     FROM "sap.tm.trp.routing.db.dataset::v_path_connection" T1
     INNER JOIN 
     (SELECT DISTINCT PATH_ID FROM :PATHS_TMP ) T2 ON (T1.PATH_ID = T2.PATH_ID);
    
     
     
   --Total Points of the path:
     TMP_POINTS = SELECT DISTINCT PATH_ID,LOCATION_NAME, LONGITUDE, LATITUDE 
            FROM 
            (
	            SELECT PATH_ID,FROM_LOCATION AS LOCATION_NAME,FROM_LONGITUDE  AS LONGITUDE,FROM_LATITUDE AS LATITUDE
	            FROM :TMP_PATH_CONNECTION T1
	            UNION SELECT PATH_ID,TO_LOCATION AS LOCATION_NAME,TO_LONGITUDE AS LONGITUDE,TO_LATITUDE AS LATITUDE
	            FROM :TMP_PATH_CONNECTION T2
            )T3;
     
     /*       
    TEMP_POINTS = SELECT  PATH_ID,LOCATION_NAME, MAP(A.LONGITUDE,NULL,-9999,0,-9999,A.LONGITUDE) AS LONGITUDE,
    MAP(A.LATITUDE,NULL,-9999,0,-9999,A.LATITUDE) AS LATITUDE
    FROM :TMP_POINTS A;
    */
   OUT_LOCATIONS_XPOS_YPOS_INVALID = SELECT  
      T2.ID AS LOCATION_ID,T2.NAME AS LOCATION_NAME, T2.XPOS, T2.YPOS
      FROM (SELECT DISTINCT LOCATION_NAME FROM :TMP_POINTS) T1 
      INNER JOIN "sap.tm.trp.db.semantic.location::v_location" T2 ON (T1.LOCATION_NAME = T2.NAME)
      WHERE (T2.XPOS IS NULL OR T2.YPOS IS NULL) OR (ABS(T2.XPOS) + ABS(T2.YPOS) =0);                 
            
     -- get locations within the location filter(primary location is returned for aggregate location)     	
     CALL "sap.tm.trp.db.planningcockpit::p_get_loc_primaryloc_by_simplanId"(:SIM_PLAN_ID, filter_locations);
      
     
     --Check if the points with the screen:
    /* BOUNDARY_GEO_TEXT= 
		       SELECT T1.PATH_ID, 
					  CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG(CASE WHEN IFNULL(T1.LONGITUDE,0) = 0 AND IFNULL(T1.LATITUDE,0) = 0 THEN '(-9999 -9999)'
		                     			ELSE ',(' || T1.LONGITUDE || ' ' || T1.LATITUDE || ')' END) ,2, 22000000)),')') AS GEOTEXT
		       FROM :TMP_POINTS T1
		       GROUP BY T1.PATH_ID; 
	*/
	BOUNDARY_GEO_TEXT= 
		       SELECT T1.PATH_ID, 
					  CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG( ',(' || T1.LONGITUDE || ' ' || T1.LATITUDE || ')') ,2, 22000000)),')') AS GEOTEXT
		       FROM :TMP_POINTS T1
		       WHERE  (T1.LONGITUDE IS NOT NULL AND T1.LATITUDE IS NOT NULL) AND (ABS(T1.LONGITUDE) + ABS(T1.LATITUDE) > 0)
		       GROUP BY T1.PATH_ID; 
		       
	
    

	 IN_POLYGON := 'Polygon(('||:XMIN||' '||:YMAX||','||:XMAX||' '||:YMAX||','||:XMAX||' '||:YMIN||','||:XMIN||' '||:YMIN||','||:XMIN||' '||:YMAX||'))';
     
     TMP_POINTS_INTERSECTS_WITH_SCREEN = 
	    SELECT T3.PATH_ID,T3.LOCATION_NAME, T3.LONGITUDE, T3.LATITUDE
        FROM :BOUNDARY_GEO_TEXT T1 		
		INNER JOIN :TMP_POINTS T3 ON (T1.PATH_ID = T3.PATH_ID)
		WHERE NEW ST_MultiPoint(TO_VARCHAR(T1.GEOTEXT) ).ST_INTERSECTS(NEW ST_POLYGON(:IN_POLYGON) ) = 1 ; 
              
     DISTINCT_POINTS_WITH_INTERSECTION = SELECT DISTINCT LOCATION_NAME, LONGITUDE, LATITUDE FROM :TMP_POINTS_INTERSECTS_WITH_SCREEN;
     
     SELECT COUNT(1) INTO VAR_LOCATION_NUM FROM :DISTINCT_POINTS_WITH_INTERSECTION;
     
     IF :VAR_LOCATION_NUM > MAX_LOCATION_NUM_ON_MAP THEN 
         POINTS = SELECT NULL AS LOCATION_NAME, NULL AS LONGITUDE, NULL AS LATITUDE, NULL AS WITHIN_FILTER_FLAG FROM DUMMY;  
     
         PATHS =  SELECT NULL AS PATH_ID,NULL AS FROM_LOCATION,NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
              NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE,NULL AS MEANS_OF_TRANSPORT,
              0 AS HAS_GPS_INFO  
              FROM DUMMY WHERE 1 = 0;
              
	     PATH_CONNECTION = 
	     SELECT NULL AS PATH_ID,NULL AS SEQUENCE,NULL AS FROM_LOCATION,
	     NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
		 NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE,
		 NULL AS DISTANCE,NULL AS DURATION,NULL AS STAY_TIME,NULL AS MEANS_OF_TRANSPORT
		 FROM DUMMY WHERE 1 = 0 ;
        
        MESSAGE := 'MSG_TOO_MUCH_DATA_FOR_MAP';
        RETURN;    
     END IF;
     
     ---------------------------------------add by henry------------------------------
      LOC_PAIR = 
	   SELECT DISTINCT
	       FROM_LOCATION AS FROM_LOC, 
	       TO_LOCATION AS TO_LOC, 
	       MEANS_OF_TRANSPORT AS MTR 
       FROM :PATHS_TMP;
	     
	 CALL "sap.tm.trp.db.systemmanagement.location::p_query_gps_info"(:LOC_PAIR, GPS_INFO);
	 
     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue
     -- (just the display part needs to do the exchange, the polygon calculation does not needs to do )
     PATHS = 
	 SELECT PATH_ID,FROM_LOCATION,FROM_LATITUDE AS FROM_LONGITUDE,FROM_LONGITUDE AS FROM_LATITUDE,
	 TO_LOCATION,TO_LATITUDE AS TO_LONGITUDE, TO_LONGITUDE AS TO_LATITUDE, MEANS_OF_TRANSPORT,
	 CASE WHEN b.FROM_LOC IS NULL THEN 0 ELSE 1 END AS HAS_GPS_INFO
	 FROM :PATHS_TMP a 
	 LEFT OUTER JOIN :GPS_INFO b
	 ON a.FROM_LOCATION = b.FROM_LOC
	 AND a.TO_LOCATION = b.TO_LOC
	 AND a.MEANS_OF_TRANSPORT = b.MTR;
	      
     ---------------------------------------add by henry------------------------------
	 
     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue 
     POINTS = SELECT T1.LOCATION_NAME, T1.LATITUDE AS LONGITUDE, T1.LONGITUDE AS LATITUDE, CASE WHEN T2.LOCATION_ID IS NULL THEN 0 ELSE 1 END AS WITHIN_FILTER_FLAG  
              FROM (SELECT DISTINCT LOCATION_NAME, LONGITUDE, LATITUDE FROM :TMP_POINTS_INTERSECTS_WITH_SCREEN) T1
              LEFT OUTER JOIN :filter_locations T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME);  
              
     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue 
     PATH_CONNECTION =
     SELECT T1.PATH_ID,T1.SEQUENCE,T1.FROM_LOCATION, T1.FROM_LATITUDE AS FROM_LONGITUDE, T1.FROM_LONGITUDE AS FROM_LATITUDE,
     T1.TO_LOCATION,T1.TO_LATITUDE AS TO_LONGITUDE, T1.TO_LONGITUDE AS TO_LATITUDE,T1.DISTANCE,T1.DURATION,T1.STAY_TIME,
     T3.MEANS_OF_TRANSPORT
     FROM :TMP_PATH_CONNECTION T1
     INNER JOIN :TMP_POINTS_INTERSECTS_WITH_SCREEN T2 ON (T1.PATH_ID = T2.PATH_ID)
     INNER JOIN :PATHS T3 ON(T1.PATH_ID = T3.PATH_ID);
    
     MESSAGE := 'MSG_SUCCESS';	
      
   ELSE    
     POINTS = SELECT NULL AS LOCATION_NAME, NULL AS LONGITUDE, NULL AS LATITUDE, NULL AS WITHIN_FILTER_FLAG FROM DUMMY WHERE 1 = 0;  
     
     PATHS =  SELECT NULL AS PATH_ID,NULL AS FROM_LOCATION,NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
              NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE,NULL AS MEANS_OF_TRANSPORT,
              0 AS HAS_GPS_INFO
              FROM DUMMY WHERE 1 = 0 ;
              
     PATH_CONNECTION = 
     SELECT NULL AS PATH_ID,NULL AS SEQUENCE,NULL AS FROM_LOCATION,
     NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
	 NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE,
	 NULL AS DISTANCE,NULL AS DURATION,NULL AS STAY_TIME,NULL AS MEANS_OF_TRANSPORT
	 FROM DUMMY WHERE 1 = 0;
	 
	  GPS_INFO = SELECT * FROM "sap.tm.trp.db.systemmanagement.location::t_gps_info" WHERE 1 = 0;
                
     MESSAGE := 'MSG_NETWORK_NOT_EXIST';                                                                  
   END IF; 
  

END;
