PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.planningcockpit::p_query_composite_path_for_map"(
    IN SIM_PLAN_ID BIGINT,
    IN SCENARIO_ID BIGINT,
    IN FROM_LOC_NAME VARCHAR(50),
    IN TO_LOC_NAME VARCHAR(50),
    IN MTR VARCHAR(30),
    IN XMIN DOUBLE, 
    IN XMAX DOUBLE, 
    IN YMIN DOUBLE, 
    IN YMAX DOUBLE, 
    OUT PATHS "sap.tm.trp.db.planningcockpit::tt_composite_paths_for_map",
    OUT PATH_CONNECTION "sap.tm.trp.db.planningcockpit::tt_composite_path_connection_for_map",
    OUT POINTS "sap.tm.trp.db.planningcockpit::tt_points_for_map_with_transhipment",
    OUT GPS_INFO "sap.tm.trp.db.systemmanagement.location::t_gps_info",
    OUT MESSAGE VARCHAR(200),
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"   
    AS
BEGIN
   DECLARE NETWORK_ID BIGINT;   
   DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER := 2000;
   DECLARE VAR_LOCATION_NUM INTEGER := 0 ;   
   DECLARE OUT_UUID VARCHAR(32) := SYSUUID;   
   DECLARE IN_POLYGON CLOB;   
   DECLARE VIEW_TYPE_FULL CHAR := 'F';
  
      
   --Get network code:
    CALL "sap.tm.trp.db.planningcockpit::p_get_networkid_by_simulation_scenario_id"(:SIM_PLAN_ID,:SCENARIO_ID,NETWORK_ID);
   
   IF NETWORK_ID > -1 THEN

   
   CALL "sap.tm.trp.routing.db.path::p_query_composite_path"(
		network_model_id=>:NETWORK_ID,
		view_type=>:VIEW_TYPE_FULL,
		from_location=>:FROM_LOC_NAME,
		to_location=>:TO_LOC_NAME,
    	mtr=>:MTR,
		paths=>SQL_COMPOSITE_PATHS, 
		path_connection=>SQL_COMPOSITE_PATH_CONNECTION); 
    
    TEMP_PATHS = SELECT PATH_ID AS COMPOSITE_PATH_ID,FROM_LOCATION,TO_LOCATION
    FROM :SQL_COMPOSITE_PATHS;
    
   PATHS = SELECT T1.COMPOSITE_PATH_ID,T1.FROM_LOCATION, T2.XPOS AS FROM_LONGITUDE,T2.YPOS AS FROM_LATITUDE,
    T1.TO_LOCATION,T3.XPOS AS TO_LONGITUDE, T3.YPOS AS TO_LATITUDE
    FROM :TEMP_PATHS T1
    LEFT OUTER JOIN "sap.tm.trp.db.semantic.location::v_all_location" T2 ON (T1.FROM_LOCATION = T2.NAME)
	LEFT OUTER JOIN "sap.tm.trp.db.semantic.location::v_all_location" T3 ON (T1.TO_LOCATION = T3.NAME);
	
   --Detail: 
    TMP_COMPOSITE_PATH_CONNECTION =
     SELECT  T1.COMPOSITE_PATH_ID,T1.SEQUENCE,T1.FROM_LOCATION,T1.FROM_LONGITUDE,T1.FROM_LATITUDE,
     T1.TO_LOCATION,T1.TO_LONGITUDE,T1.TO_LATITUDE,T1.MTR 
    FROM  "sap.tm.trp.routing.db.dataset::cv_composite_path_sequence"()T1
    INNER JOIN (
     SELECT DISTINCT COMPOSITE_PATH_ID FROM :PATHS
    )T2 ON (T1.COMPOSITE_PATH_ID = T2.COMPOSITE_PATH_ID )
    ;
   
   
   --Total Points of the composite path:
    TMP_POINTS = SELECT DISTINCT COMPOSITE_PATH_ID,LOCATION_NAME, LONGITUDE, LATITUDE 
            FROM 
            (
	            SELECT COMPOSITE_PATH_ID,FROM_LOCATION AS LOCATION_NAME,FROM_LONGITUDE AS LONGITUDE,FROM_LATITUDE AS LATITUDE 
	            FROM :TMP_COMPOSITE_PATH_CONNECTION T1
	            UNION SELECT COMPOSITE_PATH_ID,TO_LOCATION AS LOCATION_NAME,TO_LONGITUDE AS LONGITUDE,TO_LATITUDE AS LATITUDE
	            FROM :TMP_COMPOSITE_PATH_CONNECTION T2
            )T3;
     
     /*       
    TEMP_POINTS = SELECT  COMPOSITE_PATH_ID,LOCATION_NAME, MAP(A.LONGITUDE,NULL,-9999,0,-9999,A.LONGITUDE) AS LONGITUDE,
    MAP(A.LATITUDE,NULL,-9999,0,-9999,A.LATITUDE) AS LATITUDE
    FROM :TMP_POINTS A;
    */
    OUT_LOCATIONS_XPOS_YPOS_INVALID = SELECT 
      T2.ID AS LOCATION_ID,T2.NAME AS LOCATION_NAME, T2.XPOS, T2.YPOS
      FROM (SELECT DISTINCT LOCATION_NAME FROM :TMP_POINTS) T1 
      INNER JOIN "sap.tm.trp.db.semantic.location::v_location" T2 ON (T1.LOCATION_NAME = T2.NAME)
      WHERE (T2.XPOS IS NULL OR T2.YPOS IS NULL) OR (ABS(T2.XPOS) + ABS(T2.YPOS) =0);   
            
     
     --Check if the points with the screen:
   
	BOUNDARY_GEO_TEXT= 
		       SELECT T1.COMPOSITE_PATH_ID, 
					  CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG(',(' || T1.LONGITUDE || ' ' || T1.LATITUDE || ')') ,2, 22000000)),')') AS GEOTEXT
		       FROM :TMP_POINTS T1
		       WHERE (T1.LONGITUDE IS NOT NULL AND T1.LATITUDE IS NOT NULL) AND (ABS(T1.LONGITUDE) + ABS(T1.LATITUDE) > 0)
		       GROUP BY T1.COMPOSITE_PATH_ID;

	 IN_POLYGON := 'Polygon(('||:XMIN||' '||:YMAX||','||:XMAX||' '||:YMAX||','||:XMAX||' '||:YMIN||','||:XMIN||' '||:YMIN||','||:XMIN||' '||:YMAX||'))';
     
     TMP_POINTS_INTERSECTS_WITH_SCREEN = 
	    SELECT T3.COMPOSITE_PATH_ID,T3.LOCATION_NAME, T3.LONGITUDE, T3.LATITUDE
        FROM :BOUNDARY_GEO_TEXT T1 		
		INNER JOIN :TMP_POINTS T3 ON (T1.COMPOSITE_PATH_ID = T3.COMPOSITE_PATH_ID)
		WHERE NEW ST_MultiPoint(TO_VARCHAR(T1.GEOTEXT) ).ST_INTERSECTS(NEW ST_POLYGON(:IN_POLYGON) ) = 1 ; 
              
     DISTINCT_POINTS_WITH_INTERSECTION = SELECT DISTINCT LOCATION_NAME, LONGITUDE, LATITUDE FROM :TMP_POINTS_INTERSECTS_WITH_SCREEN;
     
     SELECT COUNT(1) INTO VAR_LOCATION_NUM FROM :DISTINCT_POINTS_WITH_INTERSECTION;
     
     IF :VAR_LOCATION_NUM > MAX_LOCATION_NUM_ON_MAP THEN 
         POINTS = SELECT NULL AS LOCATION_NAME, NULL AS LONGITUDE, NULL AS LATITUDE, NULL AS WITHIN_FILTER_FLAG,NULL AS TRANSHIPMENT_FLAG FROM DUMMY;  
     
         PATHS =  SELECT NULL AS COMPOSITE_PATH_ID,NULL AS FROM_LOCATION,NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
              NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE
              FROM DUMMY WHERE 1 = 0;
              
	     PATH_CONNECTION = 
	     SELECT NULL AS COMPOSITE_PATH_ID,NULL AS SEQUENCE,NULL AS FROM_LOCATION,
	     NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
		 NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE,
		 NULL AS MEANS_OF_TRANSPORT,
		 NULL AS HAS_GPS_INFO
		 FROM DUMMY WHERE 1 = 0 ;
        
        MESSAGE := 'MSG_TOO_MUCH_DATA_FOR_MAP';
        RETURN;    
     END IF;
     
     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue
     -- (just the display part needs to do the exchange, the polygon calculation does not needs to do )
     PATHS = 
	 SELECT DISTINCT COMPOSITE_PATH_ID,FROM_LOCATION,FROM_LATITUDE AS FROM_LONGITUDE,FROM_LONGITUDE AS FROM_LATITUDE,
	 TO_LOCATION,TO_LATITUDE AS TO_LONGITUDE, TO_LONGITUDE AS TO_LATITUDE
	 FROM :PATHS;
	 
	 -- get locations within the location filter(primary location is returned for aggregate location)
	 CALL "sap.tm.trp.db.planningcockpit::p_get_loc_primaryloc_by_simplanId"(:SIM_PLAN_ID, filter_locations);
	 
	 --Get the locatoins which is transhipment location: (The location in the SQL_COMPOSITE_PATH_CONNECTION including the start location
	 --and end location and transhipment location. So remove the start and end location should be the transhipment location)
	TRANSHIPMENT_LOCATION =
	SELECT T1.LOCATION 
	FROM  
	(
		SELECT FROM_LOCATION AS LOCATION
		FROM :SQL_COMPOSITE_PATH_CONNECTION 
		UNION SELECT TO_LOCATION AS LOCATOIN
		FROM :SQL_COMPOSITE_PATH_CONNECTION 
	)T1
	LEFT OUTER JOIN (
	 --Get the start location and end location:
	 SELECT FROM_LOCATION AS LOCATION FROM :SQL_COMPOSITE_PATHS
	 UNION SELECT TO_LOCATION AS LOCATION FROM :SQL_COMPOSITE_PATHS
	 )T2 ON (T1.LOCATION = T2.LOCATION)
	WHERE T2.LOCATION IS NULL;
	

     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue 
     POINTS = SELECT 
	        T1.LOCATION_NAME, 
	        T1.LATITUDE AS LONGITUDE, 
	        T1.LONGITUDE AS LATITUDE, 
	        CASE WHEN T2.LOCATION_ID IS NULL THEN 0 ELSE 1 END AS WITHIN_FILTER_FLAG ,
	        MAP(T3.LOCATION,NULL,1,0)  AS TRANSHIPMENT_FLAG
        FROM ( SELECT DISTINCT 
	            LOCATION_NAME, 
	            LONGITUDE, 
	            LATITUDE 
                FROM :TMP_POINTS_INTERSECTS_WITH_SCREEN ) T1
	    LEFT OUTER JOIN :filter_locations T2 
	    ON (T1.LOCATION_NAME = T2.LOCATION_NAME)
	    LEFT OUTER JOIN :TRANSHIPMENT_LOCATION T3 
	    ON (T1.LOCATION_NAME = T3.LOCATION);
              
              
     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue 
  /*   PATH_CONN =
	     SELECT DISTINCT 
		     T1.COMPOSITE_PATH_ID,
		     T1.SEQUENCE,
		     T1.FROM_LOCATION, 
		     T1.FROM_LATITUDE AS FROM_LONGITUDE, 
		     T1.FROM_LONGITUDE AS FROM_LATITUDE,
		     T1.TO_LOCATION,
		     T1.TO_LATITUDE AS TO_LONGITUDE, 
		     T1.TO_LONGITUDE AS TO_LATITUDE,
		     T1.MTR AS MEANS_OF_TRANSPORT
	     FROM :TMP_COMPOSITE_PATH_CONNECTION T1
	     INNER JOIN :TMP_POINTS_INTERSECTS_WITH_SCREEN T2 
	     ON T1.COMPOSITE_PATH_ID = T2.COMPOSITE_PATH_ID 
	     AND (T1.FROM_LOCATION = T2.LOCATION_NAME OR T1.TO_LOCATION = T2.LOCATION_NAME);*/
	     
	 	PATH_CONN =	 SELECT DISTINCT 
		     T1.COMPOSITE_PATH_ID,
		     T1.SEQUENCE,
		     T1.FROM_LOCATION, 
		     T1.FROM_LATITUDE AS FROM_LONGITUDE, 
		     T1.FROM_LONGITUDE AS FROM_LATITUDE,
		     T1.TO_LOCATION,
		     T1.TO_LATITUDE AS TO_LONGITUDE, 
		     T1.TO_LONGITUDE AS TO_LATITUDE,
		     T1.MTR AS MEANS_OF_TRANSPORT
	     FROM :TMP_COMPOSITE_PATH_CONNECTION T1
	     INNER JOIN :TMP_POINTS_INTERSECTS_WITH_SCREEN T2 
	     ON T1.COMPOSITE_PATH_ID = T2.COMPOSITE_PATH_ID 
	     AND (T1.FROM_LOCATION = T2.LOCATION_NAME)
	     UNION
	     SELECT DISTINCT 
		     T1.COMPOSITE_PATH_ID,
		     T1.SEQUENCE,
		     T1.FROM_LOCATION, 
		     T1.FROM_LATITUDE AS FROM_LONGITUDE, 
		     T1.FROM_LONGITUDE AS FROM_LATITUDE,
		     T1.TO_LOCATION,
		     T1.TO_LATITUDE AS TO_LONGITUDE, 
		     T1.TO_LONGITUDE AS TO_LATITUDE,
		     T1.MTR AS MEANS_OF_TRANSPORT
	     FROM :TMP_COMPOSITE_PATH_CONNECTION T1
	     INNER JOIN :TMP_POINTS_INTERSECTS_WITH_SCREEN T2 
	     ON T1.COMPOSITE_PATH_ID = T2.COMPOSITE_PATH_ID 
     AND ( T1.TO_LOCATION = T2.LOCATION_NAME);
	     
	 LOC_PAIR = 
	   SELECT DISTINCT
	       FROM_LOCATION AS FROM_LOC, 
	       TO_LOCATION AS TO_LOC, 
	       MEANS_OF_TRANSPORT AS MTR 
       FROM :PATH_CONN;
	     
	 CALL "sap.tm.trp.db.systemmanagement.location::p_query_gps_info"(:LOC_PAIR, GPS_INFO);
	 
	 PATH_CONNECTION = 
	   SELECT 
	       a.*, 
	       CASE WHEN b.FROM_LOC IS NULL THEN 0 ELSE 1 END AS HAS_GPS_INFO
	     FROM :PATH_CONN AS a
	     LEFT JOIN :GPS_INFO AS b
	     ON a.FROM_LOCATION = b.FROM_LOC
	     AND a.TO_LOCATION = b.TO_LOC
	     AND a.MEANS_OF_TRANSPORT = b.MTR;
	    
     MESSAGE := 'MSG_SUCCESS';	
      
   ELSE    
        POINTS = SELECT NULL AS LOCATION_NAME, NULL AS LONGITUDE, NULL AS LATITUDE, NULL AS WITHIN_FILTER_FLAG,NULL AS TRANSHIPMENT_FLAG FROM DUMMY;  
     
         PATHS =  SELECT NULL AS COMPOSITE_PATH_ID,NULL AS FROM_LOCATION,NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
              NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE--,NULL AS MEANS_OF_TRANSPORT
              FROM DUMMY WHERE 1 = 0;
              
	     PATH_CONNECTION = 
	     SELECT NULL AS COMPOSITE_PATH_ID,NULL AS SEQUENCE,NULL AS FROM_LOCATION,
	     NULL AS FROM_LONGITUDE,NULL AS FROM_LATITUDE,
		 NULL AS TO_LOCATION,NULL AS TO_LONGITUDE,NULL AS TO_LATITUDE,
		 NULL AS MEANS_OF_TRANSPORT,
		 0 AS HAS_GPS_INFO
		 FROM DUMMY WHERE 1 = 0 ;
		 
		 GPS_INFO = SELECT * FROM "sap.tm.trp.db.systemmanagement.location::t_gps_info" WHERE 1 = 0;
                
     MESSAGE := 'MSG_NETWORK_NOT_EXIST';                                                                  
   END IF; 
  

END;
