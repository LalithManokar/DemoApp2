PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.planningcockpit::p_query_basic_connection_for_map"(
    IN SIM_PLAN_ID BIGINT,
    IN SCENARIO_ID BIGINT,
    IN FROM_LOC_NAME VARCHAR(50),
    IN TO_LOC_NAME VARCHAR(50),
    IN USED_FLAG INTEGER,    
    IN MTR VARCHAR(30),
    IN XMIN DOUBLE, 
    IN XMAX DOUBLE, 
    IN YMIN DOUBLE, 
    IN YMAX DOUBLE, 
    OUT CONNECTIONS "sap.tm.trp.db.planningcockpit::tt_connections_for_map",
    OUT POINTS "sap.tm.trp.db.planningcockpit::tt_points_for_map",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT, 
    OUT GPS_INFO "sap.tm.trp.db.systemmanagement.location::t_gps_info",   
    OUT MESSAGE VARCHAR(200),
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"   
    AS
BEGIN
   DECLARE NETWORK_CODE VARCHAR(50);   
   DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER := 2000;
   DECLARE VAR_LOCATION_NUM INTEGER := 0 ;   
   DECLARE OUT_UUID VARCHAR(32) := SYSUUID;   
   DECLARE IN_POLYGON CLOB; 
   DECLARE USED_FLAG_CHAR VARCHAR(1);   
   
   
   TOO_MUCH_LOCATION_FLAG := 0;
   MESSAGE := '';
   
   SELECT MAP(:USED_FLAG,1,'X',0,'','') INTO USED_FLAG_CHAR FROM DUMMY;  
          
   CALL "sap.tm.trp.db.planningcockpit::p_get_networkcode_by_simulation_scenario_id"(:SIM_PLAN_ID,:SCENARIO_ID,NETWORK_CODE);

    
   IF NETWORK_CODE <> '' THEN
   
     TMP_CONNECTIONS =     
          SELECT ID AS CONNECTION_ID, FROM_LOCATION AS FROM_LOCATION_NAME, FROM_LONGITUDE, FROM_LATITUDE,
          TO_LOCATION AS TO_LOCATION_NAME,  TO_LONGITUDE, TO_LATITUDE, MTR AS MEANS_OF_TRANSPORT, DISTANCE, DURATION,
          ACTION, SOURCE, TRANSPORT_COST AS COST, CURRENCY, CARRIERS
          FROM "_SYS_BIC"."sap.tm.trp.routing.db.path/cv_basic_connection"(PLACEHOLDER."$$NETWORK_CODE$$"=>:NETWORK_CODE,
                                                                    PLACEHOLDER."$$FROM_LOCATION$$"=>:FROM_LOC_NAME,
                                                                    PLACEHOLDER."$$TO_LOCATION$$"=>:TO_LOC_NAME,
                                                                    PLACEHOLDER."$$MTR$$"=>:MTR,
                                                                    PLACEHOLDER."$$USED_ONLY$$"=>:USED_FLAG_CHAR);
                                                                       
      TMP_POINTS = 
          SELECT DISTINCT CONNECTION_ID, LOCATION_NAME, LONGITUDE, LATITUDE FROM 
          (
             SELECT CONNECTION_ID, FROM_LOCATION_NAME AS LOCATION_NAME, FROM_LONGITUDE AS LONGITUDE, FROM_LATITUDE AS LATITUDE
             FROM :TMP_CONNECTIONS 
             UNION 
             SELECT CONNECTION_ID, TO_LOCATION_NAME AS LOCATION_NAME, TO_LONGITUDE AS LONGITUDE, TO_LATITUDE AS LATITUDE 
             FROM :TMP_CONNECTIONS 
          );
          
      OUT_LOCATIONS_XPOS_YPOS_INVALID = SELECT 
      T2.ID AS LOCATION_ID,T2.NAME AS LOCATION_NAME, T2.XPOS, T2.YPOS
      FROM (SELECT DISTINCT LOCATION_NAME FROM :TMP_POINTS) T1 
      INNER JOIN "sap.tm.trp.db.semantic.location::v_location" T2 ON (T1.LOCATION_NAME = T2.NAME)
      WHERE (T2.XPOS IS NULL OR T2.YPOS IS NULL) OR (ABS(T2.XPOS) + ABS(T2.YPOS) =0);
          
      /* TEMP_POINTS = SELECT  CONNECTION_ID,LOCATION_NAME, MAP(A.LONGITUDE,NULL,-9999,0,-9999,A.LONGITUDE) AS LONGITUDE,
      MAP(A.LATITUDE,NULL,-9999,0,-9999,A.LATITUDE) AS LATITUDE
      FROM :TMP_POINTS A;
      */
                                                                    
    -- approach 1  (insert into geometry data into phsical table)                                                                    
  	
		       
    BOUNDARY_GEO_TEXT= 
		       SELECT T1.CONNECTION_ID, 
					  CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG( ',(' || T1.LONGITUDE || ' ' || T1.LATITUDE || ')') ,2, 22000000)),')') AS GEOTEXT
		       FROM :TMP_POINTS T1
		       WHERE  (T1.LONGITUDE IS NOT NULL AND T1.LATITUDE IS NOT NULL) AND (ABS(T1.LONGITUDE) + ABS(T1.LATITUDE) > 0)
		       GROUP BY T1.CONNECTION_ID; 
		                           
                                                                    
     INSERT INTO "sap.tm.trp.db.systemmanagement::t_boundary_temp"(ID, GEOTEXT,  UUID)
	     SELECT A.CONNECTION_ID, A.GEOTEXT,:OUT_UUID AS UUID 
	     FROM :BOUNDARY_GEO_TEXT AS A;
	 
	 IN_POLYGON := 'Polygon(('||:XMIN||' '||:YMAX||','||:XMAX||' '||:YMAX||','||:XMAX||' '||:YMIN||','||:XMIN||' '||:YMIN||','||:XMIN||' '||:YMAX||'))';
	 DELETE FROM "sap.tm.trp.db.systemmanagement::t_geo_type.t_polygon" WHERE UUID = :OUT_UUID;
     INSERT INTO  "sap.tm.trp.db.systemmanagement::t_geo_type.t_polygon" VALUES(NEW ST_GEOMETRY(:IN_POLYGON),:OUT_UUID);
     
     -- exchange LONGITUDE and LATITUDE due to the frontend history code issue    
	 CONNECTIONS_TMP = 
	   SELECT CONNECTION_ID, FROM_LOCATION_NAME, FROM_LATITUDE AS FROM_LONGITUDE, FROM_LONGITUDE AS FROM_LATITUDE,
              TO_LOCATION_NAME,  TO_LATITUDE AS TO_LONGITUDE, TO_LONGITUDE AS TO_LATITUDE, MEANS_OF_TRANSPORT, 
              DISTANCE, DURATION, ACTION, SOURCE, COST, CURRENCY, CARRIERS FROM
       (
	    SELECT T3.*
        FROM "sap.tm.trp.db.systemmanagement::t_boundary_temp" T1  
		INNER JOIN "sap.tm.trp.db.systemmanagement::t_geo_type.t_polygon" T2 ON (T1.UUID = T2.UUID AND T1.UUID =  :OUT_UUID )
		INNER JOIN :TMP_CONNECTIONS T3 ON (T1.ID = T3.CONNECTION_ID)
		WHERE T2.GEOMETRY.ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(T1.GEOTEXT) ) )= 1 
	   );   --change for maps
		
	
	-----------------------------------ADD BY HENRY-------------------------------------------------------
	 LOC_PAIR = 
	   SELECT DISTINCT
	       FROM_LOCATION_NAME AS FROM_LOC, 
	       TO_LOCATION_NAME   AS TO_LOC, 
	       MEANS_OF_TRANSPORT AS MTR 
       FROM :CONNECTIONS_TMP;
	     
	 CALL "sap.tm.trp.db.systemmanagement.location::p_query_gps_info"(:LOC_PAIR, GPS_INFO);  
	 
	 
	     CONNECTIONS  =	 
	          SELECT  a.*, CASE WHEN b.FROM_LOC IS NULL THEN 0 ELSE 1 END AS HAS_GPS_INFO 
	            FROM  :CONNECTIONS_TMP a 
	 LEFT OUTER JOIN  :GPS_INFO b
	              ON  a.FROM_LOCATION_NAME = b.FROM_LOC
	             AND  a.TO_LOCATION_NAME = b.TO_LOC
	             AND  a.MEANS_OF_TRANSPORT = b.MTR;
	 -----------------------------------ADD BY HENRY---------------------------------------------------------

  
     -- get locations within the location filter(primary location is returned for aggregate location)     	
     CALL "sap.tm.trp.db.planningcockpit::p_get_loc_primaryloc_by_simplanId"(:SIM_PLAN_ID, filter_locations);
      
     TMP_POINTS2 = 
          SELECT DISTINCT  LOCATION_NAME, LONGITUDE, LATITUDE FROM 
          (
             SELECT CONNECTION_ID, FROM_LOCATION_NAME AS LOCATION_NAME, FROM_LONGITUDE AS LONGITUDE, FROM_LATITUDE AS LATITUDE
             FROM :CONNECTIONS 
             UNION 
             SELECT CONNECTION_ID, TO_LOCATION_NAME AS LOCATION_NAME, TO_LONGITUDE AS LONGITUDE, TO_LATITUDE AS LATITUDE 
             FROM :CONNECTIONS 
          );
     		 	 	            		
     POINTS = SELECT T1.LOCATION_NAME, T1.LONGITUDE, T1.LATITUDE, CASE WHEN T2.LOCATION_ID IS NULL THEN 0 ELSE 1 END AS WITHIN_FILTER_FLAG  
              FROM (SELECT DISTINCT LOCATION_NAME, LONGITUDE, LATITUDE FROM :TMP_POINTS2) T1
              LEFT OUTER JOIN :filter_locations T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME); 
              
     SELECT COUNT(1) INTO VAR_LOCATION_NUM FROM :POINTS;
     
     IF :VAR_LOCATION_NUM > MAX_LOCATION_NUM_ON_MAP THEN 
       CONNECTIONS = 
             SELECT NULL AS CONNECTION_ID, NULL AS FROM_LOCATION_NAME, NULL AS FROM_LONGITUDE, NULL AS FROM_LATITUDE,  
             NULL AS TO_LOCATION_NAME, NULL AS TO_LONGITUDE, NULL AS TO_LATITUDE, NULL AS MEANS_OF_TRANSPORT, NULL AS DISTANCE,
             NULL AS DURATION,  NULL AS ACTION, NULL AS SOURCE, NULL AS COST, NULL AS CURRENCY, NULL AS CARRIERS,0 AS HAS_GPS_INFO
             FROM DUMMY WHERE 1 = 0 ;
             
       POINTS = SELECT NULL AS LOCATION_NAME, NULL AS LONGITUDE, NULL AS LATITUDE, NULL AS WITHIN_FILTER_FLAG FROM DUMMY WHERE 1 = 0;
       
       TOO_MUCH_LOCATION_FLAG := 1;    
       MESSAGE := 'MSG_TOO_MUCH_DATA_FOR_MAP';    
     END IF;            
    
     MESSAGE := 'MSG_SUCCESS_STATUS';	                                                                          
   ELSE 
   
     CONNECTIONS = 
             SELECT NULL AS CONNECTION_ID, NULL AS FROM_LOCATION_NAME, NULL AS FROM_LONGITUDE, NULL AS FROM_LATITUDE,  
             NULL AS TO_LOCATION_NAME, NULL AS TO_LONGITUDE, NULL AS TO_LATITUDE, NULL AS MEANS_OF_TRANSPORT, NULL AS DISTANCE,
             NULL AS DURATION,  NULL AS ACTION, NULL AS SOURCE, NULL AS COST, NULL AS CURRENCY, NULL AS CARRIERS,0 AS HAS_GPS_INFO
             FROM DUMMY WHERE 1 = 0;
             
     POINTS = SELECT NULL AS LOCATION_NAME, NULL AS LONGITUDE, NULL AS LATITUDE, NULL AS WITHIN_FILTER_FLAG FROM DUMMY WHERE 1 = 0 ;       
     
     GPS_INFO = SELECT * FROM "sap.tm.trp.db.systemmanagement.location::t_gps_info" WHERE 1 = 0;  --add by henry
     
     MESSAGE := 'MSG_NETWORK_NOT_EXIST';                                                                  
   END IF; 


END;
