PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.planningcockpit::p_get_storage_cost_for_scenario"    
    ( IN SIMULATION_PLAN_ID BIGINT,
      IN SCENARIO_ID BIGINT,      
      OUT STORAGE_COST DOUBLE ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"   
	AS
BEGIN
   DECLARE V_COST_MODEL_ID BIGINT := -1;
   DECLARE V_SD_PLAN_MODEL_ID BIGINT := -1;
   DECLARE V_START_TIME TIMESTAMP;
   DECLARE V_END_TIME TIMESTAMP;
   DECLARE V_RESOURCE_CATEGORY_TYPE VARCHAR(10);
   DECLARE V_RESOURCE_CATEGORY VARCHAR(50);
   
   --get resource_category_type
   
   
       SELECT  T2.RESOURCE_CATEGORY_TYPE, T1.RESOURCE_CATEGORY INTO V_RESOURCE_CATEGORY_TYPE,V_RESOURCE_CATEGORY
         FROM  "sap.tm.trp.db.planningcockpit::t_simulation_plan" T1
   INNER JOIN  "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings" T2 
           ON  T1.RESOURCE_CATEGORY= T2.CODE
        WHERE  T1.ID = :SIMULATION_PLAN_ID ;
   

 --Get cost model ID
 SELECT IFNULL(MAX(T2.MANDATORY_COST_MODEL_ID),-1) INTO V_COST_MODEL_ID
 FROM "sap.tm.trp.db.planningcockpit::t_simulation_plan" T1
 INNER JOIN "sap.tm.trp.db.planningcockpit::t_network_setting_group" T2 ON (T1.NETWORK_SETTING_GROUP_ID = T2.ID)
 INNER JOIN "sap.tm.trp.db.planningcockpit::t_scenario" T3 ON (T1.ID = T3.REL_SM_PLAN_ID)
 WHERE T3.ID = :SCENARIO_ID;
 
 
 
  
   SELECT IFNULL(MAX(SD_PLAN_ID),-1) INTO V_SD_PLAN_MODEL_ID
   FROM "sap.tm.trp.db.planningcockpit::t_simulation_plan"
   WHERE ID = :SIMULATION_PLAN_ID ;
   
   --Get the supply demand of the scenario
  CALL  "sap.tm.trp.db.planningcockpit::p_prepare_sd_initial_stock" (:SIMULATION_PLAN_ID, :SCENARIO_ID, :V_SD_PLAN_MODEL_ID,SQL_SUPPLY_DEMAND,SQL_INITAL_STOCK);  
    
    SQL_INITAL_STOCK2 = SELECT LOCATION_NAME,RESOURCE_TYPE,INIT_STOCK AS INITIAL_STOCK
     FROM :SQL_INITAL_STOCK WHERE INIT_STOCK >0;
    
  
   
   --Get the start and end date time of the supply demand:
   SELECT MIN(START_TIME) AS MIN_START_TIME,MAX(END_TIME) AS MAX_END_TIME
   INTO  V_START_TIME,V_END_TIME
    FROM :SQL_SUPPLY_DEMAND T1;
    
    
   --Get the storage_cost
   LOCATION_EQUIP_INFO = SELECT DISTINCT LOCATION AS LOCATION_NAME,CONTAINER_TYPE AS RESOURCE_TYPE FROM :SQL_SUPPLY_DEMAND;
   
   CALL "sap.tm.trp.db.costmodel::sp_query_storage_cost_info"(
   :V_COST_MODEL_ID,
   :V_START_TIME,
   :V_END_TIME,
   :LOCATION_EQUIP_INFO,
   OUT_TIMEBASE_COST_RATING,
   OUT_QUABASE_COST_RATING,
   REFRESH_DATE_LIST
   );
 

-- For the supply demand that have cost info in OUT_QUABASE_COST_RATING is neecd to calculate the quantity based cost:
  SQL_SUPPLY_DEMAND_FOR_QUANTITY_BASED = SELECT T2.LOCATION_NAME,T2.RESOURCE_TYPE,T1.SUPPLY,T1.DEMAND,T1.START_TIME,T1.END_TIME
  FROM :SQL_SUPPLY_DEMAND T1
  INNER JOIN (SELECT DISTINCT LOCATION_NAME,RESOURCE_TYPE FROM :OUT_QUABASE_COST_RATING ) T2 ON (T1.LOCATION = T2.LOCATION_NAME AND T1.CONTAINER_TYPE = T2.RESOURCE_TYPE);
 
  SQL_SUPPLY_DEMAND_FOR_TIME_BASED = SELECT T2.LOCATION_NAME,T2.RESOURCE_TYPE,T1.SUPPLY,T1.DEMAND,T1.START_TIME,T1.END_TIME 
  FROM :SQL_SUPPLY_DEMAND T1
  INNER JOIN (SELECT DISTINCT LOCATION_NAME,RESOURCE_TYPE FROM :OUT_TIMEBASE_COST_RATING )T2 ON (T1.LOCATION = T2.LOCATION_NAME AND T1.CONTAINER_TYPE = T2.RESOURCE_TYPE)
  WHERE (T1.SUPPLY >0 OR T1.DEMAND >0);
    
    
  PREVOIUS_REFRESH_DATE_LIST =  SELECT LOCATION_NAME,RESOURCE_TYPE,MIN(REFRESH_DATE) AS REFRESH_DATE
  FROM :REFRESH_DATE_LIST 
  GROUP BY LOCATION_NAME,RESOURCE_TYPE;
   
    
   -------------------------Following to get the Initial TEU of the previous refresh time  -------------------------------------------

  CALL "sap.tm.trp.db.planningcockpit::p_calculate_stock_within_time_range" (:PREVOIUS_REFRESH_DATE_LIST,:V_START_TIME,:V_RESOURCE_CATEGORY_TYPE,:V_RESOURCE_CATEGORY,PREVIOUS_REFRESH_DATE_ALL_WITH_TEU);
  
 
   --UNION monthly weekly and daily with previous refresh time and TEU info:
   REFRESH_DATE_ALL = SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,T1.REFRESH_DATE,IFNULL(T2.INITIAL_TEU,0) AS INITIAL_TEU
   FROM :REFRESH_DATE_LIST T1
   LEFT OUTER JOIN :PREVIOUS_REFRESH_DATE_ALL_WITH_TEU T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME 
   AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE AND 
   T1.REFRESH_DATE = T2.REFRESH_DATE);
   

  
  -------------------------------- Refresh Date and Get_in_out Date List ------------------------------------
 
  
   --Calculate the middle date of the start time and the end time of each time interval of the supply demand as the C_DATE of the get in out time list:
   GET_IN_OUT_TIME_LIST = SELECT C_DATE,LOCATION_NAME,RESOURCE_TYPE,DELTA_STOCK
  FROM
  (
	   --Note: the first initial_stock = the stock of the start date. 
	  SELECT GET_IN_OUT_DATE_AND_SD_INFO.LOCATION_NAME,GET_IN_OUT_DATE_AND_SD_INFO.RESOURCE_TYPE,
	   GET_IN_OUT_DATE_AND_SD_INFO.GET_IN_OUT_TIME AS C_DATE,GET_IN_OUT_DATE_AND_SD_INFO.DELTA_STOCK,
	   0 AS INITIAL_TEU
	  FROM (
	          SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,
			  ADD_DAYS(T1.START_TIME,FLOOR(DAYS_BETWEEN(T1.START_TIME,T1.END_TIME)/2)) AS GET_IN_OUT_TIME,
			  (T1.SUPPLY - T1.DEMAND) AS DELTA_STOCK
			  FROM :SQL_SUPPLY_DEMAND_FOR_QUANTITY_BASED T1
			  UNION ALL
			   --Append the start date as the first Get_in_get_out:
			  SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,T1.START_TIME AS GET_IN_OUT_TIME,IFNULL(T2.INITIAL_STOCK,0) AS DELTA_STOCK
			  FROM :SQL_SUPPLY_DEMAND_FOR_QUANTITY_BASED T1
			  LEFT OUTER JOIN :SQL_INITAL_STOCK2 T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE)
			  WHERE T1.START_TIME = :V_START_TIME
			  --Append the end date as the last Get_in_get_out:
			  UNION ALL 
			  SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,T1.END_TIME AS GET_IN_OUT_TIME,0 AS DELTA_STOCK
			  FROM :SQL_SUPPLY_DEMAND_FOR_QUANTITY_BASED T1
			  WHERE T1.END_TIME = :V_END_TIME
	  
	  ) AS GET_IN_OUT_DATE_AND_SD_INFO 
  )T3;
   
    
  GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO_AND_ID = 
  SELECT ROW_NUMBER () OVER(PARTITION BY T0.LOCATION_NAME,T0.RESOURCE_TYPE ORDER BY T0.C_DATE ASC) AS ID,
  T0.C_DATE,T0.LOCATION_NAME,T0.RESOURCE_TYPE,
  IFNULL(GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO.CURRENT_STOCK,0)AS CURRENT_STOCK,
  IFNULL(GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO.PREVIOUS_STOCK,0) AS PREVIOUS_STOCK
 FROM :GET_IN_OUT_TIME_LIST T0
  LEFT OUTER JOIN
  (
          --Get stock info for all time list info:
            --Calculate the current stock (Agg_stock): the current stock = initial_stock + get all the records which the date <= the specific date of the record and sum all the related delta_stock
          SELECT T1.C_DATE,T1.LOCATION_NAME,T1.RESOURCE_TYPE,
		  SUM(IFNULL(T2.DELTA_STOCK,0)) AS CURRENT_STOCK,
		  SUM(IFNULL(T2.DELTA_STOCK,0)) - T1.DELTA_STOCK AS PREVIOUS_STOCK
          FROM :GET_IN_OUT_TIME_LIST T1
          LEFT OUTER JOIN :GET_IN_OUT_TIME_LIST T2 
		 ON (T1.LOCATION_NAME = T2.LOCATION_NAME  AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE  AND T2.C_DATE <= T1.C_DATE )
		  GROUP BY T1.C_DATE,T1.LOCATION_NAME,T1.RESOURCE_TYPE,T1.DELTA_STOCK
  ) AS GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO ON (T0.LOCATION_NAME = GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO.LOCATION_NAME
  AND T0.RESOURCE_TYPE = GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO.RESOURCE_TYPE AND T0.C_DATE = GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO.C_DATE);

  
    GET_IN_OUT_TIME_LIST_WITH_GROUP = SELECT T0.ID,T0.C_DATE,T0.LOCATION_NAME,T0.RESOURCE_TYPE,
   T0.CURRENT_STOCK, T0.PREVIOUS_STOCK,
   T0.PREVIOUS_C_DATE_TO_CURRENT_C_DATE_NUM, T0.DELTA_TEU,T2.GROUP_DATE
  FROM (
         --Calculate the stock and delta teu info
			  SELECT T3.ID,T3.C_DATE,T3.LOCATION_NAME,T3.RESOURCE_TYPE,
			 T3.CURRENT_STOCK, T3.PREVIOUS_STOCK,T3.PREVIOUS_C_DATE_TO_CURRENT_C_DATE_NUM,
			 IFNULL(T3.DELTA_TEU,T4.INITIAL_TEU) AS DELTA_TEU
			  FROM
			   (
				   SELECT T2.ID,T2.C_DATE,T2.LOCATION_NAME,T2.RESOURCE_TYPE,
				  T2.CURRENT_STOCK, T2.PREVIOUS_STOCK,DAYS_BETWEEN(T1.C_DATE , T2.C_DATE) AS PREVIOUS_C_DATE_TO_CURRENT_C_DATE_NUM,
				  T2.PREVIOUS_STOCK * DAYS_BETWEEN(T1.C_DATE , T2.C_DATE) AS DELTA_TEU
				  FROM :GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO_AND_ID T2
				  LEFT OUTER JOIN :GET_IN_OUT_TIME_LIST_WITH_STOCK_INFO_AND_ID T1 ON (T2.LOCATION_NAME = T1.LOCATION_NAME AND 
				  T2.RESOURCE_TYPE = T1.RESOURCE_TYPE AND T2.ID = T1.ID +1)
			  )T3
			 LEFT OUTER JOIN :PREVIOUS_REFRESH_DATE_ALL_WITH_TEU T4 ON (T3.LOCATION_NAME = T4.LOCATION_NAME AND T3.RESOURCE_TYPE = T4.RESOURCE_TYPE AND T3.ID =1)  
          ) T0
         
  LEFT OUTER JOIN
   (   --Calculate the group date for each time list info:
	   SELECT T1.C_DATE,T1.LOCATION_NAME,T1.RESOURCE_TYPE,MAX(T2.REFRESH_DATE) AS GROUP_DATE
       FROM :GET_IN_OUT_TIME_LIST T1
	   INNER JOIN :REFRESH_DATE_ALL T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE  AND T2.REFRESH_DATE <= T1.C_DATE  )                                             
	   GROUP BY T1.C_DATE,T1.LOCATION_NAME,T1.RESOURCE_TYPE
  )T2 ON (T0.C_DATE = T2.C_DATE AND T0.LOCATION_NAME = T2.LOCATION_NAME AND T0.RESOURCE_TYPE = T2.RESOURCE_TYPE);
 
  
   
  --Calculate AGG TEU group by group DATE
  GET_IN_OUT_TIME_LIST_WITH_AGG_TEU = 
  SELECT T1.ID, T1.C_DATE,T1.LOCATION_NAME,T1.RESOURCE_TYPE,
  IFNULL(T2.AGG_TEU,0) AS AGG_TEU,T1.GROUP_DATE
  FROM :GET_IN_OUT_TIME_LIST_WITH_GROUP T1
  LEFT OUTER JOIN
  (
	  SELECT T2.ID,T2.C_DATE,T2.GROUP_DATE, T2.LOCATION_NAME,T2.RESOURCE_TYPE,IFNULL(SUM(IFNULL(T1.DELTA_TEU,0)),0) AS AGG_TEU
	  FROM :GET_IN_OUT_TIME_LIST_WITH_GROUP T1
	  INNER JOIN :GET_IN_OUT_TIME_LIST_WITH_GROUP T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE AND 
	  T1.GROUP_DATE = T2.GROUP_DATE AND T1.C_DATE <=T2.C_DATE)
	  GROUP BY T2.ID,T2.C_DATE,T2.GROUP_DATE,T2.LOCATION_NAME,T2.RESOURCE_TYPE
  )T2 ON (T1.ID = T2.ID AND T1.C_DATE = T2.C_DATE AND T1.LOCATION_NAME = T2.LOCATION_NAME AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE AND T1.GROUP_DATE = T2.GROUP_DATE); 
  

--***********************************************************


--Get the AGG_Cost:
QUANTITY_AGG_COST =
		SELECT T1.ID,T1.GROUP_DATE,T1.LOCATION_NAME,T1.RESOURCE_TYPE,SUM(IFNULL(T2.PER_DIEM_COST,0)) AS AGG_TEU_COST
		FROM :GET_IN_OUT_TIME_LIST_WITH_AGG_TEU T1
		INNER JOIN :OUT_QUABASE_COST_RATING T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
		AND T1.AGG_TEU >= T2.SEQ)
		GROUP BY T1.ID,T1.GROUP_DATE,T1.LOCATION_NAME,T1.RESOURCE_TYPE;
	

  
  QUANTITY_COST_OF_THE_SCENARIO =
	SELECT SUM(IFNULL(T_QUANTITY_COST.COST,0)) AS TOTAL_QUANTITY_BASED_COST
	FROM (  
            --******  Cost_of_each_time = AGG_TEU_COST - Previous_AGG_TEU_COST:
		     SELECT T1.ID,T1.LOCATION_NAME, T1.RESOURCE_TYPE,(T1.AGG_TEU_COST - IFNULL(T2.AGG_TEU_COST,0)) AS COST
	         FROM :QUANTITY_AGG_COST T1
	         LEFT OUTER JOIN :QUANTITY_AGG_COST T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
	         AND T1.GROUP_DATE = T2.GROUP_DATE
	         AND T1.ID = T2.ID +1 )
	   )T_QUANTITY_COST
	   --Should remove the cost which Id =1. Becuase it is the cost of the initial TEU(from previous refresh date to min start time. the cost should be wilthin min start time and max end time)
	   WHERE T_QUANTITY_COST.ID >1; 


--------------=========================Time based storage cost ==============------------------


   GET_IN_OUT_DATE_OF_TIME_BASED = SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,
   T1.SUPPLY AS GET_IN_NUM,T1.DEMAND AS GET_OUT_NUM,
  ADD_DAYS(T1.START_TIME,FLOOR(DAYS_BETWEEN(T1.START_TIME,T1.END_TIME)/2)) AS GET_IN_OUT_TIME
 -- FROM :SQL_SUPPLY_DEMAND2 T1
 FROM :SQL_SUPPLY_DEMAND_FOR_TIME_BASED T1
  UNION ALL
   --Append the start date as the first Get_in_get_out:
  SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,INITIAL_STOCK AS GET_IN_NUM, 0 AS GET_OUT_NUM,T1.START_TIME AS GET_IN_OUT_TIME
  --FROM :SQL_SUPPLY_DEMAND2 T1
  FROM :SQL_SUPPLY_DEMAND_FOR_TIME_BASED T1
  INNER JOIN :SQL_INITAL_STOCK2 T2 ON(T1.LOCATION_NAME = T2.LOCATION_NAME AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE)
  WHERE T1.START_TIME = :V_START_TIME
  --Append the end date as the last Get_in_get_out:
  UNION ALL 
  SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,0 AS GET_IN_NUM, 0 AS GET_OUT_NUM,
  T1.END_TIME AS GET_IN_OUT_TIME
  --FROM :SQL_SUPPLY_DEMAND2 T1
  FROM :SQL_SUPPLY_DEMAND_FOR_TIME_BASED T1
  WHERE T1.END_TIME = :V_END_TIME;
  
  
  --Give a sequence number for each stock number as the resource ID for each stock. 
  GET_IN_DATE_OF_TIME_BASED = 
  SELECT ROW_NUMBER() OVER(PARTITION BY T3.LOCATION_NAME,T3.RESOURCE_TYPE ORDER BY T3.GET_IN_TIME,T3.ID) AS RESOURCE_ID,
  T3.LOCATION_NAME,T3.RESOURCE_TYPE,T3.GET_IN_TIME
  FROM
  (  --IN EACH GET_IN_TIME , GIVE THE RECORDS WITH THE SAME GET_IN_TIME A SEQUENCE NUMBER, THE SEQUENCE NUMBER WILL START FROM 1, 
     --FOR ANOTHER GET_IN_TIME,The sequence number be given will also start from 1.
	  SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,
	  T1.GET_IN_NUM,T1.GET_IN_OUT_TIME AS GET_IN_TIME,T2.ID
	  FROM :GET_IN_OUT_DATE_OF_TIME_BASED T1,
	  "sap.tm.trp.db.planningcockpit::t_sequence" T2
	  WHERE T1.GET_IN_NUM >= T2.ID
  )T3;
  
  GET_OUT_DATE_OF_TIME_BASED = 
  SELECT ROW_NUMBER() OVER(PARTITION BY T3.LOCATION_NAME,T3.RESOURCE_TYPE ORDER BY T3.GET_OUT_TIME,T3.ID) AS RESOURCE_ID,
  T3.LOCATION_NAME,T3.RESOURCE_TYPE,T3.GET_OUT_TIME
  FROM
  (  --IN EACH GET_IN_TIME , GIVE THE RECORDS WITH THE SAME GET_IN_TIME A SEQUENCE NUMBER, THE SEQUENCE NUMBER WILL START FROM 1, 
     --FOR ANOTHER GET_IN_TIME,The sequence number be given will also start from 1.
	  SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,
	  T1.GET_OUT_NUM,T1.GET_IN_OUT_TIME AS GET_OUT_TIME,T2.ID
	  FROM :GET_IN_OUT_DATE_OF_TIME_BASED T1,
	  "sap.tm.trp.db.planningcockpit::t_sequence" T2
	   WHERE T1.GET_OUT_NUM >= T2.ID
  )T3;
  
  --Get duration for each resource id at each location
  
   GET_IN_OUT_DURATION_FOR_EACH_RESOURCE =
   SELECT LOCATION_NAME,RESOURCE_TYPE,RESOURCE_ID,CASE WHEN DAY_DURATION <=0 THEN 0 ELSE DAY_DURATION END AS DAY_DURATION
   FROM 
   (
	  SELECT T1.LOCATION_NAME,T1.RESOURCE_TYPE,T1.RESOURCE_ID,CASE WHEN T2.RESOURCE_ID IS NOT NULL THEN 
	  DAYS_BETWEEN(GET_IN_TIME,GET_OUT_TIME) ELSE DAYS_BETWEEN(GET_IN_TIME,:V_END_TIME) END AS DAY_DURATION
	  FROM :GET_IN_DATE_OF_TIME_BASED T1
	  LEFT OUTER JOIN :GET_OUT_DATE_OF_TIME_BASED T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE
	  AND T1.RESOURCE_ID = T2.RESOURCE_ID --AND T1.GET_IN_TIME <= T2.GET_OUT_TIME
	  )
  );
 
  
  --Calculate cost for each resource id accroding to time based cost flat table
  
 TIME_COST_OF_THE_SCENARIO = SELECT SUM(T2.PER_DIEM_COST) AS TOTAL_TIME_BASED_COST 
  FROM :GET_IN_OUT_DURATION_FOR_EACH_RESOURCE T1
  INNER JOIN :OUT_TIMEBASE_COST_RATING  T2 ON (T1.LOCATION_NAME = T2.LOCATION_NAME 
  AND T1.RESOURCE_TYPE = T2.RESOURCE_TYPE AND T1.DAY_DURATION >= T2.SEQ);

  
  
   SELECT IFNULL(MAX(T3.TOTAL_STORAGE_COST),0) INTO STORAGE_COST
   FROM                
  (
  SELECT IFNULL(T1.TOTAL_QUANTITY_BASED_COST,0) +  IFNULL(TOTAL_TIME_BASED_COST,0) AS TOTAL_STORAGE_COST
  FROM :QUANTITY_COST_OF_THE_SCENARIO T1,:TIME_COST_OF_THE_SCENARIO T2
  )T3;   
  
  
             
END