PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.massupload::p_ext_pickup_return_ruleset_save" (
    IN CONNECTION_ID VARCHAR(100),
    IN RESOURCE_CATEGORY_ID VARCHAR(20),
    OUT SCHEDULE_DETAILS "sap.tm.trp.db.massupload::tt_pickup_return_ruleset_schedule",
    OUT EXECUTION_RESULTS "sap.tm.trp.db.massupload::tt_massupload_execution_result"
)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	DEFAULT SCHEMA "SAP_TM_TRP"
AS
BEGIN
  DECLARE V_USER_ID BIGINT;
  DECLARE V_SPRAS VARCHAR(10);
  DECLARE V_TIMESTAMP_START  DATETIME  := CURRENT_UTCTIMESTAMP;
  DECLARE V_AFFECTED_ROWS INTEGER;


  DECLARE MINUTES VARCHAR(20) := 'MINUTES';
  DECLARE HOURS VARCHAR(20) := 'HOURS';
  DECLARE DAYS VARCHAR(20) := 'DAYS';
  DECLARE WEEKS VARCHAR(20) := 'WEEKS';
  DECLARE NONE_OPTI VARCHAR(20) := 'NONE';
  DECLARE COST_BASED VARCHAR(20) := 'COST-BASED';
  DECLARE BOTH_COST_AND_BALANCING VARCHAR(60) := 'BOTH COST-BASED AND BALANCING-BASED';
  DECLARE SCHEDULE_MANUAL VARCHAR(20) := 'MANUAL';
  DECLARE SCHEDULE_SCHEDULED VARCHAR(20) := 'SCHEDULED';
  DECLARE LOCATION_DETERMINATION_RULE VARCHAR(50) := 'LOCATION DETERMINATION RULE';
  DECLARE OPTIMIZATION VARCHAR(50) := 'AUTOMATIC OPTIMIZATION';
  DECLARE BOTH_RULE_OPTI VARCHAR(60) := 'LOCATION DETERMINATION RULE AND AUTOMATIC OPTIMIZATION';

  DECLARE PLAN_SD SMALLINT := 1;
  DECLARE PLAN_VSD SMALLINT := 3;
  CALL "sap.tm.trp.db.systemmanagement.user::p_get_current_user_id"(V_USER_ID);

  SELECT IFNULL ( MAX (SPRAS),'') INTO V_SPRAS FROM "sap.tm.trp.db.semantic.common::v_lang_code";

  /*
  SOURCE =
		SELECT
		 CASE WHEN RULESET.ID IS NULL
		         THEN "sap.tm.trp.db.pickupreturn::s_location_rule".NEXTVAL
		      ELSE RULESET.ID
		 END AS ID,
		 CASE WHEN RULESET.ID IS NULL THEN 0 ELSE 1
		 END AS IF_UPDATE,
		 UPPER(A.RULE_NAME) AS CODE, UPPER(A.RULE_NAME) AS RULE_NAME,
		 :V_SPRAS AS SPRAS, A.DESC,

		 MAP(UPPER(A.RULE_TYPE_NAME),'RETURN',2,1) AS RULE_TYPE,
		 MAP(UPPER(A.ALLOWED_USAGE),'PERSONAL','P','G') AS ALLOWED_USAGE,

		 CASE WHEN UPPER(A.TIME_UNIT_NAME) = :HOURS THEN A.DUE_TO*3600
		      WHEN UPPER(A.TIME_UNIT_NAME) = :DAYS  THEN A.DUE_TO*3600*24
		      WHEN UPPER(A.TIME_UNIT_NAME) = :WEEKS THEN A.DUE_TO*3600*24*7
		 END AS TIME_RANGE,
		 CASE WHEN UPPER(A.TIME_UNIT_NAME) = :HOURS THEN 1
		      WHEN UPPER(A.TIME_UNIT_NAME) = :DAYS  THEN 2
		      WHEN UPPER(A.TIME_UNIT_NAME) = :WEEKS THEN 3
		 END AS TIME_RANGE_UINT,
		 RF.ID AS EQUIP_FILTER_ID, LF.ID AS LOCATION_FILTER_ID,
		 SDPLAN.ID AS SD_PLAN_ID, 0 AS COST_MODEL_ID,

		 MAP(UPPER(A.SCHEDULE_TYPE_NAME), :SCHEDULE_SCHEDULED, 1, 0) AS SCHEDULE_TIME_TYPE,

		 CASE WHEN UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED
		 			THEN TO_INTEGER(A.EXECUTE_INTERVAL_NAME)
	     END AS EXECUTE_INTERVAL,

		 CASE WHEN UPPER(A.EXECUTE_TIME_UINT_NAME) =  :MINUTES THEN 'MINUTE'
		 	  WHEN UPPER(A.EXECUTE_TIME_UINT_NAME) =  :HOURS  THEN 'HOUR'
		 	  WHEN UPPER(A.EXECUTE_TIME_UINT_NAME) =  :DAYS THEN 'DAY'
		 END AS EXECUTE_TIME_UINT,
		 0 AS  EXECUTE_DAY,

		 CASE WHEN UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED
		 	       THEN TO_TIMESTAMP(A.START_DATE_TIME)
		 END AS START_DATETIME,
		  CASE WHEN UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED
		        THEN TO_TIMESTAMP(A.END_DATE_TIME)
		  END AS END_DATETIME,

		 CASE WHEN UPPER(A.OP_SETTING_NAME) = :LOCATION_DETERMINATION_RULE THEN 1
		 	  WHEN UPPER(A.OP_SETTING_NAME) = :OPTIMIZATION THEN 2
		 	  WHEN UPPER(A.OP_SETTING_NAME) = :BOTH_RULE_OPTI THEN 3
		 	  WHEN UPPER(A.OP_SETTING_NAME) = :NONE_OPTI THEN 4
		 END AS OP_SETTING_TYPE,

		 CASE WHEN UPPER(A.OP_SETTING_NAME) IN (:LOCATION_DETERMINATION_RULE, :BOTH_RULE_OPTI)
		 	    THEN LOCDET_RULE.RULE_ID
		 END AS LOCATION_DETERMIN_ID,

		 CASE WHEN UPPER(A.OP_SETTING_NAME) IN (:OPTIMIZATION, :BOTH_RULE_OPTI)
		 		    AND UPPER(A.OPTIMIZATION_NAME) = :COST_BASED THEN 1
		      WHEN UPPER(A.OP_SETTING_NAME) IN (:OPTIMIZATION, :BOTH_RULE_OPTI)
		            AND UPPER(A.OPTIMIZATION_NAME) = :BOTH_COST_AND_BALANCING THEN 3
		 END AS OPTIMIZATION,

		 CASE WHEN RULESET.ID IS NULL THEN :V_USER_ID
		        ELSE RULESET.CREATE_BY
		 END AS CREATE_BY,

		  CASE WHEN RULESET.ID IS NULL THEN :V_TIMESTAMP_START
		        ELSE RULESET.CREATE_ON
		 END AS CREATE_ON,

		 CASE WHEN RULESET.ID IS NOT NULL AND RULESET.SCHEDULE_TIME_TYPE = 1
		 	     AND UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED
		          THEN 'JOB_UPDATE'
		      WHEN RULESET.ID IS NOT NULL AND RULESET.SCHEDULE_TIME_TYPE = 1
		        AND UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_MANUAL
		         THEN 'JOB_CANCEL'
		      WHEN RULESET.ID IS NOT NULL AND RULESET.SCHEDULE_TIME_TYPE = 0
		          AND UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED
		          THEN 'JOB_CREATE'
		      WHEN RULESET.ID IS NULL
		      	 AND UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED
		         THEN 'JOB_CREATE'
		      ELSE ''
		 END AS JOB_ACTION,

		  :V_USER_ID AS MODIFIED_BY, :V_TIMESTAMP_START AS MODIFIED_ON,
		 0 AS STATUS,
		 CASE WHEN UPPER(EXCLUDE_YES_OR_NO) = 'YES' THEN 1 ELSE 0
		 END AS FILTER_EXECUTION,

		 EXCLUSIVE_RULE.ID AS EXCLUSIVE_RULE_ID,
		 NETSET_GROUP.ID AS NETWORK_SETTING_GROUP_ID,

		 CASE WHEN A.HANDING_TIME_BUFFER IS NULL OR A.HANDING_TIME_BUFFER = '' THEN -1
		      ELSE TO_BIGINT(A.HANDING_TIME_BUFFER)
		 END AS TIME_WINDOW_SECONDS,

		 CASE WHEN A.MAX_HITS IS NULL OR A.MAX_HITS = '' THEN -1
		      ELSE TO_INTEGER(A.MAX_HITS)
		 END AS RANK_NUMBER,
		 :RESOURCE_CATEGORY_ID AS RESOURCE_CATEGORY,

		 START_DATE_TIME,
		 END_DATE_TIME,
		 A.SELECTION_DATE,
		 A.KEEP_EXECUTION_RUNS,
		 A.EXECUTE_IN_WORKING_HOUR,A.START_WORKING_TIME,A.END_WORKING_TIME, A.TIMEZONES
		FROM "sap.tm.trp.db.massupload::t_pickup_return_ruleset_temporary" AS A

		LEFT OUTER JOIN "sap.tm.trp.db.pickupreturn::t_location_assignment_rule" AS RULESET
		 ON UPPER(A.RULE_NAME) = RULESET.RULE_NAME AND RULESET.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID

		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_equipment_filter" AS RF
			ON A.RESOURCE_FILTER_NAME = RF.DESC and RF.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID
		INNER JOIN "sap.tm.trp.db.filter::t_location_filter" AS LF
			ON A.LOCATION_FILTER_NAME = LF.DESC and LF.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID
		INNER JOIN "sap.tm.trp.db.pipeline::cv_get_plan_list"  AS SDPLAN
	        ON A.SD_PLAN_NAME = SDPLAN.NAME AND (SDPLAN.PLAN_TYPE_ID = :PLAN_SD OR SDPLAN.PLAN_TYPE_ID = :PLAN_VSD)
	          AND SDPLAN.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID
		LEFT OUTER JOIN (
		   SELECT DISTINCT T1.RULE_ID,
	             T1.CODE,
	             T1.NAME,
	             T7.ID AS TYPE_ID,
	             T7.NAME AS TYPE,
	             T1.RULE_TYPE_ID,
	             CASE T1.RULE_TYPE_ID
	                 WHEN 8 THEN 'PICK-UP'
	                 WHEN 9 THEN 'RETURN'
	             END AS RULE_TYPE,
	             T11.CODE AS RESOURCE_CATEGORY
	        FROM "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_rule" AS T1
	         LEFT OUTER JOIN "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_map_node_metaData" AS T6
	         ON T1.RULE_TYPE_ID = T6.RULE_TYPE_ID
	         LEFT OUTER JOIN "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_map_node_metaData_t" AS T8
	         ON T6.RULE_TYPE_ID = T8.ID
	         LEFT OUTER JOIN "sap.tm.trp.db.objectregistration::t_object_type" AS T7
	         ON T6.OBJECT_TYPE_ID = T7.ID
	         LEFT OUTER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_object_registration" T10
	    	 ON T1.RULE_ID = T10.OBJECT_ID
	    	 LEFT OUTER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings" T11
	   		 ON T10.RESOURCE_CATEGORY_ID = T11.ID
	       WHERE T7.TYPE = 4 AND T11.CODE = :RESOURCE_CATEGORY_ID
		) AS LOCDET_RULE  ----- Location determination rule
	   ON A.LOCATION_DETERMIN_NAME = LOCDET_RULE.NAME AND UPPER(A.RULE_TYPE_NAME) = LOCDET_RULE.RULE_TYPE

	   LEFT OUTER JOIN (
	   		SELECT DISTINCT T1.RULE_ID AS ID,
	             T1.CODE,
	             T1.NAME,
	             T7.ID AS TYPE_ID,
	             T7.NAME AS TYPE,
	             T1.RULE_TYPE_ID AS RULE_TYPE_ID,
	          	 CASE  T1.RULE_TYPE_ID
	                 WHEN 18 THEN 'PICK-UP'
	                 WHEN 19 THEN 'RETURN'
	             END AS RULE_TYPE,
	             T11.CODE AS RESOURCE_CATEGORY
	        FROM "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_rule" AS T1
	        LEFT OUTER JOIN "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_map_node_metaData" AS T6
	        ON T1.RULE_TYPE_ID = T6.RULE_TYPE_ID
	        LEFT OUTER JOIN "sap.tm.trp.db.objectregistration::t_object_type" AS T7
	        ON T6.OBJECT_TYPE_ID = T7.ID
	        INNER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_object_registration" T10
	        ON T1.RULE_ID = T10.OBJECT_ID
	        INNER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings" T11
	        ON T10.RESOURCE_CATEGORY_ID = T11.ID
	       WHERE T7.TYPE = 8 AND T11.CODE = :RESOURCE_CATEGORY_ID

	    ) AS EXCLUSIVE_RULE ---- Exclusive Rule
	    ON   A.EXCLUSIVE_RULE_NAME = EXCLUSIVE_RULE.NAME AND EXCLUSIVE_RULE.RULE_TYPE = UPPER(A.RULE_TYPE_NAME)

	   INNER JOIN "sap.tm.trp.db.planningcockpit::t_network_setting_group" AS NETSET_GROUP
	    ON A.NETWORK_SETTING_GROUP_NAME = NETSET_GROUP.NAME
	       AND NETSET_GROUP.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID

	   WHERE A.CONNECTION_ID = :CONNECTION_ID AND A.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID;
     */
--Refactored code start
	RS1= SELECT CASE WHEN RULESET.ID IS NULL 
		         THEN "sap.tm.trp.db.pickupreturn::s_location_rule".NEXTVAL
		      ELSE RULESET.ID
		 END AS ID,
		 CASE WHEN RULESET.ID IS NULL THEN 0 ELSE 1
		 END AS IF_UPDATE,
		 UPPER(A.RULE_NAME) AS CODE, 
		 UPPER(A.RULE_NAME) AS RULE_NAME, 
		 :V_SPRAS AS SPRAS, A.DESC,
				 
		 MAP(UPPER(A.RULE_TYPE_NAME),'RETURN',2,1) AS RULE_TYPE,
		 MAP(UPPER(A.ALLOWED_USAGE),'PERSONAL','P','G') AS ALLOWED_USAGE,
		 
		 CASE WHEN UPPER(A.TIME_UNIT_NAME) = :HOURS THEN A.DUE_TO*3600 
		      WHEN UPPER(A.TIME_UNIT_NAME) = :DAYS  THEN A.DUE_TO*3600*24
		      WHEN UPPER(A.TIME_UNIT_NAME) = :WEEKS THEN A.DUE_TO*3600*24*7
		 END AS TIME_RANGE,		 
		 CASE WHEN UPPER(A.TIME_UNIT_NAME) = :HOURS THEN 1
		      WHEN UPPER(A.TIME_UNIT_NAME) = :DAYS  THEN 2
		      WHEN UPPER(A.TIME_UNIT_NAME) = :WEEKS THEN 3
		 END AS TIME_RANGE_UINT,
		 RF.ID AS EQUIP_FILTER_ID, LF.ID AS LOCATION_FILTER_ID,
		 0 AS COST_MODEL_ID,
		 MAP(UPPER(A.SCHEDULE_TYPE_NAME), :SCHEDULE_SCHEDULED, 1, 0) AS SCHEDULE_TIME_TYPE,
		 A.EXECUTE_INTERVAL_NAME AS EXECUTE_INTERVAL,
		 A.EXECUTE_TIME_UINT_NAME AS EXECUTE_TIME_UINT,
		 0 AS  EXECUTE_DAY,
		 A.START_DATE_TIME AS START_DATETIME,
		 A.END_DATE_TIME AS END_DATETIME,
		 CASE WHEN UPPER(A.OP_SETTING_NAME) = :LOCATION_DETERMINATION_RULE THEN 1
		 	  WHEN UPPER(A.OP_SETTING_NAME) = :OPTIMIZATION THEN 2
		 	  WHEN UPPER(A.OP_SETTING_NAME) = :BOTH_RULE_OPTI THEN 3
		 	  WHEN UPPER(A.OP_SETTING_NAME) = :NONE_OPTI THEN 4
		 END AS OP_SETTING_TYPE,
		 CASE WHEN UPPER(A.OP_SETTING_NAME) IN (:OPTIMIZATION, :BOTH_RULE_OPTI)  
		 		    AND UPPER(A.OPTIMIZATION_NAME) = :COST_BASED THEN 1
		      WHEN UPPER(A.OP_SETTING_NAME) IN (:OPTIMIZATION, :BOTH_RULE_OPTI)
		            AND UPPER(A.OPTIMIZATION_NAME) = :BOTH_COST_AND_BALANCING THEN 3
		 END AS OPTIMIZATION,
		 CASE WHEN RULESET.ID IS NULL THEN :V_USER_ID
		        ELSE RULESET.CREATE_BY
		 END AS CREATE_BY,
		 
		  CASE WHEN RULESET.ID IS NULL THEN :V_TIMESTAMP_START
		        ELSE RULESET.CREATE_ON
		 END AS CREATE_ON,
		 CASE WHEN RULESET.ID IS NOT NULL AND RULESET.SCHEDULE_TIME_TYPE = 1
		 	     AND UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED 
		          THEN 'JOB_UPDATE'
		      WHEN RULESET.ID IS NOT NULL AND RULESET.SCHEDULE_TIME_TYPE = 1
		        AND UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_MANUAL
		         THEN 'JOB_CANCEL'
		      WHEN RULESET.ID IS NOT NULL AND RULESET.SCHEDULE_TIME_TYPE = 0
		          AND UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED
		          THEN 'JOB_CREATE'
		      WHEN RULESET.ID IS NULL 
		      	 AND UPPER(A.SCHEDULE_TYPE_NAME) = :SCHEDULE_SCHEDULED 
		         THEN 'JOB_CREATE'
		      ELSE ''		       	 
		 END AS JOB_ACTION,		
		  :V_USER_ID AS MODIFIED_BY, :V_TIMESTAMP_START AS MODIFIED_ON,
		 0 AS STATUS,
		 CASE WHEN UPPER(EXCLUDE_YES_OR_NO) = 'YES' THEN 1 ELSE 0 
		 END AS FILTER_EXECUTION,
		 CASE WHEN A.HANDING_TIME_BUFFER IS NULL OR A.HANDING_TIME_BUFFER = '' THEN -1
		      ELSE TO_BIGINT(A.HANDING_TIME_BUFFER)
		 END AS TIME_WINDOW_SECONDS,
		  
		 CASE WHEN A.MAX_HITS IS NULL OR A.MAX_HITS = '' THEN -1
		      ELSE TO_INTEGER(A.MAX_HITS)
		 END AS RANK_NUMBER,
		 :RESOURCE_CATEGORY_ID AS RESOURCE_CATEGORY,
		 START_DATE_TIME,
		 END_DATE_TIME,
		 A.SELECTION_DATE,
		 A.KEEP_EXECUTION_RUNS,
		 A.EXECUTE_IN_WORKING_HOUR,A.START_WORKING_TIME,A.END_WORKING_TIME,
		 A.SD_PLAN_NAME,
		 A.LOCATION_DETERMIN_NAME,
		 A.RULE_TYPE_NAME,
		 A.EXCLUSIVE_RULE_NAME,
		 A.NETWORK_SETTING_GROUP_NAME,
		 A.OP_SETTING_NAME,
		 A.CONNECTION_ID,
		 A.TIMEZONES
        FROM "sap.tm.trp.db.massupload::t_pickup_return_ruleset_temporary" AS A
		LEFT OUTER JOIN "sap.tm.trp.db.pickupreturn::t_location_assignment_rule" AS RULESET
		 ON UPPER(A.RULE_NAME) = RULESET.RULE_NAME AND RULESET.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID
		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_equipment_filter" AS RF
			ON A.RESOURCE_FILTER_NAME = RF.DESC and RF.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID
		INNER JOIN "sap.tm.trp.db.filter::t_location_filter" AS LF 
			ON A.LOCATION_FILTER_NAME = LF.DESC and LF.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID;
			

RS2=    SELECT RS1.* , SDPLAN.ID AS SD_PLAN_ID FROM :RS1 AS RS1
		INNER JOIN "sap.tm.trp.db.pipeline::cv_get_plan_list"  AS SDPLAN
	        ON RS1.SD_PLAN_NAME = SDPLAN.NAME AND SDPLAN.PLAN_TYPE_ID = :PLAN_SD 
	        AND SDPLAN.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID
	   UNION ALL 
	   SELECT RS1.* , SDPLAN.ID AS SD_PLAN_ID FROM :RS1 AS RS1
		INNER JOIN "sap.tm.trp.db.pipeline::cv_get_plan_list"  AS SDPLAN
	        ON RS1.SD_PLAN_NAME = SDPLAN.NAME AND  SDPLAN.PLAN_TYPE_ID = :PLAN_VSD
	        AND SDPLAN.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID;

SOURCE = SELECT  RS2.ID,
		 RS2.IF_UPDATE,
		 RS2.CODE,
		 RS2.RULE_NAME, 
		 RS2.SPRAS, 
		 RS2.DESC,
		 RS2.RULE_TYPE,
		 RS2.ALLOWED_USAGE,
		 RS2.TIME_RANGE,		 
		 RS2.TIME_RANGE_UINT,
		 RS2.EQUIP_FILTER_ID,
		 RS2.LOCATION_FILTER_ID,
		 RS2.SD_PLAN_ID,
		 RS2.COST_MODEL_ID,
		 RS2.SCHEDULE_TIME_TYPE,
		RS2.EXECUTE_INTERVAL,
	     RS2.EXECUTE_TIME_UINT,
		 RS2.EXECUTE_DAY,
		RS2.START_DATETIME,
		  RS2.END_DATETIME,
		 RS2.OP_SETTING_TYPE,
		 CASE WHEN UPPER(RS2.OP_SETTING_NAME) IN (:LOCATION_DETERMINATION_RULE, :BOTH_RULE_OPTI)
		 	    THEN LOCDET_RULE.RULE_ID 
		 END AS LOCATION_DETERMIN_ID,
		 RS2.OPTIMIZATION,
		 RS2.CREATE_BY,
		 RS2.CREATE_ON,
		 RS2.JOB_ACTION,		
		 RS2.MODIFIED_BY, 
		 RS2.MODIFIED_ON,
		 RS2.STATUS,
		 RS2.FILTER_EXECUTION,
		 EXCLUSIVE_RULE.ID AS EXCLUSIVE_RULE_ID,
		 NETSET_GROUP.ID AS NETWORK_SETTING_GROUP_ID,		 
		RS2.TIME_WINDOW_SECONDS,
		 RS2.RANK_NUMBER,
		 RS2.RESOURCE_CATEGORY,
		 RS2.START_DATE_TIME,
		 RS2.END_DATE_TIME,
		 RS2.SELECTION_DATE,
		 RS2.KEEP_EXECUTION_RUNS,
		 RS2.EXECUTE_IN_WORKING_HOUR,
		 RS2.START_WORKING_TIME,
		 RS2.END_WORKING_TIME,
		 RS2.TIMEZONES	 		 
		 FROM :RS2 AS RS2 
		LEFT OUTER JOIN ( 
		   SELECT DISTINCT T1.RULE_ID,
	             T1.CODE,
	             T1.NAME,               
	             T7.ID AS TYPE_ID,
	             T7.NAME AS TYPE,
	             T1.RULE_TYPE_ID,           
	             CASE T1.RULE_TYPE_ID
	                 WHEN 8 THEN 'PICK-UP'
	                 WHEN 9 THEN 'RETURN'
	             END AS RULE_TYPE, 
	             T11.CODE AS RESOURCE_CATEGORY
	        FROM "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_rule" AS T1            
	         LEFT OUTER JOIN "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_map_node_metaData" AS T6
	         ON T1.RULE_TYPE_ID = T6.RULE_TYPE_ID
	         LEFT OUTER JOIN "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_map_node_metaData_t" AS T8
	         ON T6.RULE_TYPE_ID = T8.ID         
	         LEFT OUTER JOIN "sap.tm.trp.db.objectregistration::t_object_type" AS T7
	         ON T6.OBJECT_TYPE_ID = T7.ID
	         LEFT OUTER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_object_registration" T10
	    	 ON T1.RULE_ID = T10.OBJECT_ID
	    	 LEFT OUTER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings" T11
	   		 ON T10.RESOURCE_CATEGORY_ID = T11.ID 
	       WHERE T7.TYPE = 4 AND T11.CODE = :RESOURCE_CATEGORY_ID		
		) AS LOCDET_RULE  ----- Location determination rule
	   ON RS2.LOCATION_DETERMIN_NAME = LOCDET_RULE.NAME AND UPPER(RS2.RULE_TYPE_NAME) = LOCDET_RULE.RULE_TYPE 
	   LEFT OUTER JOIN (
	   		SELECT DISTINCT T1.RULE_ID AS ID,
	             T1.CODE,
	             T1.NAME,                
	             T7.ID AS TYPE_ID,
	             T7.NAME AS TYPE,
	             T1.RULE_TYPE_ID AS RULE_TYPE_ID,
	          	 CASE  T1.RULE_TYPE_ID
	                 WHEN 18 THEN 'PICK-UP'
	                 WHEN 19 THEN 'RETURN'
	             END AS RULE_TYPE,               
	             T11.CODE AS RESOURCE_CATEGORY
	        FROM "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_rule" AS T1
	        LEFT OUTER JOIN "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_map_node_metaData" AS T6
	        ON T1.RULE_TYPE_ID = T6.RULE_TYPE_ID          
	        LEFT OUTER JOIN "sap.tm.trp.db.objectregistration::t_object_type" AS T7
	        ON T6.OBJECT_TYPE_ID = T7.ID
	        INNER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_object_registration" T10
	        ON T1.RULE_ID = T10.OBJECT_ID
	        INNER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings" T11
	        ON T10.RESOURCE_CATEGORY_ID = T11.ID
	       WHERE T7.TYPE = 8 AND T11.CODE = :RESOURCE_CATEGORY_ID 
	    ) AS EXCLUSIVE_RULE ---- Exclusive Rule
	    ON   RS2.EXCLUSIVE_RULE_NAME = EXCLUSIVE_RULE.NAME AND EXCLUSIVE_RULE.RULE_TYPE = UPPER(RS2.RULE_TYPE_NAME)  
	   INNER JOIN "sap.tm.trp.db.planningcockpit::t_network_setting_group" AS NETSET_GROUP
	    ON RS2.NETWORK_SETTING_GROUP_NAME = NETSET_GROUP.NAME 
	       AND NETSET_GROUP.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID
	   WHERE RS2.CONNECTION_ID = :CONNECTION_ID AND RS2.RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID; 
--Refactored code end

    UPSERT "sap.tm.trp.db.pickupreturn::t_location_assignment_rule"
    (  ID,
	   CODE,
	   RULE_NAME,
	   RULE_TYPE,
	   TIME_RANGE,
	   TIME_RANGE_UINT,
	   EQUIP_FILTER_ID,
	   LOCATION_FILTER_ID,
	   SD_PLAN_ID,
	   COST_MODEL_ID,
	   SCHEDULE_TIME_TYPE,
	   EXECUTE_INTERVAL,
	   EXECUTE_TIME_UINT,
	   EXECUTE_DAY,
	   START_DATETIME,
	   END_DATETIME,
	   OP_SETTING_TYPE,
	   LOCATION_DETERMIN_ID,
	   OPTIMIZATION,
	   CREATE_BY,
	   CREATE_ON,
	   MODIFIED_BY,
	   MODIFIED_ON,
	   ALLOWED_USAGE,
	   STATUS,
	   FILTER_EXECUTION,
	   EXCLUSIVE_RULE_ID,
	   NETWORK_SETTING_GROUP_ID,
	   TIME_WINDOW_SECONDS,
	   RANK_NUMBER,
	   RESOURCE_CATEGORY,
	   SELECTION_DATE,
	   KEEP_EXECUTION_RUNS,
	   EXECUTE_WORKING_HOUR,
	   START_WORKING_HOUR_TIME,
	   END_WORKING_HOUR_TIME,
       TIMEZONES
    )
    SELECT ID,
           CODE,
           RULE_NAME,
           RULE_TYPE,
           TIME_RANGE,
           TIME_RANGE_UINT,
           EQUIP_FILTER_ID,
           LOCATION_FILTER_ID,
           SD_PLAN_ID,
           COST_MODEL_ID,
           SCHEDULE_TIME_TYPE,
           EXECUTE_INTERVAL,
           EXECUTE_TIME_UINT,
           EXECUTE_DAY,
           LOCALTOUTC(START_DATETIME, IFNULL(TIMEZONES,'UTC'), 'platform'),
           LOCALTOUTC(END_DATETIME, IFNULL(TIMEZONES,'UTC'), 'platform'),
           OP_SETTING_TYPE,
           LOCATION_DETERMIN_ID,
           OPTIMIZATION,
           CREATE_BY,
           CREATE_ON,
           MODIFIED_BY,
           MODIFIED_ON,
           ALLOWED_USAGE,
           STATUS,
           FILTER_EXECUTION,
           EXCLUSIVE_RULE_ID,
           NETWORK_SETTING_GROUP_ID,
           TIME_WINDOW_SECONDS,
           RANK_NUMBER,
           RESOURCE_CATEGORY,
           SELECTION_DATE,
           KEEP_EXECUTION_RUNS,
           EXECUTE_IN_WORKING_HOUR,
    	   LOCALTOUTC(TO_SECONDDATE(TO_VARCHAR(START_DATETIME, 'YYYY-MM-DD') || ' '  || START_WORKING_TIME, 'YYYY-MM-DD HH24:MI:SS'), TIMEZONES, 'platform') AS START_WORKING_HOUR_TIME,
    	   LOCALTOUTC(TO_SECONDDATE(TO_VARCHAR(END_DATETIME, 'YYYY-MM-DD') || ' ' || END_WORKING_TIME, 'YYYY-MM-DD HH24:MI:SS'), TIMEZONES, 'platform') AS END_WORKING_HOUR_TIME,
    	   TIMEZONES
    FROM :SOURCE;

    UPSERT "sap.tm.trp.db.pickupreturn::t_location_rule_t"(ID, SPRAS, DESC)
      SELECT ID, SPRAS, DESC FROM :SOURCE;

  --- return schedule details
  SCHEDULE_DETAILS =
     SELECT  ID, JOB_ACTION, RULE_NAME, EXECUTE_INTERVAL, EXECUTE_TIME_UINT,
        REPLACE(TO_VARCHAR(LOCALTOUTC(START_DATE_TIME, TIMEZONES, 'platform'),'YYYY-MM-DD HH24:MI:SS'),' ','T')||'.000Z'  AS START_DATE_TIME,
        REPLACE(TO_VARCHAR(LOCALTOUTC(END_DATE_TIME, TIMEZONES, 'platform'),'YYYY-MM-DD HH24:MI:SS'),' ','T')||'.000Z'  AS END_DATE_TIME,
		EXECUTE_IN_WORKING_HOUR,
    	START_WORKING_TIME,
    	END_WORKING_TIME,
    	TIMEZONES
       FROM  :SOURCE AS A
       WHERE CONNECTION_ID = :CONNECTION_ID AND RESOURCE_CATEGORY = :RESOURCE_CATEGORY_ID
          AND JOB_ACTION <> '';

    ---return execution history details
    EXECUTION_RESULTS =
		SELECT
			T1.CNT AS REC_CRTD,
			T2.CNT AS REC_UPD,
			T1.CNT + T2.CNT AS RECORD_CNT
		FROM (SELECT COUNT(*) AS CNT FROM :SOURCE WHERE IF_UPDATE = 0) T1,
			(SELECT	COUNT(*) AS CNT FROM :SOURCE WHERE IF_UPDATE = 1) T2;

    ---Clean pick-up return ruleset temporary table
   CALL "sap.tm.trp.db.massupload::p_pickup_return_ruleset_temporary_data_clean"(:CONNECTION_ID);


END;
