PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.massupload::p_supply_demand_plan_save" (
    IN CONNECTION_ID VARCHAR(100),
    IN RESOURCE_CATEGORY_ID VARCHAR(20),
    OUT SCHEDULE_DETAILS "sap.tm.trp.db.massupload::tt_supply_demand_plan_upload_schedule",
    OUT EXECUTION_RESULTS "sap.tm.trp.db.massupload::tt_massupload_execution_result"
)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	DEFAULT SCHEMA SAP_TM_TRP
	--READS SQL DATA
AS
    FILTER_GROUP_ID BIGINT;
    USER_ID BIGINT;
    FILTER_TYPE INT;
BEGIN

DECLARE PLAN_STATUS_NOT_EXECUTED INT :=3;
DECLARE STATUS_SUSPEND INTEGER := 1;

	-- GET CURRENT USER_ID
	SELECT IFNULL(MAX(ID),0) INTO USER_ID
	FROM "sap.tm.trp.db.systemmanagement.user::t_user"
	WHERE USERNAME = (SELECT USERNAME FROM "sap.tm.trp.db.systemmanagement.user::cv_get_username");

	-- PREPARE THE SOURCE DATA
	SOURCE =
		SELECT
			-- TPM.NAME IS NULL MEANS THIS IS A CREATE ACTION, OR THIS IS A UPDATE ACTION.
			CASE WHEN TPM.NAME IS NULL
					THEN "sap.tm.trp.db.filter::s_filter_group".NEXTVAL
	             ELSE TPM.FILTER_GROUP_ID
	        END AS FILTER_ID,
			CASE WHEN TPM.NAME IS NULL
					THEN "sap.tm.trp.db.pipeline::s_plan_model".NEXTVAL
	             ELSE TPM.ID
	        END AS PLAN_MODEL_ID,
			CASE WHEN MSD.ID IS NULL
					THEN "sap.tm.trp.db.job::s_model_schedule_detail".NEXTVAL
	             ELSE MSD.ID
	        END AS MODEL_SCHEDULE_DETAIL_ID,
	        CASE WHEN TPM.NAME IS NULL
	        		THEN 0
				 ELSE 1 
	        END AS IF_MODEL_UPDATE,
	        CASE WHEN MSD.MODEL_ID IS NULL
	        	THEN CASE SDP.RECURRENCE_TYPE WHEN '' THEN -1 ELSE 0 END
				ELSE CASE SDP.RECURRENCE_TYPE WHEN '' THEN 2 ELSE 1 END
	        END AS IF_UPDATE,
	        CASE WHEN TPM.NAME IS NOT NULL AND TPM.PIPELINE_MODEL_ID <> CM.ID
	        		THEN 1
	        	 ELSE 0
	        END AS IF_CAL_MODEL_CHANGED,
	        TPM.CALMODEL_MODIFIED_ON AS OLD_CALMODEL_MODIFIED_ON,
			 SDP.NAME AS NAME,
			 SDP.DESCRIPTION AS DESC,
			 SDP.START_TIME,
			 SDP.EXPIRY_TIME,
			 UPPER(SDP.RECURRENCE_TYPE) AS RECURRENCE_TYPE,
			 SDP.RECURRENCE_INTERVAL,
			 SDP.RECURRENCE_DAY,
			 SDP.VISIBILITY_FLAG,
			 LF.ID AS LOCATION_FILTER_ID,
			 EF.ID AS RESOURCE_FILTER_ID,
			 TF.ID AS TIME_FILTER_ID,
			 CM.ID AS CALCULATION_MODEL_ID,
			 ARG.ID AS ALERT_RULE_GROUP_ID,
			 AG.ID AS ATTRIBUTE_GROUP_ID,
			 PMT.ID AS PLAN_MODEL_TYPE_ID,
			 CASE WHEN LF.LOCATION_TYPE IN (1,2) THEN 1
	             WHEN LF.LOCATION_TYPE IN (3,4) THEN 2
	             WHEN LF.LOCATION_TYPE IN (5,6) THEN 3
	        END AS FILTER_TYPE,
	        SDP.KEEP_EXECUTION_RUNS,
	        PUT.USAGE_CODE,
	        SDP.DISABLE_INTERMEDIATE_NODE,
	        SDP.EXECUTE_IN_WORKING_HOUR,
	        SDP.START_WORKING_TIME,
	        SDP.END_WORKING_TIME,
	        CASE WHEN TPM.NAME IS NULL
				    THEN :USER_ID
                 ELSE TPM.CREATE_BY
	        END AS PLAN_CREATE_BY,
	        CASE WHEN TPM.NAME IS NULL
					THEN CURRENT_UTCTIMESTAMP
	             ELSE TPM.CREATE_ON
	        END AS PLAN_CREATE_ON,
	        SDP.TIMEZONES
		FROM "sap.tm.trp.db.massupload::t_supply_demand_plan_temporary" AS SDP
			LEFT OUTER JOIN "sap.tm.trp.db.filter::t_location_filter" AS LF ON SDP.LOCATION_FILTER_NAME = LF.DESC
			and LF.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID
			LEFT OUTER JOIN "sap.tm.trp.db.filter::t_equipment_filter" AS EF ON SDP.RESOURCE_FILTER_NAME = EF.DESC
			and EF.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID
			LEFT OUTER JOIN "sap.tm.trp.db.filter::t_time_filter" AS TF ON SDP.TIME_FILTER_NAME = TF.NAME
			LEFT OUTER JOIN "sap.tm.trp.db.pipeline::v_calculation_model" AS CM ON SDP.CALCULATION_MODEL_NAME = CM.NAME
			and CM.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID
			LEFT OUTER JOIN "sap.tm.trp.db.alert.alert_rule_group::v_alert_rule_group" AS ARG ON SDP.ALERT_RULE_GROUP_NAME = ARG.NAME
			and ARG.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID
			LEFT OUTER JOIN "sap.tm.trp.db.filter::t_attribute_group" AS AG ON SDP.ATTRIBUTE_GROUP_NAME = AG.NAME
			and AG.RESOURCE_CATEGORY=:RESOURCE_CATEGORY_ID
			LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_plan_model_type" AS PMT ON SDP.TYPE_NAME = PMT.DESC
			LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_plan_model" AS TPM ON SDP.NAME = TPM.NAME
			LEFT OUTER JOIN "sap.tm.trp.db.job::t_model_schedule_detail" AS MSD ON TPM.ID = MSD.MODEL_ID
			AND MSD.SCHEDULE_TYPE = 'PLAN'
			LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_plan_usage_t" AS PUT ON SDP.PLAN_USAGE = PUT.DESC
		WHERE SDP.CONNECTION_ID = :CONNECTION_ID;

	------------------- CREATE/UPDATE NEW FILTER_GROUP START -------------------
	-- UPSERT FILTER MAIN DATA
    UPSERT "sap.tm.trp.db.filter::t_filter_group"(ID, USER_ID, TIME_FILTER_ID, CREATE_AT, LAST_MODIFIED_AT, FILTER_TYPE, RESOURCE_CATEGORY, LAST_MODIFIED_BY)
    SELECT
    	SOURCE.FILTER_ID,
    	:USER_ID,
    	SOURCE.TIME_FILTER_ID,
    	SOURCE.PLAN_CREATE_ON,
    	CURRENT_UTCTIMESTAMP,
    	SOURCE.FILTER_TYPE,
    	:RESOURCE_CATEGORY_ID,
    	:USER_ID
    FROM :SOURCE AS SOURCE;

    -- UPSERT FILTER & EQUIPMENT FILTER RELATIONSHIP
    -- Delete the data since the t_filter_equipment_filter table has no primary key, which will cause upsert working not correctly.
	DELETE FROM "sap.tm.trp.db.filter::t_filter_equipment_filter"
	WHERE FILTER_GROUP_ID IN (SELECT FILTER_ID FROM :SOURCE);

    UPSERT "sap.tm.trp.db.filter::t_filter_equipment_filter"(FILTER_GROUP_ID, EQUIPMENT_FILTER_ID, RESOURCE_CATEGORY)
    SELECT
    	SOURCE.FILTER_ID,
    	SOURCE.RESOURCE_FILTER_ID,
    	:RESOURCE_CATEGORY_ID
    FROM :SOURCE AS SOURCE;

    -- UPSERT FILTER & LOCATION FILTER RELATIONSHIP
    -- Delete the data since the t_filter_location_filter table has no primary key, which will cause upsert working not correctly.
    DELETE FROM "sap.tm.trp.db.filter::t_filter_location_filter"
	WHERE FILTER_GROUP_ID IN (SELECT FILTER_ID FROM :SOURCE);

    UPSERT "sap.tm.trp.db.filter::t_filter_location_filter"(FILTER_GROUP_ID, LOCATION_FILTER_ID)
    SELECT
    	SOURCE.FILTER_ID,
    	SOURCE.LOCATION_FILTER_ID
    FROM :SOURCE AS SOURCE;
    ------------------- CREATE/UPDATE NEW FILTER_GROUP END -------------------


    ------------------- CREATE/UPDATE NEW PLAN START -------------------

	-- UPSERT PLAN METADATA
	UPSERT "sap.tm.trp.db.pipeline::t_plan_model"
	(ID, NAME, FILTER_GROUP_ID, PIPELINE_MODEL_ID, CREATE_BY, CREATE_ON, LAST_MODIFIED_BY, LAST_MODIFIED_ON, PLAN_MODEL_TYPE_ID, DESC,
	CODE,VISIBILITY_FLAG,ALERT_RULE_GROUP_ID,EXPIRY_TIME, ATTRIBUTE_GROUP_ID,STATUS,CALMODEL_MODIFIED_ON,KEEP_EXECUTION_RUNS,USAGE,USAGE_CODE)
	SELECT
		SOURCE.PLAN_MODEL_ID,
		NAME,
		SOURCE.FILTER_ID,
		SOURCE.CALCULATION_MODEL_ID,
		SOURCE.PLAN_CREATE_BY,
		SOURCE.PLAN_CREATE_ON,
		:USER_ID,
		CURRENT_UTCTIMESTAMP,
		SOURCE.PLAN_MODEL_TYPE_ID,
		SOURCE.DESC,
		UPPER(SOURCE.NAME),
		SOURCE.VISIBILITY_FLAG,
		SOURCE.ALERT_RULE_GROUP_ID,
		NULL,
		CASE WHEN SOURCE.ATTRIBUTE_GROUP_ID > 0 THEN SOURCE.ATTRIBUTE_GROUP_ID ELSE NULL END,
		CASE WHEN SOURCE.IF_UPDATE = 1 THEN :STATUS_SUSPEND ELSE :PLAN_STATUS_NOT_EXECUTED END,
		CASE WHEN SOURCE.IF_CAL_MODEL_CHANGED = 1 THEN CURRENT_UTCTIMESTAMP ELSE SOURCE.OLD_CALMODEL_MODIFIED_ON END,
		SOURCE.KEEP_EXECUTION_RUNS,
		SOURCE.DISABLE_INTERMEDIATE_NODE,
		SOURCE.USAGE_CODE
	FROM :SOURCE AS SOURCE;

	-- ASSIGN ALERT RULE GROUP
	UPSERT "sap.tm.trp.db.alert.alert_rule_group::t_alert_rule_group_assign_plan_model"(PLAN_MODEL_ID, ALERT_RULE_GROUP_ID)
	SELECT
		SOURCE.PLAN_MODEL_ID,
		SOURCE.ALERT_RULE_GROUP_ID
	FROM :SOURCE AS SOURCE;

	-- CHECK IF THE PLAN BEEN USED BY A VIRTUAL PLAN, IF YES, NEED TO SET THE VIRTUAL PLAN'S STATUS TO 1(PLAN CHANGED.)
	UPDATE T1
	SET T1.STATUS = :STATUS_SUSPEND
	FROM "sap.tm.trp.db.pipeline::t_plan_model" T1
	INNER JOIN
	(
	SELECT DISTINCT T1.VIRTUAL_PLAN_MODEL_ID
	FROM "sap.tm.trp.db.pipeline::t_virtual_plan_persisted_plan" T1
	INNER JOIN :SOURCE AS SOURCE
	ON SOURCE.IF_UPDATE = 1 AND T1.PERSISTED_PLAN_MODEL_ID = SOURCE.PLAN_MODEL_ID
	) T2 ON (T1.ID = T2.VIRTUAL_PLAN_MODEL_ID);
    ------------------- CREATE/UPDATE NEW PLAN END -------------------


    ------------------- CREATE/UPDATE NEW SCHEDULE START -------------------
	UPSERT "sap.tm.trp.db.job::t_model_schedule_detail"
        (ID,
         MODEL_ID,
         START_TIME,
         EXPIRY_TIME,
         RECURRENCE_TYPE,
         RECURRENCE_INTERVAL,
         RECURRENCE_DAY,
         SCHEDULE_TYPE,
         EXECUTE_WORKING_HOUR,
         START_WORKING_HOUR_TIME,
         END_WORKING_HOUR_TIME,
         TIMEZONES
        )
    SELECT
    	SOURCE.MODEL_SCHEDULE_DETAIL_ID,
    	SOURCE.PLAN_MODEL_ID,
    	LOCALTOUTC(SOURCE.START_TIME,  IFNULL(SOURCE.TIMEZONES,'UTC'), 'platform'),
    	LOCALTOUTC(SOURCE.EXPIRY_TIME, IFNULL(SOURCE.TIMEZONES,'UTC'), 'platform'),
    	SOURCE.RECURRENCE_TYPE,
    	SOURCE.RECURRENCE_INTERVAL,
    	SOURCE.RECURRENCE_DAY,
    	'PLAN' AS SCHEDULE_TYPE,
    	SOURCE.EXECUTE_IN_WORKING_HOUR,
    	LOCALTOUTC(TO_SECONDDATE(TO_VARCHAR(SOURCE.START_TIME, 'YYYY-MM-DD') || ' '  || SOURCE.START_WORKING_TIME, 'YYYY-MM-DD HH24:MI:SS'),SOURCE.TIMEZONES,'platform') START_WORKING_TIME,
    	LOCALTOUTC(TO_SECONDDATE(TO_VARCHAR(SOURCE.EXPIRY_TIME, 'YYYY-MM-DD') || ' ' || SOURCE.END_WORKING_TIME, 'YYYY-MM-DD HH24:MI:SS'),SOURCE.TIMEZONES,'platform') END_WORKING_TIME,
    	SOURCE.TIMEZONES
    FROM :SOURCE AS SOURCE
    WHERE IF_UPDATE = 0 OR IF_UPDATE = 1;
    
    DELETE FROM "sap.tm.trp.db.job::t_model_schedule_detail" WHERE ID IN (
    SELECT SOURCE.MODEL_SCHEDULE_DETAIL_ID FROM :SOURCE AS SOURCE WHERE IF_UPDATE = 2
    );
	------------------- CREATE/UPDATE NEW SCHEDULE END -------------------

	-- Delete the records in temporary table.
 	DELETE FROM "sap.tm.trp.db.massupload::t_supply_demand_plan_temporary"
    WHERE CONNECTION_ID = :CONNECTION_ID;

	SCHEDULE_DETAILS =
		SELECT
			 SOURCE.PLAN_MODEL_ID,
			 CASE
			 WHEN SOURCE.TIMEZONES IS NULL OR SOURCE.TIMEZONES='' THEN
			    SOURCE.START_TIME
			 ELSE
			    REPLACE(TO_VARCHAR(LOCALTOUTC(SOURCE.START_TIME, SOURCE.TIMEZONES, 'platform'),'YYYY-MM-DD HH24:MI:SS'),' ','T')||'.000Z'
             END
             AS START_TIME,
             CASE
			 WHEN SOURCE.TIMEZONES IS NULL OR SOURCE.TIMEZONES='' THEN
			    SOURCE.EXPIRY_TIME
			 ELSE
			    REPLACE(TO_VARCHAR(LOCALTOUTC(SOURCE.EXPIRY_TIME, SOURCE.TIMEZONES, 'platform'),'YYYY-MM-DD HH24:MI:SS'),' ','T')||'.000Z'
             END
             AS EXPIRY_TIME,
			 SOURCE.RECURRENCE_TYPE,
			 SOURCE.RECURRENCE_INTERVAL,
			 SOURCE.RECURRENCE_DAY,
			 SOURCE.IF_UPDATE,
			 SOURCE.EXECUTE_IN_WORKING_HOUR,
	         SOURCE.START_WORKING_TIME,
    	     SOURCE.END_WORKING_TIME,
    	     SOURCE.TIMEZONES
		FROM :SOURCE AS SOURCE;

	EXECUTION_RESULTS =
		SELECT
			T1.CNT AS REC_CRTD,
			T2.CNT AS REC_UPD,
			T1.CNT + T2.CNT AS RECORD_CNT
		FROM (SELECT COUNT(*) AS CNT FROM :SOURCE WHERE IF_MODEL_UPDATE = 0) T1,
			(SELECT	COUNT(*) AS CNT FROM :SOURCE WHERE IF_MODEL_UPDATE = 1) T2;

END;