<?xml version="1.0" encoding="UTF-8"?>
<Calculation:scenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Calculation="http://www.sap.com/ndb/BiModelCalculation.ecore" schemaVersion="2.3" id="cv_equip_idle_rate" applyPrivilegeType="ANALYTIC_PRIVILEGE" checkAnalyticPrivileges="true" defaultClient="crossClient" defaultLanguage="$$language$$" hierarchiesSQLEnabled="false" translationRelevant="true" visibility="internal" calculationScenarioType="SCRIPT_BASED" dataCategory="DEFAULT" enforceSqlExecution="false" executionSemantic="UNDEFINED" scriptParametersCaseSensitive="true">
  <descriptions defaultDescription="cv_equip_idle_rate"/>
  <localVariables/>
  <variableMappings/>
  <informationModelLayout relativeWidthScenario="27"/>
  <dataSources/>
  <calculationViews>
    <calculationView xsi:type="Calculation:SqlScriptView" id="Script_View">
      <descriptions/>
      <viewAttributes>
        <viewAttribute datatype="NVARCHAR" id="NODE_ID" length="32"/>
        <viewAttribute datatype="NVARCHAR" id="GEO_ID" length="22"/>
        <viewAttribute datatype="NVARCHAR" id="GEO_NAME" length="100"/>
        <viewAttribute datatype="INTEGER" id="GEO_FILTER_TYPE"/>
        <viewAttribute datatype="NVARCHAR" id="EQUIP_TYPE" length="22"/>
        <viewAttribute datatype="NVARCHAR" id="EQUIP_NAME" length="100"/>
        <viewAttribute datatype="INTEGER" id="EQUIP_FILTER_TYPE"/>
        <viewAttribute datatype="BIGINT" id="TIME_INTERVAL_ID"/>
        <viewAttribute datatype="BIGINT" id="SEQUENCE"/>
        <viewAttribute datatype="TIMESTAMP" id="START_TIME"/>
        <viewAttribute datatype="TIMESTAMP" id="END_TIME"/>
        <viewAttribute datatype="BIGINT" id="INTER_SECONDS"/>
        <viewAttribute datatype="NVARCHAR" id="OUTPUT_KEY" length="20"/>
        <viewAttribute datatype="DECIMAL" id="OUTPUT_VALUE" length="5" scale="4"/>
        <viewAttribute datatype="NVARCHAR" id="UNIT" length="10"/>
      </viewAttributes>
      <calculatedViewAttributes/>
      <definition> 
 BEGIN 
     DECLARE Filter_Calflag BIGINT;   
     DECLARE Unit VARCHAR(3); 
     DECLARE ExtQueryAttrGrpId BIGINT; 
     DECLARE FILTER_CALCULATED_OK INTEGER := 1;
     DECLARE window_start TIMESTAMP;
     DECLARE window_end TIMESTAMP;    
     DECLARE ResourceCategory VARCHAR(20);       
     --DECLARE EXIT HANDLER FOR SQLEXCEPTION
     --SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM DUMMY;

     -- Get all the needed information:filter info, date offset, unit 
     CALL &quot;sap.tm.trp.db.pipeline::p_prepare_info_for_providers_generic&quot;(intervals, locations, equips,
           Filter_Calflag, Unit, ExtQueryAttrGrpId, ResourceCategory);
     
     -- If the filered information are not calculated correctly, then return 
     IF :Filter_Calflag &lt;> :FILTER_CALCULATED_OK THEN 
        RETURN;
     END IF;   
				  
     SELECT MIN(START_TIMESTAMP), MAX(END_TIMESTAMP)
     INTO window_start, window_end
     FROM :intervals; 
     
     -- We can only calculate KPI for the past days
     IF TO_DATE(:window_end) &lt;= CURRENT_UTCDATE THEN 
          
     ------------------------------------------------------------------------------------------------------------------      
     tmp_trk = SELECT t3.EQUIP_CODE AS EQUIP_TYPE, t3.EQUIP_GROUP_ID, t2.GEO_GROUP_ID, t2.LOCATION_ID, 
               t1.RESOURCE_ID AS EQUIP_ID, t1.EVENT_TIME, t1.EVENT_CODE
               FROM &quot;sap.tm.trp.db.semantic.event::v_gateinout_tracking_history&quot; t1
               INNER JOIN :locations t2 ON (t1.LOCATION_ID = t2.LOCATION_ID)
               INNER JOIN :equips t3 ON (t1.RESOURCE_TYPE = t3.EQUIP_CODE)
               INNER JOIN  &quot;sap.tm.trp.db.semantic.resource::v_resource_category&quot; t6 
               ON (t1.RESOURCE_CATEGORY = t6.MAPPING_CODE AND t6.CODE = :ResourceCategory); 
                   
     -- get the gate in data from the tracking_history table
     -- we need to get all the gate in event within the time window
     -- and the gate in event still not gate out before the time window      
     gateins = SELECT *, ROW_NUMBER() OVER (PARTITION BY EQUIP_ID, LOCATION_ID ORDER BY EVENT_TIME ASC) AS EQUIP_SEQ
               FROM 
               (
                (
                 SELECT EQUIP_TYPE, EQUIP_GROUP_ID, GEO_GROUP_ID, LOCATION_ID, EQUIP_ID, EVENT_TIME
                 FROM :tmp_trk              
                 WHERE EVENT_CODE = 'GTI' AND EVENT_TIME BETWEEN :window_start AND :window_end
                )  
                UNION 
                (
                 -- get the gate in before the time window and still has not gate out
                 SELECT T3.EQUIP_TYPE, T3.EQUIP_GROUP_ID, T3.GEO_GROUP_ID, T3.LOCATION_ID, T3.EQUIP_ID, T3.EVENT_TIME
                 FROM :tmp_trk T3
                 INNER JOIN 
                 (
                   SELECT T1.EQUIP_ID, T1.LOCATION_ID, T1.LAST_GTI_TIME FROM
                   (
                     SELECT EQUIP_ID, LOCATION_ID, MAX(EVENT_TIME) AS LAST_GTI_TIME
                     FROM :tmp_trk          
                     WHERE EVENT_CODE = 'GTI' AND EVENT_TIME &lt; :window_start
                     GROUP BY EQUIP_ID, LOCATION_ID
                   ) T1
                   LEFT OUTER JOIN 
                   (
                     SELECT EQUIP_ID, LOCATION_ID, MAX(EVENT_TIME) AS LAST_GTO_TIME
                     FROM :tmp_trk 
                     WHERE EVENT_CODE = 'GTO'  AND EVENT_TIME &lt; :window_start
                     GROUP BY EQUIP_ID, LOCATION_ID 
                   ) T2 ON (T1.EQUIP_ID = T2.EQUIP_ID AND T1.LOCATION_ID = T2.LOCATION_ID AND T1.LAST_GTI_TIME &lt; T2.LAST_GTO_TIME) 
                   WHERE T2.EQUIP_ID IS NULL
                 ) T4 ON (T3.EQUIP_ID = T4.EQUIP_ID AND T3.LOCATION_ID = T4.LOCATION_ID AND T3.EVENT_TIME = T4.LAST_GTI_TIME)
                )
               );
               
     -- get the gate out data from the tracking_history table      
     gateouts = SELECT  EQUIP_TYPE, EQUIP_GROUP_ID, GEO_GROUP_ID, LOCATION_ID, EQUIP_ID, EVENT_TIME,
                ROW_NUMBER() over (PARTITION BY EQUIP_ID, LOCATION_ID ORDER BY EVENT_TIME ASC) AS EQUIP_SEQ
                FROM :tmp_trk
                WHERE EVENT_CODE = 'GTO' AND EVENT_TIME BETWEEN :window_start AND :window_end;               
                 
      -- Get the [gate in time, gate out time] for each equipment id
      -- The method is to join gate in and gate out data and get gate in time and the min gate out time after it as one pair.               
      idle_intervals = SELECT t3.*, SECONDS_BETWEEN(IDLE_START,IDLE_END) AS IDLE_SECONDS FROM
                         (SELECT IFNULL(t1.EQUIP_GROUP_ID,t2.EQUIP_GROUP_ID) AS EQUIP_GROUP_ID,
                           IFNULL(t1.EQUIP_ID,t2.EQUIP_ID) AS EQUIP_ID,
                           IFNULL( t1.GEO_GROUP_ID,t2.GEO_GROUP_ID) AS GEO_GROUP_ID, 
                           IFNULL(t1.EVENT_TIME,:window_start) AS IDLE_START, 
                           IFNULL(t2.EVENT_TIME,:window_end) AS IDLE_END
                           FROM :gateins t1                           
                           FULL OUTER JOIN :gateouts t2 ON (t1.EQUIP_ID = t2.EQUIP_ID AND t1.LOCATION_ID = t2.LOCATION_ID 
                            AND t1.EQUIP_SEQ = t2.EQUIP_SEQ AND t1.EVENT_TIME &lt; t2.EVENT_TIME)                           
                         ) t3 ;                                                        
                                       
     ------------------------------------------------------------------------------------------------------------------
     -- compute idle seconds within each interval(as the intervals are stored in seconds in our system, so we also compute in second level)
     idle_seconds = SELECT t1.GEO_GROUP_ID, t1.EQUIP_GROUP_ID, t2.TIME_INTERVAL_ID,
                 CASE 
                 WHEN t1.IDLE_END &lt;= t2.START_TIMESTAMP OR t1.IDLE_START >= t2.END_TIMESTAMP THEN 0 
                 WHEN t1.IDLE_START >= t2.START_TIMESTAMP AND t1.IDLE_END &lt;= t2.END_TIMESTAMP THEN t1.IDLE_SECONDS
                 WHEN t1.IDLE_START &lt;= t2.START_TIMESTAMP AND t1.IDLE_END >= t2.END_TIMESTAMP THEN t2.INTER_SECONDS 
                 WHEN t1.IDLE_START &lt;= t2.START_TIMESTAMP AND (t1.IDLE_END > t2.START_TIMESTAMP AND t1.IDLE_END &lt;= t2.END_TIMESTAMP ) THEN SECONDS_BETWEEN(t2.START_TIMESTAMP,t1.IDLE_END) 
                 WHEN t1.IDLE_END >= t2.END_TIMESTAMP AND (t1.IDLE_START >= t2.START_TIMESTAMP AND t1.IDLE_START &lt; t2.END_TIMESTAMP) THEN SECONDS_BETWEEN(t1.IDLE_START, t2.END_TIMESTAMP)
                 END  AS INTER_IDLE_SECONDS
                 FROM :idle_intervals t1, :intervals t2;      


      -- compute the idle rate within each interval
      -- for each interval, idle_rate =  sum(idle seconds within this interval)  / count() / interval length     
      tmp_out = SELECT  t1.GEO_GROUP_ID, t1.EQUIP_GROUP_ID, t1.TIME_INTERVAL_ID, (t1.TOTAL_IDLE_RATE/t2.INTER_SECONDS) AS IDLE_RATE FROM
                (SELECT GEO_GROUP_ID ,  EQUIP_GROUP_ID ,  TIME_INTERVAL_ID, SUM(INTER_IDLE_SECONDS)/COUNT(INTER_IDLE_SECONDS) AS TOTAL_IDLE_RATE
                 FROM :idle_seconds             
                 GROUP BY EQUIP_GROUP_ID, GEO_GROUP_ID, TIME_INTERVAL_ID
                ) t1 
                INNER JOIN :intervals t2 ON (t1.TIME_INTERVAL_ID = t2.TIME_INTERVAL_ID); 

      -- we append the sd values as 0 when there is no data from event table (for all selected locations/selected types) 
      car_out =  SELECT DISTINCT a.GEO_GROUP_ID, a.GEO_NAME, a.GEO_FILTER_TYPE, b.EQUIP_GROUP_ID, b.EQUIP_NAME, b.EQUIP_FILTER_TYPE,
                 c.TIME_INTERVAL_ID, c.SEQUENCE, c.START_TIMESTAMP AS START_TIME, c.END_TIMESTAMP AS END_TIME, c.INTER_SECONDS
                 FROM :locations a , :equips b, :intervals c;   
                             
      var_out  = SELECT 'EQUIP_IDLE_RATE' AS NODE_ID,a.GEO_GROUP_ID AS GEO_ID, a.GEO_NAME, a.GEO_FILTER_TYPE, a.EQUIP_GROUP_ID AS EQUIP_TYPE,  
                 a.EQUIP_NAME, a.EQUIP_FILTER_TYPE, a.TIME_INTERVAL_ID, a.SEQUENCE, a.START_TIME, a.END_TIME,
                 a.INTER_SECONDS, 'RATE' AS OUTPUT_KEY,  TO_DECIMAL(IFNULL(b.IDLE_RATE,0),5,4) AS OUTPUT_VALUE, '' AS UNIT
                 FROM :car_out a 
                 LEFT OUTER JOIN :tmp_out b 
                 ON (a.GEO_GROUP_ID = b.GEO_GROUP_ID AND a.EQUIP_GROUP_ID = b.EQUIP_GROUP_ID AND a.TIME_INTERVAL_ID = b.TIME_INTERVAL_ID);          
      
      END IF;   
                         
      
END </definition>
    </calculationView>
  </calculationViews>
  <logicalModel id="Script_View">
    <descriptions/>
    <attributes>
      <attribute id="NODE_ID" order="1">
        <descriptions defaultDescription="NODE_ID"/>
        <keyMapping columnObjectName="Script_View" columnName="NODE_ID"/>
      </attribute>
      <attribute id="GEO_ID" order="2">
        <descriptions defaultDescription="IDLE_START"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_ID"/>
      </attribute>
      <attribute id="GEO_NAME" hidden="false" order="3">
        <descriptions defaultDescription="GEO_NAME"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_NAME"/>
      </attribute>
      <attribute id="GEO_FILTER_TYPE" hidden="false" order="4">
        <descriptions defaultDescription="GEO_FILTER_TYPE"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_FILTER_TYPE"/>
      </attribute>
      <attribute id="EQUIP_TYPE" order="5">
        <descriptions defaultDescription="IDLE_DATE"/>
        <keyMapping columnObjectName="Script_View" columnName="EQUIP_TYPE"/>
      </attribute>
      <attribute id="EQUIP_NAME" hidden="false" order="6">
        <descriptions defaultDescription="EQUIP_NAME"/>
        <keyMapping columnObjectName="Script_View" columnName="EQUIP_NAME"/>
      </attribute>
      <attribute id="EQUIP_FILTER_TYPE" hidden="false" order="7">
        <descriptions defaultDescription="EQUIP_FILTER_TYPE"/>
        <keyMapping columnObjectName="Script_View" columnName="EQUIP_FILTER_TYPE"/>
      </attribute>
      <attribute id="TIME_INTERVAL_ID" order="8">
        <descriptions defaultDescription="IDLE_END"/>
        <keyMapping columnObjectName="Script_View" columnName="TIME_INTERVAL_ID"/>
      </attribute>
      <attribute id="SEQUENCE" hidden="false" order="9">
        <descriptions defaultDescription="SEQUENCE"/>
        <keyMapping columnObjectName="Script_View" columnName="SEQUENCE"/>
      </attribute>
      <attribute id="START_TIME" hidden="false" order="10">
        <descriptions defaultDescription="START_TIME"/>
        <keyMapping columnObjectName="Script_View" columnName="START_TIME"/>
      </attribute>
      <attribute id="END_TIME" hidden="false" order="11">
        <descriptions defaultDescription="END_TIME"/>
        <keyMapping columnObjectName="Script_View" columnName="END_TIME"/>
      </attribute>
      <attribute id="INTER_SECONDS" hidden="false" order="12">
        <descriptions defaultDescription="INTER_SECONDS"/>
        <keyMapping columnObjectName="Script_View" columnName="INTER_SECONDS"/>
      </attribute>
      <attribute id="OUTPUT_KEY" order="13">
        <descriptions defaultDescription="OUTPUT_KEY"/>
        <keyMapping columnObjectName="Script_View" columnName="OUTPUT_KEY"/>
      </attribute>
      <attribute id="OUTPUT_VALUE" order="14">
        <descriptions defaultDescription="IDLE_RATE"/>
        <keyMapping columnObjectName="Script_View" columnName="OUTPUT_VALUE"/>
      </attribute>
      <attribute id="UNIT" order="15">
        <descriptions defaultDescription="UNIT"/>
        <keyMapping columnObjectName="Script_View" columnName="UNIT"/>
      </attribute>
    </attributes>
    <calculatedAttributes/>
    <privateDataFoundation>
      <tableProxies/>
      <joins/>
      <layout>
        <shapes/>
      </layout>
    </privateDataFoundation>
    <baseMeasures/>
    <calculatedMeasures/>
    <restrictedMeasures/>
    <localDimensions/>
  </logicalModel>
  <layout>
    <shapes>
      <shape modelObjectName="Output" modelObjectNameSpace="MeasureGroup">
        <upperLeftCorner x="40" y="85"/>
      </shape>
    </shapes>
  </layout>
</Calculation:scenario>