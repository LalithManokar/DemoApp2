<?xml version="1.0" encoding="UTF-8"?>
<Calculation:scenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Calculation="http://www.sap.com/ndb/BiModelCalculation.ecore" schemaVersion="2.3" id="cv_history_stock" applyPrivilegeType="ANALYTIC_PRIVILEGE" checkAnalyticPrivileges="true" defaultClient="crossClient" defaultLanguage="$$language$$" hierarchiesSQLEnabled="false" translationRelevant="true" visibility="internal" calculationScenarioType="SCRIPT_BASED" dataCategory="DEFAULT" enforceSqlExecution="false" executionSemantic="UNDEFINED" scriptParametersCaseSensitive="true">
  <descriptions defaultDescription="cv_equip_idle_rate"/>
  <localVariables/>
  <variableMappings/>
  <informationModelLayout relativeWidthScenario="27"/>
  <dataSources/>
  <calculationViews>
    <calculationView xsi:type="Calculation:SqlScriptView" id="Script_View">
      <descriptions/>
      <viewAttributes>
        <viewAttribute datatype="NVARCHAR" id="NODE_ID" length="32"/>
        <viewAttribute datatype="NVARCHAR" id="GEO_ID" length="22"/>
        <viewAttribute datatype="NVARCHAR" id="GEO_NAME" length="100"/>
        <viewAttribute datatype="INTEGER" id="GEO_FILTER_TYPE"/>
        <viewAttribute datatype="NVARCHAR" id="EQUIP_TYPE" length="22"/>
        <viewAttribute datatype="NVARCHAR" id="EQUIP_NAME" length="100"/>
        <viewAttribute datatype="INTEGER" id="EQUIP_FILTER_TYPE"/>
        <viewAttribute datatype="BIGINT" id="TIME_INTERVAL_ID"/>
        <viewAttribute datatype="BIGINT" id="SEQUENCE"/>
        <viewAttribute datatype="TIMESTAMP" id="START_TIME"/>
        <viewAttribute datatype="TIMESTAMP" id="END_TIME"/>
        <viewAttribute datatype="BIGINT" id="INTER_SECONDS"/>
        <viewAttribute datatype="NVARCHAR" id="OUTPUT_KEY" length="20"/>
        <viewAttribute datatype="INTEGER" id="OUTPUT_VALUE"/>
        <viewAttribute datatype="NVARCHAR" id="UNIT" length="10"/>
      </viewAttributes>
      <calculatedViewAttributes/>
      <definition> 
  
 BEGIN 
     
     DECLARE Filter_Calflag BIGINT;   
     DECLARE Unit VARCHAR(3); 
     DECLARE ExtQueryAttrGrpId BIGINT;
     DECLARE FILTER_CALCULATED_OK INTEGER := 1;
     DECLARE window_start TIMESTAMP;
     DECLARE window_end TIMESTAMP;    
     DECLARE ResourceCategory VARCHAR(20);  
     --DECLARE EXIT HANDLER FOR SQLEXCEPTION
     --SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM DUMMY;
            
       -- Get all the needed information:filter info, date offset, unit 
     CALL &quot;sap.tm.trp.db.pipeline::p_prepare_info_for_providers_generic&quot;(intervals, locations, equips,
           Filter_Calflag, Unit, ExtQueryAttrGrpId, ResourceCategory); 
     
     -- If the filered information are not calculated correctly, then return 
     IF :Filter_Calflag &lt;> :FILTER_CALCULATED_OK THEN 
        RETURN;
     END IF; 
     
     SELECT MIN(START_TIMESTAMP), MAX(END_TIMESTAMP) INTO window_start,window_end FROM :intervals; 
     
      -- get the gate in data from the tracking_history table      
     gateins = SELECT t2.EQUIP_GROUP_ID, t3.GEO_GROUP_ID, t1.EVENT_TIME
               FROM &quot;sap.tm.trp.db.semantic.event::v_gateinout_tracking_history&quot; t1 
               INNER JOIN  &quot;sap.tm.trp.db.semantic.resource::v_resource_category&quot; t6 
               ON (t1.RESOURCE_CATEGORY = t6.MAPPING_CODE AND t6.CODE = :ResourceCategory)
               INNER JOIN :equips t2 ON (t1.RESOURCE_TYPE = t2.EQUIP_CODE)
               INNER JOIN :locations t3 ON (t1.LOCATION_ID = t3.LOCATION_ID)
               WHERE t1.EVENT_CODE = 'GTI' 
               AND (t1.EVENT_TIME BETWEEN :window_start AND :window_end);  

     -- get the gate out data from the tracking_history table      
     gateouts = SELECT t2.EQUIP_GROUP_ID, t3.GEO_GROUP_ID, t1.EVENT_TIME
                FROM &quot;sap.tm.trp.db.semantic.event::v_gateinout_tracking_history&quot; t1 
                INNER JOIN  &quot;sap.tm.trp.db.semantic.resource::v_resource_category&quot; t6 
                ON (t1.RESOURCE_CATEGORY = t6.MAPPING_CODE AND t6.CODE = :ResourceCategory)                
                INNER JOIN :equips t2 ON (t1.RESOURCE_TYPE = t2.EQUIP_CODE)
                INNER JOIN :locations t3 ON (t1.LOCATION_ID = t3.LOCATION_ID)
                WHERE t1.EVENT_CODE = 'GTO'
                AND (t1.EVENT_TIME BETWEEN :window_start AND :window_end);            

      --get current stock:
     CURRENT_STOCK = 
         SELECT T2.GEO_GROUP_ID, T3.EQUIP_GROUP_ID,
         COUNT(T1.RESOURCE_ID) AS CURRENT_STOCK_WITH_STATUS
         FROM &quot;sap.tm.trp.db.semantic.resource::v_stock_resource_last_status&quot; T1 
         INNER JOIN :locations T2 ON (T1.LOCATION_ID = T2.LOCATION_ID)
         INNER JOIN :equips T3 ON (T1.RESOURCE_TYPE = T3.EQUIP_CODE)
         INNER JOIN  &quot;sap.tm.trp.db.semantic.resource::v_resource_category&quot; t6 
         ON (t1.RESOURCE_CATEGORY = t6.MAPPING_CODE AND t6.CODE = :ResourceCategory)         
         GROUP BY T2.GEO_GROUP_ID, T3.EQUIP_GROUP_ID;
    
     
     --Calculate the stock of the date that before current date:   
    --Already know current_stock, need to calculate the stock before current day:
    --stock1 = current_stock - get_in1  + get_out1
    --stock2 = stock1 -get_in2 + get_out1
    --stockn = stockn-1 - get_inn-1 + get_outn-1.

--refer to :&quot;sap.tm.trp.db.pipeline.operator::p_calc_provisional_stock&quot;
  gateins_with_timeInterval = SELECT T1.EQUIP_GROUP_ID, T1.GEO_GROUP_ID, 
  T2.TIME_INTERVAL_ID,COUNT(1) AS QUANTITY--,T2.START_TIMESTAMP AS START_DATE,T2.END_TIMESTAMP AS END_DATE
  FROM :gateins T1,:intervals T2 
 WHERE T1.EVENT_TIME BETWEEN T2.START_TIMESTAMP AND T2.END_TIMESTAMP
 GROUP BY T1.EQUIP_GROUP_ID, T1.GEO_GROUP_ID, T2.TIME_INTERVAL_ID;
  
  gateouts_with_timeInterval = SELECT T1.EQUIP_GROUP_ID, T1.GEO_GROUP_ID, 
  T2.TIME_INTERVAL_ID,COUNT(1) AS QUANTITY--,T2.START_TIMESTAMP AS START_DATE,T2.END_TIMESTAMP AS END_DATE
  FROM :gateouts T1,:intervals T2 
  WHERE T1.EVENT_TIME BETWEEN T2.START_TIMESTAMP AND T2.END_TIMESTAMP
  GROUP BY T1.EQUIP_GROUP_ID, T1.GEO_GROUP_ID, T2.TIME_INTERVAL_ID;
  
 
  agg_gateins = SELECT T1.EQUIP_GROUP_ID, T1.GEO_GROUP_ID,T1.TIME_INTERVAL_ID,
  SUM(T2.QUANTITY) AS GET_IN_NUM
  FROM :gateins_with_timeInterval T1
  LEFT OUTER JOIN :gateins_with_timeInterval T2 
  ON(T1.EQUIP_GROUP_ID = T2.EQUIP_GROUP_ID 
  AND T1.GEO_GROUP_ID = T2.GEO_GROUP_ID 
  AND T1.TIME_INTERVAL_ID>=T2.TIME_INTERVAL_ID)
  GROUP BY T1.EQUIP_GROUP_ID,T1.GEO_GROUP_ID,T1.TIME_INTERVAL_ID;
  
  agg_gateouts = SELECT T1.EQUIP_GROUP_ID, T1.GEO_GROUP_ID,T1.TIME_INTERVAL_ID,
  --COUNT(1) AS GET_OUT_NUM
  SUM(T2.QUANTITY) AS GET_OUT_NUM
  FROM :gateouts_with_timeInterval T1
  LEFT OUTER JOIN :gateouts_with_timeInterval T2 ON(T1.EQUIP_GROUP_ID = T2.EQUIP_GROUP_ID AND T1.GEO_GROUP_ID = T2.GEO_GROUP_ID AND T1.TIME_INTERVAL_ID>=T2.TIME_INTERVAL_ID)
  GROUP BY T1.EQUIP_GROUP_ID,T1.GEO_GROUP_ID,T1.TIME_INTERVAL_ID;
  
  --Agg_get_in_out 
AGG_GET_IN_OUT = SELECT IFNULL(T1.EQUIP_GROUP_ID,T2.EQUIP_GROUP_ID) AS EQUIP_GROUP_ID,
IFNULL(T1.GEO_GROUP_ID,T2.GEO_GROUP_ID ) AS GEO_GROUP_ID,T1.TIME_INTERVAL_ID,
(IFNULL(T2.GET_OUT_NUM,0) - IFNULL(T1.GET_IN_NUM,0)) AS DELTA_GET_IN_OUT_NUM
FROM :agg_gateins T1 
FULL JOIN :agg_gateouts T2 ON (T1.EQUIP_GROUP_ID = T2.EQUIP_GROUP_ID 
AND T1.GEO_GROUP_ID = T2.GEO_GROUP_ID 
AND T1.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID);

  
  CURRENT_STOCK_WITH_TIME_INTERVAL 
  = SELECT T1.GEO_GROUP_ID ,T1.EQUIP_GROUP_ID,
     T1.CURRENT_STOCK_WITH_STATUS,T2.TIME_INTERVAL_ID
  FROM :CURRENT_STOCK T1 CROSS JOIN :intervals T2;
  
  
  AGG_GET_IN_OUT_WITH_TIME_INTERVAL = SELECT T1.CURRENT_STOCK_WITH_STATUS,
  T1.TIME_INTERVAL_ID,T1.GEO_GROUP_ID,T1.EQUIP_GROUP_ID,
  IFNULL(T2.DELTA_GET_IN_OUT_NUM,0) AS DELTA_GET_IN_OUT_NUM
  FROM :CURRENT_STOCK_WITH_TIME_INTERVAL T1
  LEFT OUTER JOIN  :AGG_GET_IN_OUT T2 ON (T1.GEO_GROUP_ID = T2.GEO_GROUP_ID 
  AND T1.EQUIP_GROUP_ID = T2.EQUIP_GROUP_ID 
  AND T1.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID);
  
  /*
  tmp_out = SELECT T1.GEO_GROUP_ID,T1.EQUIP_GROUP_ID,T1.TIME_INTERVAL_ID,
  (T1.CURRENT_STOCK_WITH_STATUS - IFNULL(T2.GET_IN_NUM,0) + IFNULL(T3.GET_OUT_NUM,0)) AS STOCK_NUM
  FROM :CURRENT_STOCK_WITH_TIME_INTERVAL T1
  LEFT OUTER JOIN :agg_gateins T2 ON (T1.GEO_GROUP_ID = T2.GEO_GROUP_ID AND T1.EQUIP_GROUP_ID = T2.EQUIP_GROUP_ID AND T1.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID)
  LEFT OUTER JOIN :agg_gateouts T3 ON (T1.GEO_GROUP_ID = T3.GEO_GROUP_ID AND T1.EQUIP_GROUP_ID = T3.EQUIP_GROUP_ID AND T1.TIME_INTERVAL_ID = T3.TIME_INTERVAL_ID);
  
 
  
  */
  tmp_out2 = SELECT T1.GEO_GROUP_ID,T1.EQUIP_GROUP_ID,T1.TIME_INTERVAL_ID,T1.CURRENT_STOCK_WITH_STATUS + SUM(T2.DELTA_GET_IN_OUT_NUM) AS  STOCK_NUM
  FROM :AGG_GET_IN_OUT_WITH_TIME_INTERVAL T1
  INNER JOIN :AGG_GET_IN_OUT_WITH_TIME_INTERVAL T2 ON (T1.GEO_GROUP_ID = T2.GEO_GROUP_ID 
  AND T1.EQUIP_GROUP_ID = T2.EQUIP_GROUP_ID 
  AND T1.TIME_INTERVAL_ID >= T2.TIME_INTERVAL_ID)
  GROUP BY T1.GEO_GROUP_ID,T1.EQUIP_GROUP_ID,T1.TIME_INTERVAL_ID,T1.CURRENT_STOCK_WITH_STATUS;
  
  
   -- we append the sd values as 0 when there is no data from event table (for all selected locations/selected types) 
   car_out =  SELECT DISTINCT a.GEO_GROUP_ID, a.GEO_NAME, a.GEO_FILTER_TYPE, b.EQUIP_GROUP_ID, b.EQUIP_NAME, b.EQUIP_FILTER_TYPE,
                 c.TIME_INTERVAL_ID, c.SEQUENCE, c.START_TIMESTAMP AS START_TIME, c.END_TIMESTAMP AS END_TIME, c.INTER_SECONDS
                 FROM :locations a , :equips b, :intervals c;  
                 
  var_out  = SELECT 'HISTORIC_STOCK' AS NODE_ID,a.GEO_GROUP_ID AS GEO_ID, a.GEO_NAME, a.GEO_FILTER_TYPE, a.EQUIP_GROUP_ID AS EQUIP_TYPE,  
                 a.EQUIP_NAME, a.EQUIP_FILTER_TYPE, a.TIME_INTERVAL_ID, a.SEQUENCE, a.START_TIME, a.END_TIME,
                 a.INTER_SECONDS, 'QUANTITY' AS OUTPUT_KEY,  TO_DECIMAL(IFNULL(b.STOCK_NUM,0),5,4) AS OUTPUT_VALUE, '' AS UNIT
                 FROM :car_out a 
                 LEFT OUTER JOIN :tmp_out2 b 
                 ON (a.GEO_GROUP_ID = b.GEO_GROUP_ID AND a.EQUIP_GROUP_ID = b.EQUIP_GROUP_ID AND a.TIME_INTERVAL_ID = b.TIME_INTERVAL_ID);          
      
    
                         
      
END </definition>
    </calculationView>
  </calculationViews>
  <logicalModel id="Script_View">
    <descriptions/>
    <attributes>
      <attribute id="NODE_ID" order="1">
        <descriptions defaultDescription="NODE_ID"/>
        <keyMapping columnObjectName="Script_View" columnName="NODE_ID"/>
      </attribute>
      <attribute id="GEO_ID" order="2">
        <descriptions defaultDescription="IDLE_START"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_ID"/>
      </attribute>
      <attribute id="GEO_NAME" hidden="false" order="3">
        <descriptions defaultDescription="GEO_NAME"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_NAME"/>
      </attribute>
      <attribute id="GEO_FILTER_TYPE" hidden="false" order="4">
        <descriptions defaultDescription="GEO_FILTER_TYPE"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_FILTER_TYPE"/>
      </attribute>
      <attribute id="EQUIP_TYPE" order="5">
        <descriptions defaultDescription="IDLE_DATE"/>
        <keyMapping columnObjectName="Script_View" columnName="EQUIP_TYPE"/>
      </attribute>
      <attribute id="EQUIP_NAME" hidden="false" order="6">
        <descriptions defaultDescription="EQUIP_NAME"/>
        <keyMapping columnObjectName="Script_View" columnName="EQUIP_NAME"/>
      </attribute>
      <attribute id="EQUIP_FILTER_TYPE" hidden="false" order="7">
        <descriptions defaultDescription="EQUIP_FILTER_TYPE"/>
        <keyMapping columnObjectName="Script_View" columnName="EQUIP_FILTER_TYPE"/>
      </attribute>
      <attribute id="TIME_INTERVAL_ID" order="8">
        <descriptions defaultDescription="IDLE_END"/>
        <keyMapping columnObjectName="Script_View" columnName="TIME_INTERVAL_ID"/>
      </attribute>
      <attribute id="SEQUENCE" hidden="false" order="9">
        <descriptions defaultDescription="SEQUENCE"/>
        <keyMapping columnObjectName="Script_View" columnName="SEQUENCE"/>
      </attribute>
      <attribute id="START_TIME" hidden="false" order="10">
        <descriptions defaultDescription="START_TIME"/>
        <keyMapping columnObjectName="Script_View" columnName="START_TIME"/>
      </attribute>
      <attribute id="END_TIME" hidden="false" order="11">
        <descriptions defaultDescription="END_TIME"/>
        <keyMapping columnObjectName="Script_View" columnName="END_TIME"/>
      </attribute>
      <attribute id="INTER_SECONDS" hidden="false" order="12">
        <descriptions defaultDescription="INTER_SECONDS"/>
        <keyMapping columnObjectName="Script_View" columnName="INTER_SECONDS"/>
      </attribute>
      <attribute id="OUTPUT_KEY" order="13">
        <descriptions defaultDescription="OUTPUT_KEY"/>
        <keyMapping columnObjectName="Script_View" columnName="OUTPUT_KEY"/>
      </attribute>
      <attribute id="OUTPUT_VALUE" order="14">
        <descriptions defaultDescription="IDLE_RATE"/>
        <keyMapping columnObjectName="Script_View" columnName="OUTPUT_VALUE"/>
      </attribute>
      <attribute id="UNIT" order="15">
        <descriptions defaultDescription="UNIT"/>
        <keyMapping columnObjectName="Script_View" columnName="UNIT"/>
      </attribute>
    </attributes>
    <calculatedAttributes/>
    <privateDataFoundation>
      <tableProxies/>
      <joins/>
      <layout>
        <shapes/>
      </layout>
    </privateDataFoundation>
    <baseMeasures/>
    <calculatedMeasures/>
    <restrictedMeasures/>
    <localDimensions/>
  </logicalModel>
  <layout>
    <shapes>
      <shape modelObjectName="Output" modelObjectNameSpace="MeasureGroup">
        <upperLeftCorner x="40" y="85"/>
      </shape>
    </shapes>
  </layout>
</Calculation:scenario>