PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.stock::p_stock_bubble_map_of_the_resource" (
    IN EQUIPMENT_FILTER_ID BIGINT,
    IN LOCATION_FILTER_ID BIGINT,
    IN XMIN DOUBLE,
    IN XMAX DOUBLE,
    IN YMIN DOUBLE,
    IN YMAX DOUBLE,
    IN HIERARCHY_LEVEL INT,
    IN IN_RESOURCE_TYPE_ID NVARCHAR(20),
    OUT out_stock_bubble_map "sap.tm.trp.db.stock::tt_stock_bubble_map_info",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT,
    OUT GIS_TYPE VARCHAR(10),
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
    ) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
AS
IN_POLYGON CLOB;
SQL_STR CLOB;
BEGIN

	DECLARE I_COUNT INTEGER := 0;
    DECLARE LV_RESOURCE_CATEGORY STRING;
	DECLARE BUBBLE_FLAG SMALLINT :=1;
 
	
	CALL "sap.tm.trp.db.stock::p_get_the_current_stock_and_min_max_safety" (
    :EQUIPMENT_FILTER_ID,
    :LOCATION_FILTER_ID,
    :XMIN,
    :XMAX,
    :YMIN,
    :YMAX,
    :HIERARCHY_LEVEL,
    :IN_RESOURCE_TYPE_ID,
    TOO_MUCH_LOCATION_FLAG,
    GIS_TYPE,
    TOTAL_GEO,
    OUT_GEO_POLYGON_INFO_SQL,
    SQL_LOCATION_EQUIPMENT_STORAGE_INFO,
    SQL_CALL_ALERT,
    OUT_LOCATIONS_XPOS_YPOS_INVALID,
    LV_RESOURCE_CATEGORY
    );
                     
    SELECT COUNT(1) INTO I_COUNT 
    FROM :SQL_CALL_ALERT;
    
    IF :I_COUNT >0 THEN 
        --Get the deficit surplus info for the locations: 
        --Note: the deficit surplus info should use the total location list of the location filter, should not use the location list within the input polygon. the reason is that the alert score will use the total location to do the normalization, 
        --if use the location within the input polygon, when move the map on the screen, the location list may be changed according to different input polygon, so the alert score after normolization will be changed. the alert score should be the same 
        --for a specific location, it should not be changed if the moved the map.
        
    SQL_CALL_ALERT2 =  SELECT LOCATION_ID,LOCATION_NAME,LOCATION_TYPE,EQUIP_TYPE_ID,
    EQUIP_TYPE_NAME,EQUIP_TYPE_CATEGORY,DATE,STOCK,MIN_SAFETY_STOCK,MAX_SAFETY_STOCK,
    MAX_CAPACITY,:LV_RESOURCE_CATEGORY AS RESOURCE_CATEGORY
    FROM :SQL_CALL_ALERT;
    
		CALL "sap.tm.trp.db.hrf.resourceStock::p_call_resource_stock_controller"(:BUBBLE_FLAG,:SQL_CALL_ALERT2,OUT_ALERT_SQL,OUT_BUBBLE_SQL);		
    
		out_stock_bubble_map =
			SELECT T1.GEO_ID AS LOCATION_ID,T1.GEO_NAME AS LOCATION_NAME,
			    T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE,T2.BOUNDARY,
			    IFNULL(T3.SURPLUS_DEFICIT_NUM,0) AS SURPLUS_DEFICIT_NUM,
			    T1.CURRENT_STOCK,T3.MESSAGE,T1.MIN_SAFETY,T1.MAX_SAFETY
			FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO T1
			INNER JOIN :OUT_GEO_POLYGON_INFO_SQL T2 ON (T1.GEO_ID = T2.LOCATION_ID)
			LEFT OUTER JOIN 
				(SELECT * 
				FROM :OUT_BUBBLE_SQL 
				--WHERE EQUIP_TYPE_ID = 'N/A'
				WHERE EQUIP_TYPE_ID = :IN_RESOURCE_TYPE_ID
				) T3 ON (T1.GEO_ID = T3.LOCATION_ID );
				
	ELSE	   
	
		out_stock_bubble_map =  
			SELECT T1.GEO_ID AS LOCATION_ID,T1.GEO_NAME AS LOCATION_NAME,
			    T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE,T2.BOUNDARY,
			    NULL AS SURPLUS_DEFICIT_NUM,T1.CURRENT_STOCK ,NULL AS MESSAGE,T1.MIN_SAFETY,T1.MAX_SAFETY
			FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO T1 
			INNER JOIN :OUT_GEO_POLYGON_INFO_SQL T2 ON (T1.GEO_ID = T2.LOCATION_ID);
			
	END IF;

END;