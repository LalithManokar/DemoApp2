PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.stock::p_stock_alert_map_without_attributegroup" (
    IN EQUIPMENT_FILTER_ID BIGINT,
    IN LOCATION_FILTER_ID BIGINT,
    IN XMIN DOUBLE,
    IN XMAX DOUBLE,
    IN YMIN DOUBLE,
    IN YMAX DOUBLE,
    IN HIERARCHY_LEVEL INT,
    OUT out_stock_alert_map "sap.tm.trp.db.stock::tt_stock_alert_map_info",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT,
    OUT GIS_TYPE VARCHAR(10)) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
AS
GEO_FLAG INT;
EQUIP_FLAG INT;
IN_POLYGON CLOB;
SQL_STR CLOB;
BEGIN
    
    DECLARE LOCATION_TYPE_LOCATION SMALLINT := 1;
	 DECLARE LOCATION_TYPE_LOCATIONGROUP SMALLINT :=2;
	 DECLARE LOCATION_TYPE_REGION SMALLINT :=5;
	 DECLARE LOCATION_TYPE_REGIONGROUP SMALLINT := 6;
	 DECLARE EQUIPMENT_TYPE_EQUIPMENT SMALLINT :=1;
	 DECLARE EQUIPMENT_TYPE_EQUIPMENTGROUP SMALLINT :=2;
	 DECLARE ALERT_FLAG SMALLINT :=0;
	 DECLARE BUBBLE_FLAG SMALLINT :=1;
	 DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER :=2000;
	 DECLARE I_COUNT INTEGER := 0;
	 DECLARE LOCATION_TYPE VARCHAR(30);
	 DECLARE GIS_TYPE_POINT VARCHAR(30) := 'POINT';
	 DECLARE GIS_TYPE_POLYGON VARCHAR(30) := 'POLYGON';
	 DECLARE MAX_LEVEL INTEGER := 0 ;
	 DECLARE LV_RESOURCE_CATEGORY STRING;
	 DECLARE LV_RESOURCE_CATEGORY_TYPE STRING;
	 TOO_MUCH_LOCATION_FLAG :=0; 
 
   
  SQL_RESOURCE_TYPE = 
	SELECT FILTER_TYPE,RESOURCE_CATEGORY,RESOURCE_CATEGORY_TYPE
		FROM "sap.tm.trp.db.filter::t_equipment_filter" T1
		INNER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings" T2
		ON T1.RESOURCE_CATEGORY = T2.CODE
  		WHERE T1.ID = :EQUIPMENT_FILTER_ID
  	;
  	
   RESOURCE_TYPES = SELECT DISTINCT T1.RESOURCE_TYPE_CODE
                FROM "sap.tm.trp.db.semantic.resource::v_resource_type_with_category" T1
                INNER JOIN :SQL_RESOURCE_TYPE T2
                ON (T1.RESOURCE_CATEGORY = T2.RESOURCE_CATEGORY);
   
   SELECT COUNT(1) INTO I_COUNT FROM :SQL_RESOURCE_TYPE;
   IF I_COUNT = 0 THEN
     RETURN;
   END IF;
   
   SQL_LOCATION_TYPE = SELECT LOCATION_TYPE FROM "sap.tm.trp.db.filter::t_location_filter" WHERE ID = :LOCATION_FILTER_ID;
   
    SELECT COUNT(1) INTO I_COUNT FROM :SQL_LOCATION_TYPE;
   IF I_COUNT = 0 THEN
     RETURN;
   END IF;
   
   SELECT IFNULL(MAX(FILTER_TYPE),1), IFNULL(MAX(RESOURCE_CATEGORY),'CN'), IFNULL(MAX(RESOURCE_CATEGORY_TYPE),'CN') INTO EQUIP_FLAG,LV_RESOURCE_CATEGORY, LV_RESOURCE_CATEGORY_TYPE FROM :SQL_RESOURCE_TYPE;
   SELECT IFNULL(MAX(LOCATION_TYPE),1) INTO GEO_FLAG FROM :SQL_LOCATION_TYPE;

	IN_POLYGON := 'Polygon(('||:xMin||' '||:yMax||','||:xMax||' '||:yMax||','||:xMax||' '||:ymin||','||:xMin||' '||:yMin||','||:xMin||' '||:yMax||'))';
   
    
	  TOTAL_LOCATION = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,
	                TO_DOUBLE(NULL) AS XPOS, TO_DOUBLE(NULL) AS YPOS, 
	                TO_CLOB(NULL) AS BOUNDARY 
	                FROM DUMMY;
	                
	                   
   BOUNDARY_GEO_INFO = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,
	                TO_DOUBLE(NULL) AS XPOS, TO_DOUBLE(NULL) AS YPOS, 
	                TO_CLOB(NULL) AS BOUNDARY,TO_CLOB(NULL) AS GEOTEXT 
	                FROM DUMMY;
				                
    --BEGIN REGION GROUP
    IF :GEO_FLAG = :LOCATION_TYPE_REGIONGROUP THEN
	    GIS_TYPE := :GIS_TYPE_POLYGON;
		LOCATION_TYPE := :LOCATION_TYPE_REGIONGROUP;
		    --Get the polygon of the regions of the region filter:
		         
				--Note: location group and region group will not consider the layer,according to the solution, it will not be drill down.
				BOUNDARY_GEO_INFO = 
				                SELECT F.REGION_GROUP_ID AS LOCATION_ID,F.REGION_GROUP_NAME AS LOCATION_NAME,NULL AS XPOS, NULL AS YPOS, 
				                NEW ST_MultiPoint(TO_VARCHAR(F.GEOTEXT) ).ST_CONVEXHULL().ST_ASTEXT() AS BOUNDARY ,F.GEOTEXT
				                FROM
					            (
						            SELECT  REGION_GROUP_ID, REGION_GROUP_NAME,
									CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG(',(' || XPOS || ' ' || YPOS || ')' )
						          	,2, 22000000)),')') AS GEOTEXT
						          	FROM 
						          	(   SELECT DISTINCT B2.ID AS REGION_GROUP_ID, B2.DESC AS REGION_GROUP_NAME,E.XPOS,E.YPOS
							          	FROM "sap.tm.trp.db.filter::t_location_filter_region" A
							          	INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" B ON A.REGION_GROUP_ID = B.REGION_GROUP_ID
							          	INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group" B2 ON (B.REGION_GROUP_ID = B2.ID)
							          	INNER JOIN "sap.tm.trp.db.semantic.location::v_zone" C ON (B.ZONE_ID = C.ID)--ON (A2.ZONE_ID = C.ID)
							          	INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" D ON (C.ID = D.ZONE_ID)
							          	LEFT OUTER JOIN  "sap.tm.trp.db.semantic.location::v_location" E ON (D.LOCATION_ID = E.ID)
							          	WHERE A.LOCATION_FILTER_ID = :LOCATION_FILTER_ID 
						          	)
						          	GROUP BY REGION_GROUP_ID, REGION_GROUP_NAME
					          	)F;
					          	--WHERE NEW ST_POLYGON(:IN_POLYGON).ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(F.GEOTEXT) ) )= 1;
					          	
			LOCATIONS_WITHIN_POLYGON = SELECT LOCATION_ID FROM :BOUNDARY_GEO_INFO 
			 WHERE NEW ST_POLYGON(:IN_POLYGON).ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(GEOTEXT) ) )= 1;
			 	           
			   SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
		       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
		         out_stock_alert_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
		                              NULL AS ALERT_NUM,NULL AS ALERT_SCORE
		                     FROM DUMMY;
		         TOO_MUCH_LOCATION_FLAG := 1;
		         RETURN;
		       END IF;
		IF :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENT THEN
			   
				SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
			 SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
			 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
			 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
			 T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY,
			 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
			 FROM
			  (  
			      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE,
			      A.BOUNDARY,B.EQUIP_TYPE_ID,B.EQUIP_TYPE_NAME,B.EQUIP_TYPE_CATEGORY
				      FROM
					   :BOUNDARY_GEO_INFO A,
					   (
					     SELECT C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_ID,C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
					     FROM :RESOURCE_TYPES C
					     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE) 
					     WHERE D.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
					      --Follwoing use t_config to replace dummy becuase dummy is a row based table
					     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
					     FROM DUMMY
					   )B
               ) TT0
              LEFT OUTER JOIN 
              (
                SELECT LOCATION_ID,
                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
              )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
              LEFT OUTER JOIN 
              (
                  SELECT T6.LOCATION_ID,T9.EQUI_CODE AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
			      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
			      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
                  INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (T6.LOCATION_ID = C.LOCATION_ID)
                  INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" B ON C.ZONE_ID = B.ZONE_ID
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (B.REGION_GROUP_ID = T7.REGION_GROUP_ID)			      
			      INNER JOIN  "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUI_CODE = T6.RESOURCE_TYPE)
			      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
			      AND T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID
			      GROUP BY T6.LOCATION_ID,T9.EQUI_CODE 
              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
              LEFT OUTER JOIN 
              (
                  SELECT T7.REGION_GROUP_ID AS LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)                  
                  INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (T6.LOCATION_ID = C.LOCATION_ID)
                  INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" B ON C.ZONE_ID = B.ZONE_ID
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (B.REGION_GROUP_ID = T7.REGION_GROUP_ID)			      
			      WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID
			      GROUP BY  T7.REGION_GROUP_ID
              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID);
						
						
		ELSEIF  :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENTGROUP THEN
					SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
				SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
				 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
				 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
				 MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY,
				 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
				FROM
				(  
				      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE, A.BOUNDARY,B.EQUIP_TYPE_ID,
				      B.EQUIP_TYPE_NAME, EQUIP_TYPE_CATEGORY
				      FROM
					   :BOUNDARY_GEO_INFO A,
					   (
					    SELECT D.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,F.DESC AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
					     FROM :RESOURCE_TYPES C
					     INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE)
					     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" E ON (D.EQUIPMENT_GROUP_ID = E.EQUIPMENT_GROUP_ID AND E.RESOURCE_CATEGORY = D.RESOURCE_CATEGORY)
					     INNER JOIN "sap.tm.trp.db.filter::t_equipment_filter" F ON (E.EQUIPMENT_FILTER_ID = F.ID AND F.RESOURCE_CATEGORY = E.RESOURCE_CATEGORY)
					     WHERE E.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
					      --Follwoing use t_config to replace dummy becuase dummy is a row based table
					     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
					     FROM DUMMY
					   )B
				) TT0
				LEFT OUTER JOIN 
               (
	                SELECT LOCATION_ID,
	                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
	                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
	                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
               )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
              LEFT OUTER JOIN 
              (
                  SELECT T7.REGION_GROUP_ID AS LOCATION_ID,T9.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
			      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
			      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)			      
                  INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (T6.LOCATION_ID = C.LOCATION_ID)
                  INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" B ON C.ZONE_ID = B.ZONE_ID
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (B.REGION_GROUP_ID = T7.REGION_GROUP_ID)			      
			      INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T92 ON (T92.EQUI_CODE = T6.RESOURCE_TYPE)			      
			      INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID 
			      AND T9.RESOURCE_CATEGORY = T92.RESOURCE_CATEGORY)
			      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
			      GROUP BY T7.REGION_GROUP_ID,T9.EQUIPMENT_GROUP_ID 
              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
               LEFT OUTER JOIN 
              (
                  SELECT T7.REGION_GROUP_ID AS LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
                  INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (T6.LOCATION_ID = C.LOCATION_ID)
                  INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" B ON C.ZONE_ID = B.ZONE_ID
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (B.REGION_GROUP_ID = T7.REGION_GROUP_ID)			      
			      WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID
			      GROUP BY  T7.REGION_GROUP_ID
              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID);
							
							
		END IF;
    
    --************** END OF REGION GROUP
	ELSEIF :GEO_FLAG = :LOCATION_TYPE_LOCATION THEN
	    GIS_TYPE := :GIS_TYPE_POINT;
		LOCATION_TYPE := :LOCATION_TYPE_LOCATION;
		TOTAL_LOCATION =  SELECT T0.LOC_ID  AS LOCATION_ID, T0.NAME AS LOCATION_NAME
					    ,T0.XPOS,T0.YPOS,NULL AS BOUNDARY
					    FROM    (    SELECT A.ID AS LOC_ID, A.NAME,A.XPOS,A.YPOS
					               FROM "sap.tm.trp.db.semantic.location::v_location" A
					               INNER JOIN ( SELECT LOCATION_ID AS ID 
					                            FROM "sap.tm.trp.db.filter::t_location_filter_location" 
					                            WHERE LOCATION_FILTER_ID = :LOCATION_FILTER_ID
					                          ) B ON B.ID = A.ID
					               --WHERE A.XPOS BETWEEN :XMIN AND :XMAX AND A.YPOS BETWEEN :YMIN AND :YMAX
					           ) AS T0;
					           
		LOCATIONS_WITHIN_POLYGON = SELECT LOCATION_ID FROM :TOTAL_LOCATION 
		WHERE XPOS BETWEEN :XMIN AND :XMAX AND YPOS BETWEEN :YMIN AND :YMAX;
			
		   SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
	       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
	         out_stock_alert_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
	                             NULL AS ALERT_NUM,NULL AS ALERT_SCORE
	                     FROM DUMMY;
	         TOO_MUCH_LOCATION_FLAG := 1;
	         RETURN;
	       END IF;
		IF :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENT THEN
			SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
			 SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
			 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
			 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
			 T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY,
			 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
			 FROM
			  (  
			      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE,
			      A.BOUNDARY,B.EQUIP_TYPE_ID,B.EQUIP_TYPE_NAME,B.EQUIP_TYPE_CATEGORY
				      FROM
					   :TOTAL_LOCATION A,
					   (
					     --SELECT C.EQUISZTP AS EQUIP_TYPE_ID,C.EQUISZTP AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
					     SELECT C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_ID,C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
					     FROM :RESOURCE_TYPES C
					     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE) 
					     WHERE D.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
					      --Follwoing use t_config to replace dummy becuase dummy is a row based table
					     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
					     FROM DUMMY
					   )B
               ) TT0
              LEFT OUTER JOIN 
              (
                SELECT LOCATION_ID,
                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
              )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
              LEFT OUTER JOIN 
              (
                  SELECT T6.LOCATION_ID,T9.EQUI_CODE AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
			      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
			      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)			     
			      INNER JOIN  "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUI_CODE = T6.RESOURCE_TYPE)
			      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
			      AND T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID 
			      GROUP BY T6.LOCATION_ID,T9.EQUI_CODE 
              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
              LEFT OUTER JOIN 
              (
                  SELECT T6.LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)
			      WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID
			      GROUP BY  T6.LOCATION_ID
              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID)
              ;
				
		
		ELSEIF  :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENTGROUP THEN
				
				SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
				SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
				 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
				 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
				 MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY,
				 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
				FROM
				(  
				      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE, A.BOUNDARY,B.EQUIP_TYPE_ID,
				      B.EQUIP_TYPE_NAME, EQUIP_TYPE_CATEGORY
				      FROM
					   :TOTAL_LOCATION A,
					   (
					    SELECT D.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,F.DESC AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
					     --FROM  "sap.tm.trp.db.equipment::v_resource" C
					     FROM :RESOURCE_TYPES C
					     INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE)
					     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" E ON (D.EQUIPMENT_GROUP_ID = E.EQUIPMENT_GROUP_ID AND E.RESOURCE_CATEGORY = D.RESOURCE_CATEGORY)
					     INNER JOIN "sap.tm.trp.db.filter::t_equipment_filter" F ON (E.EQUIPMENT_FILTER_ID = F.ID AND F.RESOURCE_CATEGORY = E.RESOURCE_CATEGORY)
					     WHERE E.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
					      --Follwoing use t_config to replace dummy becuase dummy is a row based table
					     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
					     FROM DUMMY
					   )B
				) TT0
				LEFT OUTER JOIN 
               (
	                SELECT LOCATION_ID,
	                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
	                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
	                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
               )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
              LEFT OUTER JOIN 
              (
                  SELECT T6.LOCATION_ID,T9.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
			      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
			      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)			    
			      INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T92 ON (T92.EQUI_CODE = T6.RESOURCE_TYPE)
			      INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID
			       AND T9.RESOURCE_CATEGORY = T92.RESOURCE_CATEGORY)
			      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
			      GROUP BY T6.LOCATION_ID,T9.EQUIPMENT_GROUP_ID 
              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
              LEFT OUTER JOIN 
              (
                  SELECT T6.LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)
			      WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID 
			      GROUP BY  T6.LOCATION_ID
              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID);
				
		END IF;
	                     
	ELSEIF :GEO_FLAG = :LOCATION_TYPE_LOCATIONGROUP THEN
	     GIS_TYPE := :GIS_TYPE_POINT;
		 LOCATION_TYPE := :LOCATION_TYPE_LOCATIONGROUP;
		 TOTAL_LOCATION = SELECT T0.LOC_GROUP_ID  AS LOCATION_ID, T0.LOCATION_GROUP_NAME AS LOCATION_NAME,
				    T0.XPOS,T0.YPOS,NULL AS BOUNDARY
				    FROM    (  SELECT C.ID AS LOC_GROUP_ID, C.DESC AS LOCATION_GROUP_NAME,AVG(A.XPOS) AS XPOS, AVG(A.YPOS) AS YPOS
				               FROM "sap.tm.trp.db.semantic.location::v_location" A
				               INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" B ON B.LOCATION_ID = A.ID
				               INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group" C ON C.ID = B.LOCATION_GROUP_ID
				               INNER JOIN ( SELECT LOCATION_GROUP_ID AS ID 
				                             FROM "sap.tm.trp.db.filter::t_location_filter_location"
					                         WHERE LOCATION_FILTER_ID = :LOCATION_FILTER_ID
					                      ) D ON D.ID = C.ID
					           GROUP BY C.ID,C.DESC
					           --HAVING AVG(A.XPOS) BETWEEN :XMIN AND :XMAX AND AVG(A.YPOS) BETWEEN :YMIN AND :YMAX
				           ) AS T0;
				           
		LOCATIONS_WITHIN_POLYGON = SELECT LOCATION_ID FROM :TOTAL_LOCATION 
			WHERE XPOS BETWEEN :XMIN AND :XMAX AND YPOS BETWEEN :YMIN AND :YMAX;
			
		 SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
	       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
	         out_stock_alert_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
	                              NULL AS ALERT_NUM,NULL AS ALERT_SCORE
	                     FROM DUMMY;
	         TOO_MUCH_LOCATION_FLAG := 1;
	         RETURN;
	       END IF;
				           
		IF :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENT THEN
			SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
			 SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
			 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
			 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
			 T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY,
			 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
			 FROM
			  (  
			      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE,
			      A.BOUNDARY,B.EQUIP_TYPE_ID,B.EQUIP_TYPE_NAME,B.EQUIP_TYPE_CATEGORY
				      FROM
					   :TOTAL_LOCATION A,
					   (
					     
					     SELECT C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_ID,C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
					     FROM :RESOURCE_TYPES C
					     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE) 
					     WHERE D.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
					      --Follwoing use t_config to replace dummy becuase dummy is a row based table
					     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
					     FROM DUMMY
					   )B
               ) TT0
              LEFT OUTER JOIN 
              (
                SELECT LOCATION_ID,
                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
              )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
              LEFT OUTER JOIN 
              (
                  SELECT B.LOCATION_GROUP_ID AS LOCATION_ID,T9.EQUI_CODE AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
			      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
			      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
			      INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" B ON B.LOCATION_ID = T6.LOCATION_ID
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (B.LOCATION_GROUP_ID = T7.LOCATION_GROUP_ID)			      
			      INNER JOIN  "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUI_CODE = T6.RESOURCE_TYPE)
			      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
			      AND T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID 
			      GROUP BY B.LOCATION_GROUP_ID,T9.EQUI_CODE 
              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
              LEFT OUTER JOIN 
              (
                  SELECT B.LOCATION_GROUP_ID AS LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
			      INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" B ON B.LOCATION_ID = T6.LOCATION_ID
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (B.LOCATION_GROUP_ID = T7.LOCATION_GROUP_ID)			      
			      WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID 
			      GROUP BY  B.LOCATION_GROUP_ID
              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID);
				
				
		ELSEIF  :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENTGROUP THEN
			SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
				SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
				 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
				 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
				 MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY,
				 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
				FROM
				(  
				      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE, A.BOUNDARY,B.EQUIP_TYPE_ID,
				      B.EQUIP_TYPE_NAME, EQUIP_TYPE_CATEGORY
				      FROM
					   :TOTAL_LOCATION A,
					   (
					    SELECT D.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,F.DESC AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
					     FROM :RESOURCE_TYPES C
					     INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE)
					     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" E ON (D.EQUIPMENT_GROUP_ID = E.EQUIPMENT_GROUP_ID AND E.RESOURCE_CATEGORY = D.RESOURCE_CATEGORY)
					     INNER JOIN "sap.tm.trp.db.filter::t_equipment_filter" F ON (E.EQUIPMENT_FILTER_ID = F.ID AND F.RESOURCE_CATEGORY = E.RESOURCE_CATEGORY)
					     WHERE E.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
					      --Follwoing use t_config to replace dummy becuase dummy is a row based table
					     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
					     FROM DUMMY
					   )B
				) TT0
				LEFT OUTER JOIN 
               (
	                SELECT LOCATION_ID,
	                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
	                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
	                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
               )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
              LEFT OUTER JOIN 
              (
                  SELECT B.LOCATION_GROUP_ID AS LOCATION_ID,T9.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
			      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
			      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
			      INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" B ON B.LOCATION_ID = T6.LOCATION_ID
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (B.LOCATION_GROUP_ID = T7.LOCATION_GROUP_ID)			      
			      INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T92 ON (T92.EQUI_CODE = T6.RESOURCE_TYPE)			     
			      INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID 
			      AND T9.RESOURCE_CATEGORY = T92.RESOURCE_CATEGORY)
			      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
			      GROUP BY B.LOCATION_GROUP_ID,T9.EQUIPMENT_GROUP_ID 
              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
               LEFT OUTER JOIN 
              (
                  SELECT B.LOCATION_GROUP_ID AS LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				  ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
			      INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" B ON B.LOCATION_ID = T6.LOCATION_ID
			      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (B.LOCATION_GROUP_ID = T7.LOCATION_GROUP_ID)			      
			      WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID  
			      GROUP BY  B.LOCATION_GROUP_ID
              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID);
				
		END IF;
	
	ELSEIF :GEO_FLAG = :LOCATION_TYPE_REGION THEN
		 
		  --Get the level of the region:
		SELECT IFNULL(MAX(A2.LEVEL),0) AS MAX_LEVEL INTO MAX_LEVEL
		FROM "sap.tm.trp.db.filter::t_location_filter_region" A
		INNER JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A2 ON (A.ZONE_ID = A2.ROOT_ID)
		WHERE LOCATION_FILTER_ID = :LOCATION_FILTER_ID AND A2.LEVEL = :HIERARCHY_LEVEL;
		
		IF(:HIERARCHY_LEVEL > :MAX_LEVEL) THEN --It should be the location if the input level > max level of the region
		    GIS_TYPE := :GIS_TYPE_POINT;
			LOCATION_TYPE := :LOCATION_TYPE_LOCATION;
			
			LOCATIONS_OF_THE_REGION_FILTER = SELECT T2.LOCATION_ID
			FROM "sap.tm.trp.db.filter::t_location_filter_region" T1
			INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" T2 ON (T1.ZONE_ID = T2.ZONE_ID)
			WHERE T1.LOCATION_FILTER_ID = :LOCATION_FILTER_ID;
			
			
			TOTAL_LOCATION =  SELECT T0.LOC_ID  AS LOCATION_ID, T0.NAME AS LOCATION_NAME
						    ,T0.XPOS,T0.YPOS,NULL AS BOUNDARY
						    FROM    (    SELECT A.ID AS LOC_ID, A.NAME,A.XPOS,A.YPOS
						               FROM "sap.tm.trp.db.semantic.location::v_location" A
						               INNER JOIN ( SELECT LOCATION_ID AS ID 
						                            FROM :LOCATIONS_OF_THE_REGION_FILTER
						                          ) B ON B.ID = A.ID
						              -- WHERE A.XPOS BETWEEN :XMIN AND :XMAX AND A.YPOS BETWEEN :YMIN AND :YMAX
						           ) AS T0;
						           
			LOCATIONS_WITHIN_POLYGON = SELECT LOCATION_ID FROM :TOTAL_LOCATION 
			WHERE XPOS BETWEEN :XMIN AND :XMAX AND YPOS BETWEEN :YMIN AND :YMAX;
			
			   SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
		       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
		         out_stock_alert_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
		                             NULL AS ALERT_NUM,NULL AS ALERT_SCORE
		                     FROM DUMMY;
		         TOO_MUCH_LOCATION_FLAG := 1;
		         RETURN;
		       END IF;
			IF :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENT THEN
				SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
				 SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
				 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
				 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
				 T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY,
				 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
				 FROM
				  (  
				      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE,
				      A.BOUNDARY,B.EQUIP_TYPE_ID,B.EQUIP_TYPE_NAME,B.EQUIP_TYPE_CATEGORY
					      FROM
						   :TOTAL_LOCATION A,
						   (
						     SELECT C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_ID,C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
						     FROM :RESOURCE_TYPES C
						     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE) 
						     WHERE D.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
						      --Follwoing use t_config to replace dummy becuase dummy is a row based table
						     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
						     FROM DUMMY
						   )B
	               ) TT0
	              LEFT OUTER JOIN 
	              (
	                SELECT LOCATION_ID,
	                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
	                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
	                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
	              )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
	              LEFT OUTER JOIN 
	              (
	                  SELECT T6.LOCATION_ID,T9.EQUI_CODE AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
				      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
				      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				      ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
				      INNER JOIN :LOCATIONS_OF_THE_REGION_FILTER T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)				     
				      INNER JOIN  "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUI_CODE = T6.RESOURCE_TYPE)
				      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
				      GROUP BY T6.LOCATION_ID,T9.EQUI_CODE 
	              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
	              LEFT OUTER JOIN 
	              (
	                  SELECT T6.LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
	                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
	                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				      ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
				      INNER JOIN :LOCATIONS_OF_THE_REGION_FILTER T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)
				      GROUP BY  T6.LOCATION_ID
	              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID)
	              ;
					
			
			ELSEIF  :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENTGROUP THEN
					
					SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
					SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
					 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
					 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
					 MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY,
					 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
					FROM
					(  
					      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE, A.BOUNDARY,B.EQUIP_TYPE_ID,
					      B.EQUIP_TYPE_NAME, EQUIP_TYPE_CATEGORY
					      FROM
						   :TOTAL_LOCATION A,
						   (
						    SELECT D.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,F.DESC AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
						     FROM :RESOURCE_TYPES C
						     INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE)
						     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" E ON (D.EQUIPMENT_GROUP_ID = E.EQUIPMENT_GROUP_ID AND E.RESOURCE_CATEGORY = D.RESOURCE_CATEGORY)
						     INNER JOIN "sap.tm.trp.db.filter::t_equipment_filter" F ON (E.EQUIPMENT_FILTER_ID = F.ID AND F.RESOURCE_CATEGORY = E.RESOURCE_CATEGORY)
						     WHERE E.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
						      --Follwoing use t_config to replace dummy becuase dummy is a row based table
						     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
						     FROM DUMMY
						   )B
					) TT0
					LEFT OUTER JOIN 
	               (
		                SELECT LOCATION_ID,
		                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
		                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
		                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
	               )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
	              LEFT OUTER JOIN 
	              (
	                  SELECT T6.LOCATION_ID,T9.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
				      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
				      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				      ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
				      INNER JOIN :LOCATIONS_OF_THE_REGION_FILTER T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)				      
				      INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T92 ON (T92.EQUI_CODE = T6.RESOURCE_TYPE)
				      INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID 
				      AND T9.RESOURCE_CATEGORY = T92.RESOURCE_CATEGORY)
				      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
				      GROUP BY T6.LOCATION_ID,T9.EQUIPMENT_GROUP_ID 
	              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
	              LEFT OUTER JOIN 
	              (
	                  SELECT T6.LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
	                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
	                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				      ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
				      INNER JOIN :LOCATIONS_OF_THE_REGION_FILTER T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)
				      GROUP BY  T6.LOCATION_ID
	              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID);
					
			END IF;
			
			
		ELSE
		    GIS_TYPE := :GIS_TYPE_POLYGON;
		    LOCATION_TYPE := :LOCATION_TYPE_REGION;
			--Get the polygon of the regions of the region filter:
					 BOUNDARY_GEO_INFO = 
				                SELECT E.ZONE_ID AS LOCATION_ID,E.ZONE_NAME AS LOCATION_NAME,NULL AS XPOS,NULL AS YPOS,
				                NEW ST_MultiPoint(TO_VARCHAR(E.GEOTEXT) ).ST_CONVEXHULL().ST_ASTEXT() AS BOUNDARY,E.GEOTEXT
				                FROM
					            (
						            SELECT ZONE_ID, NAME AS ZONE_NAME,
									CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG( ',(' || XPOS || ' ' || YPOS || ')' )
						          	,2, 22000000)),')') AS GEOTEXT
						          	FROM
						          	( 
								          	SELECT DISTINCT B.ID AS ZONE_ID,B.NAME, D.XPOS,D.YPOS
								          	FROM "sap.tm.trp.db.filter::t_location_filter_region" A
								          	INNER JOIN (
										          	SELECT * FROM 
										          	"sap.tm.trp.db.systemmanagement.location::t_region_item"
										          	WHERE LEVEL = :HIERARCHY_LEVEL
								          	) A2 ON (A.ZONE_ID = A2.ROOT_ID )
								          	INNER JOIN "sap.tm.trp.db.semantic.location::v_zone" B ON (A2.ZONE_ID = B.ID)
								          	INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (B.ID = C.ZONE_ID)
								          	LEFT OUTER JOIN  "sap.tm.trp.db.semantic.location::v_location" D ON (C.LOCATION_ID = D.ID)
								          	WHERE LOCATION_FILTER_ID = :LOCATION_FILTER_ID 
						          	)
						          	GROUP BY ZONE_ID,NAME
					          	)E;
					          	--WHERE NEW ST_POLYGON(:IN_POLYGON).ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(E.GEOTEXT) ) )= 1; 
					
			LOCATIONS_WITHIN_POLYGON = SELECT LOCATION_ID FROM :BOUNDARY_GEO_INFO 
			 WHERE NEW ST_POLYGON(:IN_POLYGON).ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(GEOTEXT) ) )= 1;
						           
				   SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
			       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
			         out_stock_alert_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
			                              NULL AS ALERT_NUM,NULL AS ALERT_SCORE
			                     FROM DUMMY;
			         TOO_MUCH_LOCATION_FLAG := 1;
			         RETURN;
			       END IF;
			IF :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENT THEN
					SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
				 SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
				 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
				 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
				 T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY,
				 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
				 FROM
				  (  
				      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE,
				      A.BOUNDARY,B.EQUIP_TYPE_ID,B.EQUIP_TYPE_NAME,B.EQUIP_TYPE_CATEGORY
					      FROM
						   :BOUNDARY_GEO_INFO A,
						   (
						    
						     SELECT C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_ID,C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
						     FROM :RESOURCE_TYPES C
						     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE) 
						     WHERE D.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
						      --Follwoing use t_config to replace dummy becuase dummy is a row based table
						     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
						     FROM DUMMY
						   )B
	               ) TT0
	              LEFT OUTER JOIN 
	              (
	                SELECT LOCATION_ID,
	                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
	                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
	                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
	              )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
	              LEFT OUTER JOIN 
	              (
	                  SELECT T7.ZONE_ID AS LOCATION_ID,T9.EQUI_CODE AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
				      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
				      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				      ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
	                  INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (T6.LOCATION_ID = C.LOCATION_ID)
				      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (C.ZONE_ID = T7.ZONE_ID)
				      INNER JOIN  "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUI_CODE = T6.RESOURCE_TYPE)
				      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
				      AND T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID
				      GROUP BY T7.ZONE_ID,T9.EQUI_CODE 
	              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
	              LEFT OUTER JOIN 
	              (
	                  SELECT T7.ZONE_ID AS LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
	                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
	                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				      ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
	                  INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (T6.LOCATION_ID = C.LOCATION_ID)
				      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (C.ZONE_ID = T7.ZONE_ID)				      
				      WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID  
				      GROUP BY  T7.ZONE_ID
	              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID);
					
					
			ELSEIF  :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENTGROUP THEN
			
					SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
					SELECT TT0.LOCATION_ID,TT0.LOCATION_NAME,TT0.LATITUDE,TT0.LONGITUDE,TT0.BOUNDARY, 
					 TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
					CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
					 MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY,
					 :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
					FROM
					(  
					      SELECT A.LOCATION_ID,A.LOCATION_NAME,A.XPOS AS LATITUDE,A.XPOS AS LONGITUDE, A.BOUNDARY,B.EQUIP_TYPE_ID,
					      B.EQUIP_TYPE_NAME, EQUIP_TYPE_CATEGORY
					      FROM
						   :BOUNDARY_GEO_INFO A,
						   (
						    SELECT D.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,F.DESC AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
						     FROM :RESOURCE_TYPES C
						     INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE)
						     INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" E ON (D.EQUIPMENT_GROUP_ID = E.EQUIPMENT_GROUP_ID AND E.RESOURCE_CATEGORY = D.RESOURCE_CATEGORY)
						     INNER JOIN "sap.tm.trp.db.filter::t_equipment_filter" F ON (E.EQUIPMENT_FILTER_ID = F.ID AND F.RESOURCE_CATEGORY = E.RESOURCE_CATEGORY)
						     WHERE E.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
						      --Follwoing use t_config to replace dummy becuase dummy is a row based table
						     UNION ALL SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
						     FROM DUMMY
						   )B
					) TT0
					LEFT OUTER JOIN 
	               (
		                SELECT LOCATION_ID,
		                CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
		                MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
		                FROM ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T1
	               )T1 ON (TT0.LOCATION_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
	              LEFT OUTER JOIN 
	              (
	                  SELECT T7.ZONE_ID AS LOCATION_ID,T9.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
				      FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
				      INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				      ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
	                  INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (T6.LOCATION_ID = C.LOCATION_ID)
				      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (C.ZONE_ID = T7.ZONE_ID)				     
				      INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T92 ON (T92.EQUI_CODE = T6.RESOURCE_TYPE)
				      INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID
				      AND T9.RESOURCE_CATEGORY = T92.RESOURCE_CATEGORY)
				      WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
				      GROUP BY T7.ZONE_ID,T9.EQUIPMENT_GROUP_ID 
	              )T2 ON (TT0.LOCATION_ID = T2.LOCATION_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
	              LEFT OUTER JOIN 
	              (
	                  SELECT T7.ZONE_ID AS LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
	                  FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
	                  INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
				      ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
	                  INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (T6.LOCATION_ID = C.LOCATION_ID)
				      INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (C.ZONE_ID = T7.ZONE_ID)				     
				      WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID
				      GROUP BY  T7.ZONE_ID
	              )T3 ON (T1.LOCATION_ID = T3.LOCATION_ID);
							
							
			END IF;
			
		
		END IF;
		    
	
	
	ELSE 
	SQL_LOCATION_EQUIPMENT_STORAGE_INFO =  SELECT NULL AS LOCATION_ID, NULL AS LOCATION_NAME, NULL AS LATITUDE,NULL AS LONGITUDE, NULL AS BOUNDARY, 
	                     NULL AS EQUIP_TYPE_ID,NULL AS EQUIP_TYPE_NAME,
	                     NULL AS CURRENT_STOCK , NULL AS MIN_SAFETY,NULL AS MAX_SAFETY,
						 NULL AS MAX_CAPACITY,NULL AS LOCATION_TYPE,NULL AS EQUIP_TYPE_CATEGORY
						 FROM DUMMY;
						 
	END IF;
	          
    SQL_CALL_ALERT = SELECT LOCATION_ID,LOCATION_NAME,LOCATION_TYPE, :HIERARCHY_LEVEL AS LOCATION_LEVEL,
                    EQUIP_TYPE_ID,
                    EQUIP_TYPE_NAME,
                    EQUIP_TYPE_CATEGORY,
                     CURRENT_DATE AS DATE,CURRENT_STOCK AS STOCK,MIN_SAFETY AS MIN_SAFETY_STOCK, MAX_SAFETY AS MAX_SAFETY_STOCK,MAX_CAPACITY
                     FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO; 
                                      
    SELECT COUNT(1) INTO I_COUNT FROM :SQL_CALL_ALERT; 
    IF :I_COUNT >0 THEN   
    
    IF (:LOCATION_TYPE = :LOCATION_TYPE_REGION OR :LOCATION_TYPE = :LOCATION_TYPE_REGIONGROUP) THEN
        TOTAL_LOCATION = SELECT LOCATION_ID,LOCATION_NAME,XPOS,YPOS,BOUNDARY FROM :BOUNDARY_GEO_INFO;
       END IF;
              
		
		
      CALL "sap.tm.trp.db.hrf.resourceStock::p_get_stock_alert_for_map"(:SQL_CALL_ALERT, :LV_RESOURCE_CATEGORY, OUT_ALERT_SQL);
		
		--NOTE: for the map,assume all the location on the same level should be the same type, and all the data is the same. so
		--following left outer join do not need to add the criteria T1.LOCATION_TYPE = T2.LOCATION_TYPE , data = data  etc.
		out_stock_alert_map = SELECT T1.LOCATION_ID,T1.LOCATION_NAME,T1.XPOS AS LATITUDE,T1.YPOS AS LONGITUDE,T1.BOUNDARY,
		                     IFNULL(T2.ALERT_NUM,0) AS ALERT_NUM,T2.ALERT_SCORE
		                      FROM :TOTAL_LOCATION T1
		                      INNER JOIN :LOCATIONS_WITHIN_POLYGON T3 ON (T1.LOCATION_ID = T3.LOCATION_ID)--REMOVE THE LOCATIONS THAT DO NOT WILTHIN THE INPUT POLYGON
		                      LEFT OUTER JOIN :OUT_ALERT_SQL T2 ON (T1.LOCATION_ID = T2.LOCATION_ID); 
		                     
	ELSE
	  out_stock_alert_map =  SELECT T1.LOCATION_ID,T1.LOCATION_NAME,T1.LATITUDE,T1.LONGITUDE,T1.BOUNDARY,0 AS ALERT_NUM,NULL AS ALERT_SCORE
		                     FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO T1;
	END IF;
	

END;