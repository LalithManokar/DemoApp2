PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.stock::p_stock_pie_map_without_attributegroup" (
    IN EQUIPMENT_FILTER_ID BIGINT,
    IN LOCATION_FILTER_ID BIGINT,
    IN XMIN DOUBLE,
    IN XMAX DOUBLE,
    IN YMIN DOUBLE,
    IN YMAX DOUBLE,
    IN HIERARCHY_LEVEL INT,
    OUT out_stock_pie_map "sap.tm.trp.db.stock::tt_stock_pie_map_info",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT,
    OUT GIS_TYPE VARCHAR(10),
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
     ) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
AS
--GEO_FLAG INT;
EQUIP_FLAG INT;
IN_POLYGON CLOB;
SQL_STR CLOB;
BEGIN

	DECLARE EQUIPMENT_TYPE_EQUIPMENT SMALLINT :=1;
	DECLARE EQUIPMENT_TYPE_EQUIPMENTGROUP SMALLINT :=2;
	DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER :=2000;
	DECLARE I_COUNT INTEGER := 0;
	DECLARE LOCATION_TYPE SMALLINT;					--Changed from VARCHAR(30) to SMALLINT  By Shawn	 August 5, 2016
	DECLARE GIS_TYPE_POINT VARCHAR(30) := 'POINT';
	DECLARE GIS_TYPE_POLYGON VARCHAR(30) := 'POLYGON';
	DECLARE MAX_LEVEL INTEGER := 0;
	DECLARE VAR_LOCATION_NUM INTEGER := 0 ;	
	DECLARE RESOURCE_CATEGORY NVARCHAR(20);		
	TOO_MUCH_LOCATION_FLAG :=0; 
    
    SELECT IFNULL(MAX(RESOURCE_CATEGORY),'') INTO RESOURCE_CATEGORY
    FROM "sap.tm.trp.db.filter::t_equipment_filter" 
    	WHERE ID = :EQUIPMENT_FILTER_ID;
    
	SQL_RESOURCE_TYPE = 
		SELECT FILTER_TYPE 
		FROM "sap.tm.trp.db.filter::t_equipment_filter" T1
		WHERE ID = :EQUIPMENT_FILTER_ID;
   
   	SELECT COUNT(1) INTO I_COUNT FROM :SQL_RESOURCE_TYPE;
   	IF I_COUNT = 0 THEN
    	RETURN;
   	END IF;
   
   	SQL_LOCATION_TYPE = SELECT LOCATION_TYPE FROM "sap.tm.trp.db.filter::t_location_filter" WHERE ID = :LOCATION_FILTER_ID;
   
   	SELECT COUNT(1) INTO I_COUNT FROM :SQL_LOCATION_TYPE;
   	IF I_COUNT = 0 THEN
    	RETURN;
   	END IF;   
   
	SELECT TOP 1 FILTER_TYPE INTO EQUIP_FLAG FROM :SQL_RESOURCE_TYPE;
	SELECT TOP 1 LOCATION_TYPE INTO LOCATION_TYPE FROM :SQL_LOCATION_TYPE;

	IN_POLYGON := 'Polygon(('||:xMin||' '||:yMax||','||:xMax||' '||:yMax||','||:xMax||' '||:ymin||','||:xMin||' '||:yMin||','||:xMin||' '||:yMax||'))';
	
	CALL "sap.tm.trp.db.stock::p_get_locations_of_location_filter" (:LOCATION_FILTER_ID,:LOCATION_TYPE,:HIERARCHY_LEVEL,TOTAL_GEO,TOTAL_GEO_ID_AND_LOCATION_IDS,GIS_TYPE);

	IN_LOCATION_IDS_SQL = SELECT GEO_ID AS ID FROM :TOTAL_GEO;
	
	--Get the locations and the polygon or xpoint ypoint info that within the input polygon:
	CALL "sap.tm.trp.db.stock::p_get_xpos_or_polygon_info_for_location_for_stock"(:IN_LOCATION_IDS_SQL,
	:LOCATION_TYPE,:IN_POLYGON,
	:HIERARCHY_LEVEL,:LOCATION_FILTER_ID,
	OUT_GEO_POLYGON_INFO_SQL,
	GIS_TYPE,OUT_LOCATIONS_XPOS_YPOS_INVALID);
    
    SELECT COUNT(1) INTO VAR_LOCATION_NUM FROM :OUT_GEO_POLYGON_INFO_SQL;
                 
    
    IF VAR_LOCATION_NUM > :MAX_LOCATION_NUM_ON_MAP THEN
	         out_stock_pie_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
	                              NULL AS EQUIP_STATUS_CATEGORY,NULL AS CURRENT_STOCK
	                     FROM DUMMY;
	         TOO_MUCH_LOCATION_FLAG := 1;
        RETURN;
	END IF;

	 --performance optimization
	equip_ids_auth = SELECT IFNULL(EQUIP_CODE,EQUIP_GROUP_ID) AS RESOURCE_TYPE_CODE,NULL AS RESOURCE_TYPE_NAME,:EQUIP_FLAG AS RESOURCE_TYPE ,
   	                    EQUIP_GROUP_ID EQUIPMENT_GROUP_ID,RESOURCE_CATEGORY
				        FROM "sap.tm.trp.db.booking::cv_auth_equip_code_by_equip_filter_id"
				        (PLACEHOLDER."$$IV_EQUIPMENT_FILTER_ID$$"=> :EQUIPMENT_FILTER_ID);

	IF :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENT THEN	
			
		SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
			SELECT T2.GEO_ID,T2.GEO_NAME,T12.EQUIP_STATUS_CATEGORY,IFNULL(T12.CURRENT_STOCK_WITH_STATUS,0) AS CURRENT_STOCK 
			FROM :TOTAL_GEO T2
			LEFT JOIN 
				(SELECT T3.GEO_ID,T6.STOCK_STATUS_DESC AS EQUIP_STATUS_CATEGORY,COUNT(T6.RESOURCE_ID) AS CURRENT_STOCK_WITH_STATUS
				FROM :TOTAL_GEO_ID_AND_LOCATION_IDS T3
				INNER JOIN "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6 ON (T3.LOCATION_ID = T6.LOCATION_ID)
	            INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t7 
	            ON (t6.RESOURCE_CATEGORY = t7.MAPPING_CODE AND t7.CODE = :RESOURCE_CATEGORY) 
				/*INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUI_CODE = T6.RESOURCE_TYPE)
				WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID */
				 --performance optimization
				INNER JOIN :equip_ids_auth T9 ON T9.RESOURCE_TYPE_CODE = T6.RESOURCE_TYPE
				GROUP BY  T3.GEO_ID,T6.STOCK_STATUS_DESC
			)T12 ON (T2.GEO_ID = T12.GEO_ID);
	
	ELSEIF  :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENTGROUP THEN

		SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
			SELECT T2.GEO_ID,T2.GEO_NAME,T12.EQUIP_STATUS_CATEGORY,IFNULL(T12.CURRENT_STOCK_WITH_STATUS,0) AS CURRENT_STOCK 
			FROM :TOTAL_GEO T2
			LEFT JOIN 
				(SELECT T3.GEO_ID,T6.STOCK_STATUS_DESC AS EQUIP_STATUS_CATEGORY,COUNT(T6.RESOURCE_ID) AS CURRENT_STOCK_WITH_STATUS
				FROM :TOTAL_GEO_ID_AND_LOCATION_IDS T3
				INNER JOIN "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6 ON (T3.LOCATION_ID = T6.LOCATION_ID)
			    INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t7 
                ON (t6.RESOURCE_CATEGORY = t7.MAPPING_CODE AND t7.CODE = :RESOURCE_CATEGORY)
				INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T92 ON (T92.EQUI_CODE = T6.RESOURCE_TYPE)
				--INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID AND T9.RESOURCE_CATEGORY = T92.RESOURCE_CATEGORY)
				--WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID 
				 --performance optimization
				INNER JOIN :equip_ids_auth T9 ON 
				(T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID AND T9.RESOURCE_CATEGORY = T92.RESOURCE_CATEGORY)
				GROUP BY  T3.GEO_ID,T6.STOCK_STATUS_DESC
			)T12 ON (T2.GEO_ID = T12.GEO_ID);
	
	END IF;

	
	out_stock_pie_map = 
		SELECT T1.GEO_ID AS LOCATION_ID,T1.GEO_NAME AS LOCATION_NAME,
			T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE,T2.BOUNDARY,T1.EQUIP_STATUS_CATEGORY,T1.CURRENT_STOCK
	    FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO T1
	    INNER JOIN :OUT_GEO_POLYGON_INFO_SQL T2 ON (T1.GEO_ID = T2.LOCATION_ID);

END;


