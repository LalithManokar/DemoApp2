PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.stock::p_stock_alert_map" (
    IN EQUIPMENT_FILTER_ID BIGINT,
    IN LOCATION_FILTER_ID BIGINT,
    IN XMIN DOUBLE,
    IN XMAX DOUBLE,
    IN YMIN DOUBLE,
    IN YMAX DOUBLE,
    IN HIERARCHY_LEVEL INT,
    OUT out_stock_alert_map "sap.tm.trp.db.stock::tt_stock_alert_map_info",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT,
    OUT GIS_TYPE VARCHAR(10),
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
    ) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_TRP"
    
AS
--GEO_FLAG INT;
EQUIP_FLAG INT;
IN_POLYGON CLOB;
SQL_STR CLOB;
BEGIN

	DECLARE EQUIPMENT_TYPE_EQUIPMENT SMALLINT :=1;
	DECLARE EQUIPMENT_TYPE_EQUIPMENTGROUP SMALLINT :=2;
	DECLARE ALERT_FLAG SMALLINT :=0;
	DECLARE BUBBLE_FLAG SMALLINT :=1;
	DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER :=2000;

	DECLARE I_COUNT INTEGER := 0;
	DECLARE LOCATION_TYPE SMALLINT;					--Changed from VARCHAR(30) to SMALLINT  By Shawn	 August 5, 2016
	DECLARE GIS_TYPE_POINT VARCHAR(30) := 'POINT';
	DECLARE GIS_TYPE_POLYGON VARCHAR(30) := 'POLYGON';
	DECLARE MAX_LEVEL INTEGER := 0;
	DECLARE VAR_LOCATION_NUM INTEGER := 0;			
	DECLARE LV_RESOURCE_CATEGORY STRING;
	DECLARE LV_RESOURCE_CATEGORY_TYPE STRING;
	
	TOO_MUCH_LOCATION_FLAG :=0; 
 
  	SQL_RESOURCE_TYPE = 
		SELECT FILTER_TYPE,RESOURCE_CATEGORY,RESOURCE_CATEGORY_TYPE
		FROM "sap.tm.trp.db.filter::t_equipment_filter" T1
		INNER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings" T2
		ON T1.RESOURCE_CATEGORY = T2.CODE
  		WHERE T1.ID = :EQUIPMENT_FILTER_ID;
   
	SELECT COUNT(1) INTO I_COUNT FROM :SQL_RESOURCE_TYPE;
   	IF I_COUNT = 0 THEN
    	RETURN;
   	END IF;
   
	SQL_LOCATION_TYPE = SELECT LOCATION_TYPE FROM "sap.tm.trp.db.filter::t_location_filter" WHERE ID = :LOCATION_FILTER_ID;
   
	SELECT COUNT(1) INTO I_COUNT FROM :SQL_LOCATION_TYPE;
	IF I_COUNT = 0 THEN
    	RETURN;
	END IF;  
   
   	SELECT IFNULL(MAX(FILTER_TYPE),1), IFNULL(MAX(RESOURCE_CATEGORY),'CN'), IFNULL(MAX(RESOURCE_CATEGORY_TYPE),'CN') INTO EQUIP_FLAG,LV_RESOURCE_CATEGORY, LV_RESOURCE_CATEGORY_TYPE FROM :SQL_RESOURCE_TYPE;
   	SELECT IFNULL(MAX(LOCATION_TYPE),1) INTO LOCATION_TYPE FROM :SQL_LOCATION_TYPE;

	IN_POLYGON := 'Polygon(('||:xMin||' '||:yMax||','||:xMax||' '||:yMax||','||:xMax||' '||:ymin||','||:xMin||' '||:yMin||','||:xMin||' '||:yMax||'))';
	
	CALL "sap.tm.trp.db.stock::p_get_locations_of_location_filter" (:LOCATION_FILTER_ID,:LOCATION_TYPE,:HIERARCHY_LEVEL,TOTAL_GEO,TOTAL_GEO_ID_AND_LOCATION_IDS,GIS_TYPE);

	IN_LOCATION_IDS_SQL = SELECT GEO_ID AS ID FROM :TOTAL_GEO;
	
	--Get the locations and the polygon or xpoint ypoint info that within the input polygon:
	CALL "sap.tm.trp.db.stock::p_get_xpos_or_polygon_info_for_location_for_stock"(:IN_LOCATION_IDS_SQL,:LOCATION_TYPE,:IN_POLYGON,:HIERARCHY_LEVEL,:LOCATION_FILTER_ID,OUT_GEO_POLYGON_INFO_SQL,GIS_TYPE,OUT_LOCATIONS_XPOS_YPOS_INVALID);
    
    SELECT COUNT(1) INTO VAR_LOCATION_NUM FROM :OUT_GEO_POLYGON_INFO_SQL;
                 
    
    IF VAR_LOCATION_NUM > :MAX_LOCATION_NUM_ON_MAP THEN
	         out_stock_pie_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
	                              NULL AS EQUIP_STATUS_CATEGORY,NULL AS CURRENT_STOCK
	                     FROM DUMMY;
	         TOO_MUCH_LOCATION_FLAG := 1;
        RETURN;
	END IF;



	IF :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENT THEN	
	
		SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
			SELECT TT0.GEO_ID,TT0.GEO_NAME,TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
				 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
				 T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY, :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
			FROM
				(SELECT A.GEO_ID,A.GEO_NAME,B.EQUIP_TYPE_ID,B.EQUIP_TYPE_NAME,B.EQUIP_TYPE_CATEGORY
				FROM :TOTAL_GEO A,
					(SELECT C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_ID,C.RESOURCE_TYPE_CODE AS EQUIP_TYPE_NAME,:EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
					FROM "sap.tm.trp.db.semantic.resource::v_resource_type" C
					INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" D ON (D.EQUI_CODE = C.RESOURCE_TYPE_CODE) 
					WHERE D.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
					--Follwoing use t_config to replace dummy becuase dummy is a row based table
					UNION ALL 
					SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
					FROM DUMMY
				  	)B
	            ) TT0
				LEFT OUTER JOIN 
	            	(SELECT LOCATION_ID, CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
	                	MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
	                FROM "sap.tm.trp.db.stock::t_stock_config" 
	                WHERE RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY
	                ) T1 
	            ON (TT0.GEO_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
				LEFT OUTER JOIN 
	            	(SELECT T3.GEO_ID,T9.EQUI_CODE AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
		      		 FROM :TOTAL_GEO_ID_AND_LOCATION_IDS T3
				     INNER JOIN "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6 ON (T3.LOCATION_ID = T6.LOCATION_ID)
				     INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t7 
                     ON (t6.RESOURCE_CATEGORY = t7.MAPPING_CODE AND t7.CODE = :LV_RESOURCE_CATEGORY)  
				     INNER JOIN  "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUI_CODE = T6.RESOURCE_TYPE)
				     WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
				     GROUP BY T3.GEO_ID,T9.EQUI_CODE 
					)T2 
				ON (TT0.GEO_ID = T2.GEO_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
	            LEFT OUTER JOIN 
	            	(SELECT T3.GEO_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
	                FROM :TOTAL_GEO_ID_AND_LOCATION_IDS T3
	                INNER JOIN "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6 ON (T3.LOCATION_ID = T6.LOCATION_ID)
	                INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t7 
                    ON (t6.RESOURCE_CATEGORY = t7.MAPPING_CODE AND t7.CODE = :LV_RESOURCE_CATEGORY) 				    
				    GROUP BY T3.GEO_ID
	              	)T3 
	            ON (T1.LOCATION_ID = T3.GEO_ID);
			
			
	ELSEIF  :EQUIP_FLAG = :EQUIPMENT_TYPE_EQUIPMENTGROUP THEN

		SQL_LOCATION_EQUIPMENT_STORAGE_INFO = 
			SELECT TT0.GEO_ID AS GEO_ID,TT0.GEO_NAME AS GEO_NAME,TT0.EQUIP_TYPE_ID,TT0.EQUIP_TYPE_NAME,
				 CASE WHEN TT0.EQUIP_TYPE_ID = 'N/A' THEN IFNULL(T3.CURRENT_STOCK,0) ELSE IFNULL(T2.CURRENT_STOCK,0) END AS CURRENT_STOCK,
				 T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY, :LOCATION_TYPE AS LOCATION_TYPE,TT0.EQUIP_TYPE_CATEGORY
			FROM
				(SELECT A.GEO_ID,A.GEO_NAME,B.EQUIP_TYPE_ID,B.EQUIP_TYPE_NAME,B.EQUIP_TYPE_CATEGORY
				FROM :TOTAL_GEO A,
					(
					 SELECT G.ID AS EQUIP_TYPE_ID, G.CODE AS EQUIP_TYPE_NAME, :EQUIP_FLAG AS EQUIP_TYPE_CATEGORY
		  			 FROM "sap.tm.trp.db.systemmanagement::t_equipment_group" G
		   			 INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" E on (E.EQUIPMENT_GROUP_ID = G.ID)
		   			 WHERE E.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
					--Follwoing use t_config to replace dummy becuase dummy is a row based table
					UNION ALL 
					SELECT 'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY
					FROM DUMMY
				  	)B
	            ) TT0
				LEFT OUTER JOIN 
	            	(SELECT LOCATION_ID, CASE WHEN LOCATION_HEAD_FLAG = 1 THEN 'N/A' ELSE EQUIP_CODE END AS EQUIP_TYPE_ID,
	                	MIN_SAFETY,MAX_SAFETY,MAX_CAPACITY
	                FROM "sap.tm.trp.db.stock::t_stock_config" 
	                WHERE RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY
	                ) T1 
	            ON (TT0.GEO_ID = T1.LOCATION_ID AND T1.EQUIP_TYPE_ID = TT0.EQUIP_TYPE_ID )
				LEFT OUTER JOIN 
	            	(SELECT T3.GEO_ID,T9.EQUIPMENT_GROUP_ID AS EQUIP_TYPE_ID,COUNT(DISTINCT T6.RESOURCE_ID) AS CURRENT_STOCK
		      		 FROM :TOTAL_GEO_ID_AND_LOCATION_IDS T3
				     INNER JOIN "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6 ON (T3.LOCATION_ID = T6.LOCATION_ID)
			         INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t7 
                     ON (t6.RESOURCE_CATEGORY = t7.MAPPING_CODE AND t7.CODE = :LV_RESOURCE_CATEGORY) 
				     --INNER JOIN "sap.tm.trp.db.equipment::v_resource"  T8 ON (T6.RESOURCE_ID = T8.RESID)
				      INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T92 ON (T92.EQUI_CODE = T6.RESOURCE_TYPE)
				      INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID AND T9.RESOURCE_CATEGORY = T92.RESOURCE_CATEGORY)
				     WHERE T9.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID 
				     GROUP BY T3.GEO_ID,T9.EQUIPMENT_GROUP_ID 
					)T2 
				ON (TT0.GEO_ID = T2.GEO_ID AND TT0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
	            LEFT OUTER JOIN 
	            	(SELECT T3.GEO_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
	                FROM :TOTAL_GEO_ID_AND_LOCATION_IDS T3
	                INNER JOIN "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6 ON (T3.LOCATION_ID = T6.LOCATION_ID)
	                INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t7 
                    ON (t6.RESOURCE_CATEGORY = t7.MAPPING_CODE AND t7.CODE = :LV_RESOURCE_CATEGORY) 				    
				    GROUP BY T3.GEO_ID
	              	)T3 
	            ON (T1.LOCATION_ID = T3.GEO_ID);
	END IF;

	
    SQL_CALL_ALERT = 
    	SELECT GEO_ID AS LOCATION_ID,GEO_NAME AS LOCATION_NAME,LOCATION_TYPE, :HIERARCHY_LEVEL AS LOCATION_LEVEL,
        	EQUIP_TYPE_ID,EQUIP_TYPE_NAME,EQUIP_TYPE_CATEGORY,
            CURRENT_DATE AS DATE,CURRENT_STOCK AS STOCK,MIN_SAFETY AS MIN_SAFETY_STOCK, MAX_SAFETY AS MAX_SAFETY_STOCK,MAX_CAPACITY
        FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO;
                     
    SELECT COUNT(1) INTO I_COUNT FROM :SQL_CALL_ALERT; 
                 
                 
    IF :I_COUNT >0 THEN 
   
       	CALL "sap.tm.trp.db.hrf.resourceStock::p_get_stock_alert_for_map"(:SQL_CALL_ALERT, :LV_RESOURCE_CATEGORY, OUT_ALERT_SQL);

		out_stock_alert_map =
			SELECT T1.GEO_ID AS LOCATION_ID,T1.GEO_NAME AS LOCATION_NAME,T3.XPOS AS LATITUDE,T3.YPOS AS LONGITUDE,T3.BOUNDARY,
		        IFNULL(T2.ALERT_NUM,0) AS ALERT_NUM,T2.ALERT_SCORE
		    FROM :TOTAL_GEO T1
		    INNER JOIN :OUT_GEO_POLYGON_INFO_SQL T3 ON (T1.GEO_ID = T3.LOCATION_ID)
		    LEFT OUTER JOIN :OUT_ALERT_SQL T2 ON (T1.GEO_ID = T2.LOCATION_ID); 
		                          
	
	ELSE	   
		
		out_stock_alert_map =
			SELECT T1.GEO_ID AS LOCATION_ID,T1.GEO_NAME AS LOCATION_NAME,T3.XPOS AS LATITUDE,T3.YPOS AS LONGITUDE,T3.BOUNDARY,0 AS ALERT_NUM,NULL AS ALERT_SCORE
		    FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO T1
		    INNER JOIN :OUT_GEO_POLYGON_INFO_SQL T3 ON (T1.GEO_ID = T3.LOCATION_ID);
			
	END IF;

END;




