PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.stock::p_stock_bubble_map_without_attributegroup" (
    IN EQUIPMENT_FILTER_ID BIGINT, --Note: As requested by Terry, In Bubble on Map view, the equipment filter and attribute filter should not be considered, 2016/02/23. there is an confirmed email with title: Attribute Group and Equipment Filter Usage in Stock on Map
                                   --To enhance this in different categories scenario, use this input filter id to select resource category
    IN LOCATION_FILTER_ID BIGINT,
    IN XMIN DOUBLE,
    IN XMAX DOUBLE,
    IN YMIN DOUBLE,
    IN YMAX DOUBLE,
    IN HIERARCHY_LEVEL INT,
    OUT out_stock_bubble_map "sap.tm.trp.db.stock::tt_stock_bubble_map_info",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT,
    OUT GIS_TYPE VARCHAR(10))
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_TRP"
AS
GEO_FLAG INT;
EQUIP_FLAG INT;
IN_POLYGON CLOB;
SQL_STR CLOB;
BEGIN


	 DECLARE LOCATION_TYPE_LOCATION SMALLINT := 1;
	 DECLARE LOCATION_TYPE_LOCATIONGROUP SMALLINT :=2;
	 DECLARE LOCATION_TYPE_REGION SMALLINT :=5;
	 DECLARE LOCATION_TYPE_REGIONGROUP SMALLINT := 6;
	-- DECLARE EQUIPMENT_TYPE_EQUIPMENT SMALLINT :=1;
	-- DECLARE EQUIPMENT_TYPE_EQUIPMENTGROUP SMALLINT :=2;
	 DECLARE ALERT_FLAG SMALLINT :=0;
	 DECLARE BUBBLE_FLAG SMALLINT :=1;
	 DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER :=2000;
	 DECLARE I_COUNT INTEGER := 0;
	 DECLARE LOCATION_TYPE VARCHAR(30);
	 DECLARE GIS_TYPE_POINT VARCHAR(30) := 'POINT';
	 DECLARE GIS_TYPE_POLYGON VARCHAR(30) := 'POLYGON';
	 DECLARE MAX_LEVEL INTEGER := 0 ;
	 DECLARE LV_RESOURCE_CATEGORY STRING;
	 DECLARE LV_RESOURCE_CATEGORY_TYPE STRING;
	 TOO_MUCH_LOCATION_FLAG :=0;


   --location type
   SQL_LOCATION_TYPE = SELECT LOCATION_TYPE FROM "sap.tm.trp.db.filter::t_location_filter" WHERE ID = :LOCATION_FILTER_ID;
   SELECT COUNT(1) INTO I_COUNT FROM :SQL_LOCATION_TYPE;
   IF I_COUNT = 0 THEN
     RETURN;
   END IF;
   SELECT TOP 1 LOCATION_TYPE INTO GEO_FLAG FROM :SQL_LOCATION_TYPE;

   --resource category
   SELECT TOP 1 RESOURCE_CATEGORY, RESOURCE_CATEGORY_TYPE INTO LV_RESOURCE_CATEGORY, LV_RESOURCE_CATEGORY_TYPE 
   		FROM "sap.tm.trp.db.filter::t_equipment_filter" T1
   		INNER JOIN "sap.tm.trp.db.systemmanagement.customization::t_resource_category_settings" T2
   		ON T1.RESOURCE_CATEGORY = T2.CODE
   		WHERE T1.ID = :EQUIPMENT_FILTER_ID;



	IN_POLYGON := 'Polygon(('||:xMin||' '||:yMax||','||:xMax||' '||:yMax||','||:xMax||' '||:ymin||','||:xMin||' '||:yMin||','||:xMin||' '||:yMax||'))';


	IF :GEO_FLAG = :LOCATION_TYPE_LOCATION THEN
	     GIS_TYPE := :GIS_TYPE_POINT;
		LOCATION_TYPE := :LOCATION_TYPE_LOCATION;
		TOTAL_LOCATION =  SELECT T0.LOC_ID  AS LOCATION_ID, T0.NAME AS LOCATION_NAME
					    ,T0.XPOS,T0.YPOS
					    FROM    (    SELECT A.ID AS LOC_ID, A.NAME,A.XPOS,A.YPOS
					               FROM "sap.tm.trp.db.semantic.location::v_location" A
					               INNER JOIN ( SELECT LOCATION_ID AS ID
					                            FROM "sap.tm.trp.db.filter::t_location_filter_location"
					                            WHERE LOCATION_FILTER_ID = :LOCATION_FILTER_ID
					                          ) B ON B.ID = A.ID
					               --WHERE A.XPOS BETWEEN :XMIN AND :XMAX AND A.YPOS BETWEEN :YMIN AND :YMAX
					           ) AS T0;

		 LOCATIONS_WITHIN_POLYGON = SELECT LOCATION_ID FROM :TOTAL_LOCATION
			WHERE XPOS BETWEEN :XMIN AND :XMAX AND YPOS BETWEEN :YMIN AND :YMAX;

		   SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
	       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
	         out_stock_bubble_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
		                              NULL AS SURPLUS_DEFICIT_NUM,NULL AS CURRENT_STOCK,NULL AS MESSAGE,NULL AS MIN_SAFETY,NULL AS MAX_SAFETY
	                     FROM DUMMY;
	         TOO_MUCH_LOCATION_FLAG := 1;
	         RETURN;
	       END IF;


		   SQL_LOCATION_EQUIPMENT_STORAGE_INFO =
			 SELECT T2.LOCATION_ID,T2.LOCATION_NAME,T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE,NULL AS BOUNDARY,IFNULL(T12.CURRENT_STOCK,0) AS CURRENT_STOCK , T2.MIN_SAFETY,T2.MAX_SAFETY,T2.MAX_CAPACITY,
			 :LOCATION_TYPE AS LOCATION_TYPE
				FROM
				(
				    SELECT T0.LOCATION_ID, T0.LOCATION_NAME,T0.XPOS,T0.YPOS,T10.MIN_SAFETY,T10.MAX_SAFETY, T10.MAX_CAPACITY
				    FROM   :TOTAL_LOCATION T0
				    LEFT OUTER JOIN ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T10 ON (T0.LOCATION_ID = T10.LOCATION_ID  AND T10.LOCATION_HEAD_FLAG = 1)
				)T2
				LEFT JOIN
				(
				   SELECT T11.LOCATION_ID,T11.CURRENT_STOCK
				   FROM
				   (
					   --sum all the equip of the location that defined in equip filter and the attribute group as stock num of the location head, use the location head's min max setting
					   SELECT T7.LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
					   FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
					   INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
					   ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
					   INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)
					   WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID					   
					   GROUP BY T7.LOCATION_ID
				   )T11
				)T12 ON (T2.LOCATION_ID = T12.LOCATION_ID );

	ELSEIF :GEO_FLAG = :LOCATION_TYPE_LOCATIONGROUP THEN
	     GIS_TYPE := :GIS_TYPE_POINT;
		 LOCATION_TYPE := :LOCATION_TYPE_LOCATIONGROUP;
		 TOTAL_LOCATION = SELECT T0.LOC_GROUP_ID  AS LOCATION_ID, T0.LOCATION_GROUP_NAME AS LOCATION_NAME,
				    T0.XPOS,T0.YPOS
				    FROM    (  SELECT C.ID AS LOC_GROUP_ID, C.DESC AS LOCATION_GROUP_NAME,AVG(A.XPOS) AS XPOS, AVG(A.YPOS) AS YPOS
				               FROM "sap.tm.trp.db.semantic.location::v_location" A
				               INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" B ON B.LOCATION_ID = A.ID
				               INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group" C ON C.ID = B.LOCATION_GROUP_ID
				               INNER JOIN ( SELECT LOCATION_GROUP_ID AS ID
				                             FROM "sap.tm.trp.db.filter::t_location_filter_location"
					                         WHERE LOCATION_FILTER_ID = :LOCATION_FILTER_ID
					                      ) D ON D.ID = C.ID
					           GROUP BY C.ID,C.DESC
					          -- HAVING AVG(A.XPOS) BETWEEN :XMIN AND :XMAX AND AVG(A.YPOS) BETWEEN :YMIN AND :YMAX
				           ) AS T0;

		 LOCATIONS_WITHIN_POLYGON = SELECT LOCATION_ID FROM :TOTAL_LOCATION
			WHERE XPOS BETWEEN :XMIN AND :XMAX AND YPOS BETWEEN :YMIN AND :YMAX;

		 SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
	       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
	         out_stock_bubble_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
		                              NULL AS SURPLUS_DEFICIT_NUM,NULL AS CURRENT_STOCK,NULL AS MESSAGE,NULL AS MIN_SAFETY,NULL AS MAX_SAFETY
	                     FROM DUMMY;
	         TOO_MUCH_LOCATION_FLAG := 1;
	         RETURN;
	       END IF;


		SQL_LOCATION_EQUIPMENT_STORAGE_INFO =
			 SELECT T2.LOCATION_ID,T2.LOCATION_NAME,T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE,NULL AS BOUNDARY,IFNULL(T12.CURRENT_STOCK,0)AS CURRENT_STOCK,
			 T2.MIN_SAFETY,T2.MAX_SAFETY,T2.MAX_CAPACITY,:LOCATION_TYPE AS LOCATION_TYPE
				FROM
				(
				    SELECT T0.LOCATION_ID, T0.LOCATION_NAME,T0.XPOS,T0.YPOS,T10.MIN_SAFETY,T10.MAX_SAFETY, T10.MAX_CAPACITY
				    FROM   :TOTAL_LOCATION AS T0
				    LEFT OUTER JOIN ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T10 ON (T0.LOCATION_ID = T10.LOCATION_ID  AND T10.LOCATION_HEAD_FLAG = 1)

				)T2
				LEFT JOIN
				(
				   SELECT T11.LOCATION_GROUP_ID AS LOCATION_ID,T11.CURRENT_STOCK
				   FROM
				   (
				      --sum all the equip of the location that defined in equip filter and the attribute group as stock num of the location head, use the location head's min max setting
					   SELECT T7.LOCATION_GROUP_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
					   FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
					   INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
					   ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
					   INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" T72 ON (T6.LOCATION_ID = T72.LOCATION_ID)
					   INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (T72.LOCATION_GROUP_ID = T7.LOCATION_GROUP_ID)
					   INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T92 ON (T92.EQUI_CODE = T6.RESOURCE_TYPE)					   
					   INNER JOIN "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T9 ON (T9.EQUIPMENT_GROUP_ID = T92.EQUIPMENT_GROUP_ID)					   
					   WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID
					   GROUP BY T7.LOCATION_GROUP_ID
				   )T11
				)T12 ON (T2.LOCATION_ID = T12.LOCATION_ID);

	ELSEIF :GEO_FLAG = :LOCATION_TYPE_REGION THEN
		 --Get the level of the region:
		SELECT IFNULL(MAX(A2.LEVEL),0) AS MAX_LEVEL INTO MAX_LEVEL
		FROM "sap.tm.trp.db.filter::t_location_filter_region" A
		INNER JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A2 ON (A.ZONE_ID = A2.ROOT_ID)
		WHERE LOCATION_FILTER_ID = :LOCATION_FILTER_ID AND A2.LEVEL = :HIERARCHY_LEVEL;

		IF(:HIERARCHY_LEVEL > :MAX_LEVEL) THEN --It should be the location if the input level > max level of the region
		    LOCATIONS_OF_THE_REGION_FILTER = SELECT T2.LOCATION_ID
			FROM "sap.tm.trp.db.filter::t_location_filter_region" T1
			INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" T2 ON (T1.ZONE_ID = T2.ZONE_ID)
			WHERE T1.LOCATION_FILTER_ID = :LOCATION_FILTER_ID;

			 GIS_TYPE := :GIS_TYPE_POINT;
			LOCATION_TYPE := :LOCATION_TYPE_LOCATION;
			TOTAL_LOCATION =  SELECT T0.LOC_ID  AS LOCATION_ID, T0.NAME AS LOCATION_NAME
						    ,T0.XPOS,T0.YPOS
						    FROM    (    SELECT A.ID AS LOC_ID, A.NAME,A.XPOS,A.YPOS
						               FROM "sap.tm.trp.db.semantic.location::v_location" A
						               INNER JOIN ( SELECT LOCATION_ID AS ID
						                            FROM :LOCATIONS_OF_THE_REGION_FILTER
						                          ) B ON B.ID = A.ID
						              -- WHERE A.XPOS BETWEEN :XMIN AND :XMAX AND A.YPOS BETWEEN :YMIN AND :YMAX
						           ) AS T0;

			LOCATIONS_WITHIN_POLYGON = SELECT LOCATION_ID FROM :TOTAL_LOCATION
			WHERE XPOS BETWEEN :XMIN AND :XMAX AND YPOS BETWEEN :YMIN AND :YMAX;



			   SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
		       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
		         out_stock_bubble_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
			                              NULL AS SURPLUS_DEFICIT_NUM,NULL AS CURRENT_STOCK,NULL AS MESSAGE,NULL AS MIN_SAFETY,NULL AS MAX_SAFETY
		                     FROM DUMMY;
		         TOO_MUCH_LOCATION_FLAG := 1;
		         RETURN;
		       END IF;

			SQL_LOCATION_EQUIPMENT_STORAGE_INFO =
				 SELECT T2.LOCATION_ID,T2.LOCATION_NAME,T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE,NULL AS BOUNDARY,
				 IFNULL(T12.CURRENT_STOCK,0) AS CURRENT_STOCK , T2.MIN_SAFETY,T2.MAX_SAFETY,T2.MAX_CAPACITY,
				 :LOCATION_TYPE AS LOCATION_TYPE
					FROM
					(
					    SELECT T0.LOCATION_ID, T0.LOCATION_NAME,T0.XPOS,T0.YPOS,T10.MIN_SAFETY,T10.MAX_SAFETY, T10.MAX_CAPACITY
					    FROM   :TOTAL_LOCATION T0
					    LEFT OUTER JOIN ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T10 ON (T0.LOCATION_ID = T10.LOCATION_ID  AND T10.LOCATION_HEAD_FLAG = 1)
					)T2
					LEFT JOIN
					(
					   SELECT T11.LOCATION_ID,T11.CURRENT_STOCK
					   FROM
					   (
						   --sum all the equip of the location that defined in equip filter and the attribute group as stock num of the location head, use the location head's min max setting
						   SELECT T7.LOCATION_ID,(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
						   FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
						   INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
						   ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)
						   --INNER JOIN "sap.tm.trp.db.filter::t_location_filter_location"  T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)
						   INNER JOIN :TOTAL_LOCATION T7 ON (T6.LOCATION_ID = T7.LOCATION_ID)						   
						   GROUP BY T7.LOCATION_ID
					   )T11
					)T12 ON (T2.LOCATION_ID = T12.LOCATION_ID );



		--Deal with the region:
		ELSE
		    GIS_TYPE := :GIS_TYPE_POLYGON;
		    LOCATION_TYPE := :LOCATION_TYPE_REGION;
			    --Get the polygon of the regions of the region filter:

					  BOUNDARY_GEO_INFO=
				                SELECT E.ZONE_ID,E.ZONE_NAME,
				                NEW ST_MultiPoint(TO_VARCHAR(E.GEOTEXT) ).ST_CONVEXHULL().ST_ASTEXT() AS BOUNDARY,E.GEOTEXT
				                FROM
					            (
						            SELECT ZONE_ID, ZONE_NAME,
									CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG(
						                     			',(' || XPOS || ' ' || YPOS || ')')
						          	,2, 22000000)),')') AS GEOTEXT
						          	FROM
						          	(   SELECT DISTINCT B.ID AS ZONE_ID,B.NAME AS ZONE_NAME,D.XPOS,D.YPOS
							          	FROM "sap.tm.trp.db.filter::t_location_filter_region" A
							          	INNER JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A2 ON (A.ZONE_ID = A2.ROOT_ID)
							          	INNER JOIN "sap.tm.trp.db.semantic.location::v_zone" B ON (A2.ZONE_ID = B.ID)
							          	INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (B.ID = C.ZONE_ID)
							          	LEFT OUTER JOIN  "sap.tm.trp.db.semantic.location::v_location" D ON (C.LOCATION_ID = D.ID)
							          	WHERE LOCATION_FILTER_ID = :LOCATION_FILTER_ID AND A2.LEVEL = :HIERARCHY_LEVEL
						          	)
						          	GROUP BY ZONE_ID,ZONE_NAME

					          	)E;
					          	--WHERE NEW ST_POLYGON(:IN_POLYGON).ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(E.GEOTEXT) ) )= 1;

			 LOCATIONS_WITHIN_POLYGON = SELECT ZONE_ID AS LOCATION_ID FROM :BOUNDARY_GEO_INFO
			 WHERE NEW ST_POLYGON(:IN_POLYGON).ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(GEOTEXT) ) )= 1;

				   SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
			       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
			         out_stock_bubble_map = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
			                              NULL AS SURPLUS_DEFICIT_NUM,NULL AS CURRENT_STOCK,NULL AS MESSAGE,NULL AS MIN_SAFETY,NULL AS MAX_SAFETY
			                     FROM DUMMY;
			         TOO_MUCH_LOCATION_FLAG := 1;
			         RETURN;
			       END IF;

			SQL_LOCATION_EQUIPMENT_STORAGE_INFO =
					 SELECT T2.LOCATION_ID,T2.LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,T2.BOUNDARY,IFNULL(T12.CURRENT_STOCK,0) AS  CURRENT_STOCK,
					 T2.MIN_SAFETY,T2.MAX_SAFETY,T2.MAX_CAPACITY,:LOCATION_TYPE AS LOCATION_TYPE
						FROM
						(
						    SELECT T0.ZONE_ID  AS LOCATION_ID, T0.ZONE_NAME AS LOCATION_NAME,T0.BOUNDARY,T10.MIN_SAFETY,T10.MAX_SAFETY,T10.MAX_CAPACITY
						    FROM    (
						               SELECT A.ZONE_ID,A.ZONE_NAME,A.BOUNDARY
						               FROM :BOUNDARY_GEO_INFO A
						           ) AS T0
				                    LEFT OUTER JOIN ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T10 ON (T0.ZONE_ID = T10.LOCATION_ID  AND T10.LOCATION_HEAD_FLAG = 1)
						)T2
						LEFT JOIN
						(
						    SELECT T11.ZONE_ID AS LOCATION_ID ,T11.CURRENT_STOCK
						   FROM
						   (
							   --sum all the equip of the location that defined in equip filter and the attribute group as stock num of the location head, use the location head's min max setting
							   SELECT T72.ZONE_ID, (CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
							   FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
							   INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
						       ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)							   
							   INNER JOIN
					            (
						            SELECT A2.ZONE_ID,C.LOCATION_ID
						            FROM "sap.tm.trp.db.filter::t_location_filter_region" A
						          	INNER JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A2 ON (A.ZONE_ID = A2.ROOT_ID)
						          	INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" C ON (A2.ZONE_ID = C.ZONE_ID)
						          	WHERE A.LOCATION_FILTER_ID = :LOCATION_FILTER_ID AND A2.LEVEL = :HIERARCHY_LEVEL
					          	)T72 ON (T6.LOCATION_ID = T72.LOCATION_ID)					          	
					          	GROUP BY T72.ZONE_ID

						   )T11
						)T12 ON (T2.LOCATION_ID = T12.LOCATION_ID);

		END IF;



	ELSEIF :GEO_FLAG = :LOCATION_TYPE_REGIONGROUP THEN
	    GIS_TYPE := :GIS_TYPE_POLYGON;
		LOCATION_TYPE := :LOCATION_TYPE_REGIONGROUP;
		    --Get the polygon of the regions of the region filter:
			 BOUNDARY_GEO_INFO=
				                SELECT F.REGION_GROUP_ID AS ZONE_ID,F.REGION_GROUP_NAME AS ZONE_NAME,
				                NEW ST_MultiPoint(TO_VARCHAR(F.GEOTEXT) ).ST_CONVEXHULL().ST_ASTEXT() AS BOUNDARY,F.GEOTEXT
				                FROM
					            (
						            SELECT REGION_GROUP_ID,  REGION_GROUP_NAME,
									CONCAT(CONCAT('MultiPoint(',SUBSTRING(STRING_AGG(',(' || XPOS || ' ' || YPOS || ')' )
						          	,2, 22000000)),')') AS GEOTEXT
						          	FROM
						          	(   SELECT DISTINCT B2.ID AS REGION_GROUP_ID,B2.DESC AS REGION_GROUP_NAME,E.XPOS,E.YPOS
							          	FROM "sap.tm.trp.db.filter::t_location_filter_region" A
							          	INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" B ON A.REGION_GROUP_ID = B.REGION_GROUP_ID
							          	INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group" B2 ON (A.REGION_GROUP_ID = B2.ID)
							          	INNER JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A2 ON (B.ZONE_ID  = A2.ROOT_ID)
							          	INNER JOIN "sap.tm.trp.db.semantic.location::v_zone" C ON (A2.ZONE_ID = C.ID)
							          	INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" D ON (C.ID = D.ZONE_ID)
							          	LEFT OUTER JOIN  "sap.tm.trp.db.semantic.location::v_location" E ON (D.LOCATION_ID = E.ID)
							          	WHERE A.LOCATION_FILTER_ID = :LOCATION_FILTER_ID AND A2.LEVEL = :HIERARCHY_LEVEL
						          	)
						          	GROUP BY REGION_GROUP_ID,REGION_GROUP_NAME
					          	)F;
					          	--WHERE NEW ST_POLYGON(:IN_POLYGON).ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(F.GEOTEXT) ) )= 1;

				 LOCATIONS_WITHIN_POLYGON = SELECT ZONE_ID AS LOCATION_ID FROM :BOUNDARY_GEO_INFO
			 WHERE NEW ST_POLYGON(:IN_POLYGON).ST_INTERSECTS(NEW ST_MultiPoint(TO_VARCHAR(GEOTEXT) ) )= 1;


			   SELECT COUNT(1) INTO I_COUNT FROM :LOCATIONS_WITHIN_POLYGON;
		       IF :I_COUNT > :MAX_LOCATION_NUM_ON_MAP THEN
		         out_stock_bubble_map =  SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,
		                              NULL AS SURPLUS_DEFICIT_NUM,NULL AS CURRENT_STOCK,NULL AS MESSAGE,NULL AS MIN_SAFETY,NULL AS MAX_SAFETY
		                     FROM DUMMY;
		         TOO_MUCH_LOCATION_FLAG := 1;
		         RETURN;
		       END IF;

		SQL_LOCATION_EQUIPMENT_STORAGE_INFO =
					SELECT T2.LOCATION_ID,T2.LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,T2.BOUNDARY,IFNULL(T12.CURRENT_STOCK,0) AS CURRENT_STOCK,
					 T2.MIN_SAFETY,T2.MAX_SAFETY,T2.MAX_CAPACITY,:LOCATION_TYPE AS LOCATION_TYPE
						FROM
						(
						    SELECT T0.ZONE_ID  AS LOCATION_ID, T0.ZONE_NAME AS LOCATION_NAME,T0.BOUNDARY,T10.MIN_SAFETY,T10.MAX_SAFETY,T10.MAX_CAPACITY
						    FROM    (
						               SELECT A.ZONE_ID,A.ZONE_NAME,A.BOUNDARY
						               FROM :BOUNDARY_GEO_INFO A
						           ) AS T0
						    LEFT OUTER JOIN ( select * from "sap.tm.trp.db.stock::t_stock_config" where RESOURCE_CATEGORY = :LV_RESOURCE_CATEGORY  ) T10 ON (T0.ZONE_ID = T10.LOCATION_ID  AND T10.LOCATION_HEAD_FLAG = 1)
						)T2
						LEFT JOIN
						(
						   SELECT T11.REGION_GROUP_ID AS LOCATION_ID,T11.CURRENT_STOCK
						   FROM
						   (
							   SELECT T7.REGION_GROUP_ID,
							   			(CASE LV_RESOURCE_CATEGORY_TYPE WHEN 'CN' THEN SUM(T6.TEU_COUNT) ELSE COUNT(T6.RESOURCE_ID) END) AS CURRENT_STOCK
							   --FROM  "sap.tm.trp.db.stock::t_resources_status" T6
							   FROM "sap.tm.trp.db.semantic.resource::v_stock_resource_last_status" T6
							   INNER JOIN  "sap.tm.trp.db.semantic.resource::v_resource_category" t8 
						       ON (t6.RESOURCE_CATEGORY = t8.MAPPING_CODE AND t8.CODE = :LV_RESOURCE_CATEGORY)							   
							   INNER JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" T72 ON (T6.LOCATION_ID = T72.LOCATION_ID)
							   INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" T73 ON (T72.ZONE_ID = T73.ZONE_ID)
					           INNER JOIN "sap.tm.trp.db.filter::t_location_filter_region"  T7 ON (T73.REGION_GROUP_ID = T7.REGION_GROUP_ID)
							   WHERE T7.LOCATION_FILTER_ID = :LOCATION_FILTER_ID							   
							   GROUP BY T7.REGION_GROUP_ID
						   )T11
						)T12 ON (T2.LOCATION_ID = T12.LOCATION_ID);

	ELSE
	SQL_LOCATION_EQUIPMENT_STORAGE_INFO =  SELECT NULL AS LOCATION_ID, NULL AS LOCATION_NAME, NULL AS LATITUDE,NULL AS LONGITUDE, NULL AS BOUNDARY,
	                     NULL AS CURRENT_STOCK , NULL AS MIN_SAFETY,NULL AS MAX_SAFETY,
						 NULL AS MAX_CAPACITY,NULL AS LOCATION_TYPE
						 FROM DUMMY;
	END IF;


    SQL_CALL_ALERT = SELECT LOCATION_ID,LOCATION_NAME,LOCATION_TYPE,
                     'N/A' AS EQUIP_TYPE_ID,'N/A' AS EQUIP_TYPE_NAME,-1 AS EQUIP_TYPE_CATEGORY,
                     CURRENT_DATE AS DATE,CURRENT_STOCK AS STOCK,MIN_SAFETY AS  MIN_SAFETY_STOCK, MAX_SAFETY AS MAX_SAFETY_STOCK,MAX_CAPACITY,:LV_RESOURCE_CATEGORY AS RESOURCE_CATEGORY
                     FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO;

    SELECT COUNT(1) INTO I_COUNT FROM :SQL_CALL_ALERT;
    IF :I_COUNT >0 THEN

		CALL "sap.tm.trp.db.hrf.resourceStock::p_call_resource_stock_controller"(:BUBBLE_FLAG,:SQL_CALL_ALERT,OUT_ALERT_SQL,OUT_BUBBLE_SQL);

		out_stock_bubble_map =  SELECT T1.LOCATION_ID,T1.LOCATION_NAME,T1.LATITUDE,T1.LONGITUDE,T1.BOUNDARY,IFNULL(T2.SURPLUS_DEFICIT_NUM,0) AS SURPLUS_DEFICIT_NUM,T1.CURRENT_STOCK ,T2.MESSAGE,T1.MIN_SAFETY,T1.MAX_SAFETY
		                     FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO T1
		                     INNER JOIN :LOCATIONS_WITHIN_POLYGON T3 ON (T1.LOCATION_ID = T3.LOCATION_ID)--REMOVE THE LOCATIONS THAT DO NOT WILTHIN THE INPUT POLYGON
		                     LEFT OUTER JOIN (SELECT * FROM :OUT_BUBBLE_SQL
		                          WHERE EQUIP_TYPE_ID = 'N/A'
		                          ) T2 ON (T1.LOCATION_ID = T2.LOCATION_ID );

	ELSE

	out_stock_bubble_map =  SELECT T1.LOCATION_ID,T1.LOCATION_NAME,T1.LATITUDE,T1.LONGITUDE,T1.BOUNDARY,NULL AS SURPLUS_DEFICIT_NUM,T1.CURRENT_STOCK ,NULL AS MESSAGE,T1.MIN_SAFETY,T1.MAX_SAFETY
		                     FROM :SQL_LOCATION_EQUIPMENT_STORAGE_INFO T1;

	END IF;


END;
