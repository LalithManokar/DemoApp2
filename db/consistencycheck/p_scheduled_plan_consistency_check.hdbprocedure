PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.consistencycheck::p_scheduled_plan_consistency_check" ( 
  OUT INCONSISTENT_SD_PLANS "sap.tm.trp.db.consistencycheck::tt_inconsistent_sd_plans",
  OUT INCONSISTENT_KPI_PLANS "sap.tm.trp.db.consistencycheck::tt_inconsistent_kpi_plans"
 )
 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	READS SQL DATA AS
BEGIN
 /*************************************************************************************************
	Get schedueld SD/KPI plans assigned to VSD but don't have same schedule information & Usage code
 **************************************************************************************************/
  DECLARE SCHEDULED_SD_PLAN  INTEGER := 1;
  DECLARE VIRTUAL_SD_PLAN INTEGER := 3;
  DECLARE SCHEDULED_KPI_PLAN  INTEGER := 4;
  DECLARE VIRTUAL_KPI_PLAN INTEGER := 5;
  
--Step 1: Get Virtual SD/KPI plans contained more than one scheduled SD/KPI plans
    VIRTUAL_SCHEDULED_MAP = 
	   SELECT VIRTUAL_PLAN_MODEL_ID, PERSISTED_PLAN_MODEL_ID
	   FROM "sap.tm.trp.db.pipeline::t_virtual_plan_persisted_plan";
            
    VIRTUAL_PLAN_LIST = 
	    SELECT VIRTUAL_PLAN_MODEL_ID, COUNT(VIRTUAL_PLAN_MODEL_ID)
	    FROM :VIRTUAL_SCHEDULED_MAP 
	    GROUP BY VIRTUAL_PLAN_MODEL_ID
	    HAVING COUNT(VIRTUAL_PLAN_MODEL_ID) >=2;   
	    
    FILTERED_MAPPING = 
	  SELECT T1.VIRTUAL_PLAN_MODEL_ID, T1.PERSISTED_PLAN_MODEL_ID
	   FROM :VIRTUAL_SCHEDULED_MAP AS T1
	   INNER JOIN :VIRTUAL_PLAN_LIST AS T2
	   ON ( T1.VIRTUAL_PLAN_MODEL_ID = T2.VIRTUAL_PLAN_MODEL_ID);  
 
---Step 2: Get scheduled&usage information of the contained scheduled SD/KPI plans
   WITH_SCHEDULED_INFO =
        SELECT T1.VIRTUAL_PLAN_MODEL_ID, T1.PERSISTED_PLAN_MODEL_ID,
          T2.RECURRENCE_TYPE, T2.RECURRENCE_INTERVAL,
          T2.RECURRENCE_DAY, T2.START_TIME,
          T2.EXPIRY_TIME, T2.EXECUTE_WORKING_HOUR,
         -- T2.START_WORKING_HOUR_TIME, T2.END_WORKING_HOUR_TIME,
          IFNULL(TO_VARCHAR (T2.START_WORKING_HOUR_TIME,'HH24:MI'),'00:00') AS START_WORKING_HOUR_TIME,
          IFNULL(TO_VARCHAR (T2.END_WORKING_HOUR_TIME,'HH24:MI'),'00:00') AS END_WORKING_HOUR_TIME,
          PERSISTED_PLAN.NAME AS SCHDEULED_PLAN_NAME,
		  PERSISTED_PLAN.DESC AS DESCRIPTION,
		  PERSISTED_PLAN.FILTER_GROUP_ID,	  
		  PERSISTED_PLAN.PLAN_MODEL_TYPE_ID,
		  PERSISTED_PLAN.PIPELINE_MODEL_ID,
          PERSISTED_PLAN.ALERT_RULE_GROUP_ID,
          PERSISTED_PLAN.ATTRIBUTE_GROUP_ID,
          PERSISTED_PLAN.VISIBILITY_FLAG,
          PERSISTED_PLAN.KEEP_EXECUTION_RUNS,
          PERSISTED_PLAN.USAGE,
          PERSISTED_PLAN.USAGE_CODE
   FROM :FILTERED_MAPPING T1
   LEFT OUTER JOIN  "sap.tm.trp.db.pipeline::v_schedule_details" T2  ON ( T2.ID = T1.PERSISTED_PLAN_MODEL_ID)
   LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_plan_model" PERSISTED_PLAN
--    ON (T1.PERSISTED_PLAN_MODEL_ID = PERSISTED_PLAN.ID AND 
--     (PERSISTED_PLAN.PLAN_MODEL_TYPE_ID = :SCHEDULED_SD_PLAN OR PERSISTED_PLAN.PLAN_MODEL_TYPE_ID = :SCHEDULED_KPI_PLAN))
--Refactored code start - Added OR condition to where clause
        ON (T1.PERSISTED_PLAN_MODEL_ID = PERSISTED_PLAN.ID) 
        where  (PERSISTED_PLAN.PLAN_MODEL_TYPE_ID = :SCHEDULED_SD_PLAN OR PERSISTED_PLAN.PLAN_MODEL_TYPE_ID = :SCHEDULED_KPI_PLAN);
--Refactored code end
   
---Step 3: filter out the scheduled SD/KPI plans don't have same scheduled/usage information but assigned to same Virtual Plan
  WITH_INCONSISTENT_SCHEDULED_INFO =
     SELECT VIRTUAL_PLAN_MODEL_ID,  COUNT(DISTINCT RECURRENCE_TYPE), COUNT(DISTINCT RECURRENCE_INTERVAL),
         COUNT(DISTINCT RECURRENCE_DAY), COUNT(DISTINCT START_TIME),
         COUNT(DISTINCT EXPIRY_TIME), COUNT(DISTINCT EXECUTE_WORKING_HOUR),
         COUNT(DISTINCT START_WORKING_HOUR_TIME), COUNT(DISTINCT END_WORKING_HOUR_TIME),
         COUNT(DISTINCT USAGE), COUNT(DISTINCT USAGE_CODE)
	  FROM :WITH_SCHEDULED_INFO AS T1
	  GROUP BY VIRTUAL_PLAN_MODEL_ID
	  HAVING (  
	            COUNT(DISTINCT RECURRENCE_TYPE) >= 2 OR COUNT(DISTINCT RECURRENCE_INTERVAL)>= 2 
	         OR COUNT(DISTINCT RECURRENCE_DAY) >= 2 OR COUNT(DISTINCT START_TIME) >= 2 
	         OR COUNT(DISTINCT EXPIRY_TIME)  >= 2  OR COUNT(DISTINCT EXECUTE_WORKING_HOUR) >= 2 
	         OR COUNT(DISTINCT START_WORKING_HOUR_TIME)  >= 2 OR COUNT(DISTINCT END_WORKING_HOUR_TIME) >=2
	         OR COUNT(DISTINCT USAGE) >=2 OR COUNT(DISTINCT USAGE_CODE) >=2
	  );
	  
	  
---Step 4: get final list
 FINAL_RESULT =  
   SELECT T1.VIRTUAL_PLAN_MODEL_ID,
          T2.PERSISTED_PLAN_MODEL_ID,
          T2.RECURRENCE_TYPE, T2.RECURRENCE_INTERVAL,
          T2.RECURRENCE_DAY, T2.START_TIME,
          T2.EXPIRY_TIME, T2.EXECUTE_WORKING_HOUR,
          T2.START_WORKING_HOUR_TIME, T2.END_WORKING_HOUR_TIME,
          T2.SCHDEULED_PLAN_NAME,
		  T2.DESCRIPTION,
		  T2.FILTER_GROUP_ID,	  
		  T2.PLAN_MODEL_TYPE_ID,
		  T2.PIPELINE_MODEL_ID,
		  T2.ALERT_RULE_GROUP_ID,
		  T2.ATTRIBUTE_GROUP_ID,
		  T2.VISIBILITY_FLAG,
          T2.KEEP_EXECUTION_RUNS,
          T2.USAGE,
          T2.USAGE_CODE
   FROM :WITH_INCONSISTENT_SCHEDULED_INFO AS T1
   INNER JOIN :WITH_SCHEDULED_INFO AS T2
	 ON ( T1.VIRTUAL_PLAN_MODEL_ID = T2.VIRTUAL_PLAN_MODEL_ID);
	 
---Step 5: add additional details for output
--Refactored code start  
    RS1 = SELECT NAME,ID,PLAN_MODEL_TYPE_ID 
          FROM "sap.tm.trp.db.pipeline::t_plan_model"
          WHERE PLAN_MODEL_TYPE_ID = :VIRTUAL_KPI_PLAN OR PLAN_MODEL_TYPE_ID = :VIRTUAL_SD_PLAN;
--Refactored code end
 
  ADD_ADDITIONAL_INFO = 
     SELECT A.VIRTUAL_PLAN_MODEL_ID, B.NAME AS VIRTUAL_PLAN_NAME,
		    A.PERSISTED_PLAN_MODEL_ID, A.SCHDEULED_PLAN_NAME,
		    IFNULL(A.DESCRIPTION,'') AS DESCRIPTION,
		    IFNULL(T16.DESC,'') AS PLAN_TYPE,
		    A.PLAN_MODEL_TYPE_ID,
			IFNULL(T9.DESC,'') AS LOCATION_FILTER,
			IFNULL(T7.DESC,'') AS RESOURCE_FILTER,
			IFNULL(T5.NAME,'') AS TIME_FILTER,
			IFNULL(T2.NAME,'') AS CALCULATION_MODEL,
			IFNULL(T3.NAME,'') AS ALERT_RULE_GROUP,
			IFNULL(T21.NAME,'') AS MULTI_ATTRIBUTE_FILTER,
			A.RECURRENCE_TYPE || 'S' AS RECURRENCE_TYPE,
			IFNULL(A.RECURRENCE_INTERVAL,0) AS RECURRENCE_INTERVAL,
			A.RECURRENCE_DAY,
			 CASE WHEN A.RECURRENCE_TYPE = 'WEEK' 
			  THEN 
				CASE WHEN A.RECURRENCE_DAY = 0 THEN 'Sunday'
				     WHEN A.RECURRENCE_DAY = 1 THEN 'Monday'
					 WHEN A.RECURRENCE_DAY = 2 THEN 'Tuesday'
					 WHEN A.RECURRENCE_DAY = 3 THEN 'Wednesday'
					 WHEN A.RECURRENCE_DAY = 4 THEN 'Thursday'
					 WHEN A.RECURRENCE_DAY = 5 THEN 'Friday'	
					 WHEN A.RECURRENCE_DAY = 6 THEN 'Saturday'			 
					ELSE ''
				END
			ELSE IFNULL(TO_VARCHAR(A.RECURRENCE_DAY),'')
			END AS 	EXECUTED_ON,
			
			A.START_TIME AS ORIGINAL_START_TIME,
			TO_VARCHAR (A.START_TIME, 'YYYY-MM-DD') || 'T' || TO_VARCHAR(A.START_TIME,'HH24:MI:SS') || '.000Z'AS START_TIME,
			A.EXPIRY_TIME AS ORIGINAL_EXPIRY_TIME,
			TO_VARCHAR (A.EXPIRY_TIME, 'YYYY-MM-DD') || 'T' || TO_VARCHAR(A.EXPIRY_TIME,'HH24:MI:SS') || '.000Z'AS EXPIRY_TIME,
			IFNULL(TV.DESC,'') AS VISIBILITY,
            IFNULL(TO_VARCHAR(A.KEEP_EXECUTION_RUNS),'') AS KEEP_EXECUTION_RUNS,
            IFNULL(USAGE.DESC,'') AS PLAN_USAGE,
            MAP(A.USAGE, 'X','Yes','No') AS DISABLE_INTERMEDIATE_NODE,
           -- A.USAGE,
            MAP(A.EXECUTE_WORKING_HOUR,'X','Yes','No') AS EXECUTE_IN_WORKING_HOURS,           
			A.START_WORKING_HOUR_TIME AS START_WORKING_TIME,		
		    A.END_WORKING_HOUR_TIME AS END_WORKING_TIME
		 FROM :FINAL_RESULT AS A
		 --LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_plan_model" AS B
		 --ON (A.VIRTUAL_PLAN_MODEL_ID = B.ID AND (B.PLAN_MODEL_TYPE_ID = :VIRTUAL_KPI_PLAN OR B.PLAN_MODEL_TYPE_ID = :VIRTUAL_SD_PLAN))
--Refactored code start  
          LEFT OUTER JOIN :RS1 AS B
          ON A.VIRTUAL_PLAN_MODEL_ID = B.ID
--Refactored code end 
		 LEFT OUTER JOIN ( SELECT T161.ID,IFNULL(T162.DESC,T161.DESC) AS DESC FROM "sap.tm.trp.db.pipeline::t_plan_model_type" T161
		 LEFT OUTER JOIN ( SELECT T251.ID,T251.DESC FROM "sap.tm.trp.db.pipeline::t_plan_model_type_t" T251
		           INNER JOIN "sap.tm.trp.db.semantic.common::v_lang_code" T252 ON (T251.SPRAS = T252.SPRAS)) T162 ON (T161.ID = T162.ID)
		    )T16 ON A.PLAN_MODEL_TYPE_ID = T16.ID
		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_filter_location_filter" T8 ON T8.FILTER_GROUP_ID = A.FILTER_GROUP_ID
		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_location_filter" T9 ON T9.ID = T8.LOCATION_FILTER_ID
		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_filter_equipment_filter" T6 ON T6.FILTER_GROUP_ID = A.FILTER_GROUP_ID
		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_equipment_filter" T7 ON T7.ID = T6.EQUIPMENT_FILTER_ID AND T7.RESOURCE_CATEGORY = T6.RESOURCE_CATEGORY
		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_filter_group" T4 ON A.FILTER_GROUP_ID = T4.ID
		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_time_filter" T5 ON T5.ID = T4.TIME_FILTER_ID
		LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_model" T2 ON A.PIPELINE_MODEL_ID = T2.ID
		LEFT OUTER JOIN "sap.tm.trp.db.alert.alert_rule_group::t_alert_rule_group" T3 ON A.ALERT_RULE_GROUP_ID = T3.ALERT_RULE_GROUP_ID
		LEFT OUTER JOIN "sap.tm.trp.db.filter::t_attribute_group" AS T21
		ON T21.ID = A.ATTRIBUTE_GROUP_ID
		LEFT OUTER JOIN ( SELECT TV1.FLAG, TV1.CODE,IFNULL(TV2.DESC,TV1.DESC)AS DESC FROM "sap.tm.trp.db.systemmanagement::t_visibility_type" TV1
		    LEFT OUTER JOIN ( SELECT TV21.ID,TV21.DESC FROM "sap.tm.trp.db.systemmanagement::t_visibility_type_t" TV21
		        INNER JOIN "sap.tm.trp.db.semantic.common::v_lang_code" TV22 ON (TV21.SPRAS = TV22.SPRAS) )TV2 ON TV1.ID =  TV2.ID 
		)TV ON (TV.FLAG = A.VISIBILITY_FLAG)
		LEFT OUTER JOIN ( SELECT USAGE_CODE, PUT.SPRAS, DESC FROM "sap.tm.trp.db.pipeline::t_plan_usage_t"  PUT
		                  INNER JOIN  "sap.tm.trp.db.semantic.common::v_lang_code" LANG ON (PUT.SPRAS = LANG.SPRAS)
		) AS USAGE ON A.USAGE_CODE = USAGE.USAGE_CODE ;
		  
  INCONSISTENT_SD_PLANS = 
    SELECT 
	    VIRTUAL_PLAN_NAME,
	    SCHDEULED_PLAN_NAME,
	    DESCRIPTION,
	    PLAN_TYPE,
	    LOCATION_FILTER,
	    RESOURCE_FILTER,
	    TIME_FILTER,
	    CALCULATION_MODEL,
	    ALERT_RULE_GROUP,
	    MULTI_ATTRIBUTE_FILTER,
	    RECURRENCE_TYPE,
	    RECURRENCE_INTERVAL,
	    EXECUTED_ON,
	    START_TIME,
	    EXPIRY_TIME,
	    VISIBILITY,
	    KEEP_EXECUTION_RUNS,
	    PLAN_USAGE,
	    DISABLE_INTERMEDIATE_NODE,
	    EXECUTE_IN_WORKING_HOURS,
	    START_WORKING_TIME,
	    END_WORKING_TIME	    
	 FROM :ADD_ADDITIONAL_INFO AS A
	 WHERE A.PLAN_MODEL_TYPE_ID = :SCHEDULED_SD_PLAN
	 ORDER BY VIRTUAL_PLAN_NAME;
    
 INCONSISTENT_KPI_PLANS = 
    SELECT 
        VIRTUAL_PLAN_NAME,
    SCHDEULED_PLAN_NAME,
    DESCRIPTION,
    PLAN_TYPE,
    VISIBILITY,
    LOCATION_FILTER,
    RESOURCE_FILTER,
    TIME_FILTER,
    CALCULATION_MODEL,
    ALERT_RULE_GROUP,
    MULTI_ATTRIBUTE_FILTER,
    RECURRENCE_TYPE,
    RECURRENCE_INTERVAL,
    EXECUTED_ON,
    START_TIME,
    EXPIRY_TIME,   
    PLAN_USAGE 
    FROM :ADD_ADDITIONAL_INFO AS A
    WHERE A.PLAN_MODEL_TYPE_ID = :SCHEDULED_KPI_PLAN
    ORDER BY VIRTUAL_PLAN_MODEL_ID;
 
END;
