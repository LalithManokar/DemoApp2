PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.systemmanagement::p_check_location_authorization"(
    IN IN_LOCATION_TYPE SMALLINT,
    IN GEO_ID_LIST "sap.tm.trp.db.systemmanagement::tt_division_id",
    OUT HAVE_AUTHORIZATION_FLAG SMALLINT
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
    READS SQL DATA 
    AS
BEGIN
      DECLARE VAR_USER_NAME VARCHAR(60);
      DECLARE I_COUNT INTEGER;
      --DECLARE USER_TYPE_ADMIN INTEGER :=99;
      --DECLARE VAR_USER_TYPE INTEGER;
      DECLARE HAS_AUTHORIZATION_FLAG TINYINT; 
      
      SELECT IFNULL(MAX(USERNAME),'') into VAR_USER_NAME
      FROM "sap.tm.trp.db.systemmanagement.user::cv_get_username";
      
  
      
      call "sap.tm.trp.db.systemmanagement::p_check_location_full_authorization" (
		 	HAVE_AUTHORIZATION_FLAG => HAS_AUTHORIZATION_FLAG
		 );
		 
     --SELECT USER_TYPE_ID INTO VAR_USER_TYPE
     --FROM "sap.tm.trp.db.systemmanagement.user::t_user"
     --WHERE USERNAME = :VAR_USER_NAME;
     
     --IF :VAR_USER_TYPE = :USER_TYPE_ADMIN THEN
     --	 HAVE_AUTHORIZATION_FLAG := 1;
     IF :HAS_AUTHORIZATION_FLAG = 1 THEN
     	HAVE_AUTHORIZATION_FLAG := 1;
     ELSE
     	 SELECT COUNT(1) INTO I_COUNT
	      FROM  :GEO_ID_LIST T1
	     LEFT OUTER JOIN "sap.tm.trp.db.systemmanagement::cv_getlocations_of_user_of_locationtype"(placeholder."$$IN_USER_NAME$$" =>:VAR_USER_NAME,PLACEHOLDER."$$IN_LOCATION_TYPE$$"=>:IN_LOCATION_TYPE) T2
	        ON (T2.LOCATION_ID = T1.ID)
	      WHERE T2.LOCATION_ID IS NULL;
	      
	      IF I_COUNT >0 THEN
	      	HAVE_AUTHORIZATION_FLAG := 0;
	      ELSE
	        HAVE_AUTHORIZATION_FLAG := 1;
	      END IF;
     END IF;
      
     

      

END;