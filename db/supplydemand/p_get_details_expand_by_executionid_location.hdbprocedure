PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.supplydemand::p_get_details_expand_by_executionid_location" (
	IN PLAN_ID BIGINT,
	IN PLAN_EXECUTION_ID BIGINT,
	IN TIMEZONE NVARCHAR(50),
	IN NODE_ID BIGINT,
	IN LOCATION_ID_LIST "sap.tm.trp.db.supplydemand::tt_id_list",
	OUT OUT_PUT "sap.tm.trp.db.supplydemand::tt_get_details_expand_by_executionid_base_output"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	--READS SQL DATA
	AS
BEGIN

 DECLARE  ADDREGAT_METHOD_KEY VARCHAR(30) := 'AGGREGATIONMETHOD';
 DECLARE  ADDREGAT_METHOD_SUM_VALUE VARCHAR(30) := 'SUM';
 DECLARE  ADDREGAT_METHOD_MEAN_VALUE VARCHAR(30) := 'MEAN';
 
    LOCATION = SELECT NULL AS GEO_ID, ID AS LOCATION_ID, NULL AS GEO_FILTER_TYPE, NULL AS GEO_GROUP_ID, NULL AS GEO_NAME FROM :LOCATION_ID_LIST;
	CALL "sap.tm.trp.db.supplydemand::p_get_supply_demand_result_by_plan_location"(:PLAN_ID, :PLAN_EXECUTION_ID, :TIMEZONE, :LOCATION, SD_RESULT);
	
	CALL "sap.tm.trp.db.supplydemand::p_get_supply_demand_expand"(:NODE_ID,:PLAN_ID, :PLAN_EXECUTION_ID,:LOCATION_ID_LIST,:SD_RESULT,EXPAND_DATASET);
	CALL "sap.tm.trp.db.supplydemand::p_get_sd_additional_alert"(:NODE_ID,:PLAN_ID, :PLAN_EXECUTION_ID,:LOCATION_ID_LIST,:SD_RESULT,ADDITIONAL_DATASET);
         
/* Comment the old behavior because of 0 records not saved to DB          
 OUT_PUT = (SELECT T1.GEO_ID,
		T1.GEO_NAME,
 		T1.RESOURCE_TYPE_CODE,
 		T1.RESOURCE_TYPE_NAME,
		T1.OUTPUT_VALUE,
		T1.START_TIME,
		T1.END_TIME,
		T1.SEQUENCE,
		T1.TIME_INTERVAL,
		T1.OUTPUT_KEY,
		T1.DRILLDOWN_OUTPUT_KEY,
		T1.DRILLDOWN_NODE_ID,
		T1.ALERT_STATUS,
		T1.DRILLDOWN_NODE_NAV_TYPE
        FROM :SQL0 T1
	    ORDER BY T1.GEO_ID, T1.RESOURCE_TYPE_CODE, T1.SEQUENCE, T1.OUTPUT_KEY, T1.DRILLDOWN_OUTPUT_KEY)
	    
	    UNION
	       
	    (SELECT T1.LOCATION_ID AS GEO_ID,
	    	T1.LOCATION_NAME AS GEO_NAME,
	    	T1.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE,
	    	T1.EQUIP_TYPE_NAME AS RESOURCE_TYPE_NAME,
	    	CASE WHEN UCASE(T2.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN  AVG(TO_DOUBLE(T1.OUTPUT_VALUE)) 
	    	ELSE SUM(TO_DOUBLE(T1.OUTPUT_VALUE))  END AS OUTPUT_VALUE ,
	    	T1.START_TIME,
			T1.END_TIME, 
			T1.SEQUENCE,
			T1.TIME_INTERVAL, 
			T1.OUTPUT_KEY, 
			NULL AS DRILLDOWN_OUTPUT_KEY, 
			T1.OUT_NODE_ID AS DRILLDOWN_NODE_ID,
			SUM(T1.ALERT_STATUS) AS ALERT_STATUS,
			T1.OUT_NODE_NAV_TYPE AS DRILLDOWN_NODE_NAV_TYPE
			FROM "sap.tm.trp.db.supplydemand::cv_get_execution_result_by_executionid_base_new"
			    (placeholder."$$IN_EXECUTION_ID$$"=>:IN_EXECUTION_ID,placeholder."$$IN_NODE_ID$$"=>:NODE_ID) T1
			LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T2 ON (T1.OUT_NODE_ID = T2.NODE_ID AND UCASE(T2.KEY) = :ADDREGAT_METHOD_KEY)
			INNER JOIN :IN_LOCATION_ID_LIST T3 ON (T1.LOCATION_ID = T3.ID)
			GROUP BY T1.LOCATION_ID, T1.LOCATION_NAME, T1.EQUIP_TYPE_ID, T1.EQUIP_TYPE_NAME, T1.OUTPUT_KEY, T1.START_TIME, T1.END_TIME, T1.SEQUENCE, T1.TIME_INTERVAL, T1.OUT_NODE_ID, T2.VALUE,T1.OUT_NODE_NAV_TYPE
			ORDER BY T1.LOCATION_ID, T1.EQUIP_TYPE_ID, T1.SEQUENCE, T1.OUTPUT_KEY
			);
*/

SQL1 = (SELECT T1.LOCATION_ID AS GEO_ID,
		T1.LOCATION_NAME AS GEO_NAME,
		T1.RESOURCE_TYPE AS RESOURCE_TYPE_CODE,
		T1.RESOURCE_NAME AS RESOURCE_TYPE_NAME,
		T1.OUTPUT_VALUE,
		T1.START_TIME,
		T1.END_TIME,
		T1.SEQUENCE,
		T1.TIME_INTERVAL,
		T1.OUTPUT_KEY,
		T1.DRILLDOWN_OUTPUT_KEY,
		T1.DRILLDOWN_NODE_ID,
		T1.ALERT_STATUS,
		T1.DRILLDOWN_NODE_NAV_TYPE
        FROM :EXPAND_DATASET T1
	    ORDER BY T1.LOCATION_ID, T1.RESOURCE_TYPE, T1.SEQUENCE, T1.OUTPUT_KEY, T1.DRILLDOWN_OUTPUT_KEY)
	    
	    UNION
	       
	    (SELECT T1.LOCATION_ID AS GEO_ID,
	    	T1.LOCATION_NAME AS GEO_NAME,
			T1.RESOURCE_TYPE AS RESOURCE_TYPE_CODE,
			T1.RESOURCE_NAME AS RESOURCE_TYPE_NAME,
	    	CASE WHEN UCASE(T2.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN  AVG(TO_DOUBLE(T1.OUTPUT_VALUE)) 
	    	ELSE SUM(TO_DOUBLE(T1.OUTPUT_VALUE))  END AS OUTPUT_VALUE ,
	    	T1.START_TIME,
			T1.END_TIME, 
			T1.SEQUENCE,
			T1.TIME_INTERVAL, 
			T1.OUTPUT_KEY, 
			TO_NVARCHAR(NULL) AS DRILLDOWN_OUTPUT_KEY, 
			T1.OUT_NODE_ID AS DRILLDOWN_NODE_ID,
			SUM(T1.ALERT_STATUS) AS ALERT_STATUS,
			T1.OUT_NODE_NAV_TYPE AS DRILLDOWN_NODE_NAV_TYPE
			FROM :ADDITIONAL_DATASET T1
			LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T2 ON (T1.OUT_NODE_ID = T2.NODE_ID AND UCASE(T2.KEY) = :ADDREGAT_METHOD_KEY)
			INNER JOIN :LOCATION_ID_LIST T3 ON (T1.LOCATION_ID = T3.ID)
			GROUP BY T1.LOCATION_ID, T1.LOCATION_NAME, T1.RESOURCE_TYPE, T1.RESOURCE_NAME, T1.OUTPUT_KEY, T1.START_TIME, T1.END_TIME, T1.SEQUENCE, T1.TIME_INTERVAL, T1.OUT_NODE_ID, T2.VALUE,T1.OUT_NODE_NAV_TYPE
			ORDER BY T1.LOCATION_ID, T1.RESOURCE_TYPE, T1.SEQUENCE, T1.OUTPUT_KEY
			);
			

--Re-generate those 0 number records not saved in db
SQL2 = 
    SELECT
        GEO_ID,
		GEO_NAME,
 		RESOURCE_TYPE_CODE,
 		RESOURCE_TYPE_NAME,
		0 AS OUTPUT_VALUE,
		START_TIME,
		END_TIME,
		SEQUENCE,
		TIME_INTERVAL,
		CASE  WHEN OUTPUT_KEY = 'DEMAND' 
            	      THEN 'SUPPLY' 
	            ELSE 'DEMAND' 
	    END  AS OUTPUT_KEY,
		DRILLDOWN_OUTPUT_KEY,
		DRILLDOWN_NODE_ID,
		ALERT_STATUS,
		DRILLDOWN_NODE_NAV_TYPE
	FROM :SQL1
	UNION ALL
	SELECT
	    GEO_ID,
		GEO_NAME,
 		RESOURCE_TYPE_CODE,
 		RESOURCE_TYPE_NAME,
		OUTPUT_VALUE,
		START_TIME,
		END_TIME,
		SEQUENCE,
		TIME_INTERVAL,
		OUTPUT_KEY,
		DRILLDOWN_OUTPUT_KEY,
		DRILLDOWN_NODE_ID,
		ALERT_STATUS,
		DRILLDOWN_NODE_NAV_TYPE
	FROM :SQL1;
	
--Summerize quantity those output key and sequence are same    	
OUT_PUT = 
    SELECT
        GEO_ID,
		GEO_NAME,
 		RESOURCE_TYPE_CODE,
 		RESOURCE_TYPE_NAME,
		SUM(OUTPUT_VALUE) AS OUTPUT_VALUE,
		START_TIME,
		END_TIME,
		SEQUENCE,
		TIME_INTERVAL,
		OUTPUT_KEY,
		DRILLDOWN_OUTPUT_KEY,
		DRILLDOWN_NODE_ID,
		ALERT_STATUS,
		DRILLDOWN_NODE_NAV_TYPE
    FROM :SQL2
    GROUP BY
        GEO_ID,
		GEO_NAME,
 		RESOURCE_TYPE_CODE,
 		RESOURCE_TYPE_NAME,
		START_TIME,
		END_TIME,
		SEQUENCE,
		TIME_INTERVAL,
		OUTPUT_KEY,
		DRILLDOWN_OUTPUT_KEY,
		DRILLDOWN_NODE_ID,
		ALERT_STATUS,
		DRILLDOWN_NODE_NAV_TYPE;

END;
