PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.supplydemand::p_get_exec_result_res_by_execid_alert" (
	IN PLAN_ID BIGINT,
	IN PLAN_EXECUTION_ID BIGINT,
	IN TIMEZONE NVARCHAR(50),
	IN NODE_ID BIGINT,
	IN LOCATION_ID_LIST "sap.tm.trp.db.supplydemand::tt_id_list",
	OUT OUT_PUT "sap.tm.trp.db.supplydemand::tt_get_execution_result_resource_by_executionid_output"
)
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER
DEFAULT SCHEMA "SAP_TM_TRP"
--READS SQL DATA
AS
BEGIN

DECLARE  ADDREGAT_METHOD_KEY VARCHAR(30) := 'AGGREGATIONMETHOD';
DECLARE  ADDREGAT_METHOD_SUM_VALUE VARCHAR(30) := 'SUM';
DECLARE  ADDREGAT_METHOD_MEAN_VALUE VARCHAR(30) := 'MEAN';

    LOCATION = SELECT NULL AS GEO_ID, ID AS LOCATION_ID, NULL AS GEO_FILTER_TYPE, NULL AS GEO_GROUP_ID, NULL AS GEO_NAME FROM :LOCATION_ID_LIST;
	CALL "sap.tm.trp.db.supplydemand::p_get_supply_demand_result_by_plan_location"(:PLAN_ID, :PLAN_EXECUTION_ID, :TIMEZONE, :LOCATION, SD_RESULT);
	
	CALL "sap.tm.trp.db.supplydemand::p_get_sd_additional_alert"(:NODE_ID,:PLAN_ID, :PLAN_EXECUTION_ID,:LOCATION_ID_LIST,:SD_RESULT,DATASET);
	
SQL1 =
	SELECT
        T1.RESOURCE_TYPE AS RESOURCE_TYPE_CODE,
        T1.RESOURCE_NAME AS RESOURCE_TYPE_NAME,
	    T1.OUTPUT_KEY,
		CASE WHEN UCASE(T2.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE 
		        THEN AVG(TO_BIGINT(T1.OUTPUT_VALUE))
		     ELSE 
		        SUM(TO_BIGINT(T1.OUTPUT_VALUE)) 
		END AS OUTPUT_VALUE,
		T1.START_TIME,
		T1.END_TIME,
		T1.SEQUENCE,
		SUM(T1.ALERT_STATUS) AS ALERT_STATUS,
		:PLAN_EXECUTION_ID AS OUT_EXECUTION_ID,
		T1.OUT_NODE_ID,
		T1.HAS_DRILLDOWN_FLAG,
		T1.TIME_INTERVAL,
		T1.OUT_NODE_NAME,
		T1.OUT_NODE_NAV_TYPE		
	FROM :DATASET T1
	LEFT JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T2 ON T2.NODE_ID = T1.OUT_NODE_ID AND UCASE(T2.KEY) = :ADDREGAT_METHOD_KEY
	INNER JOIN :LOCATION_ID_LIST T3 ON (T1.LOCATION_ID = T3.ID)
	GROUP BY T1.RESOURCE_TYPE,T1.RESOURCE_NAME,T1.OUTPUT_KEY,T1.START_TIME,T1.END_TIME ,T1.SEQUENCE,T1.OUT_NODE_ID,T1.HAS_DRILLDOWN_FLAG,T1.TIME_INTERVAL,T1.OUT_NODE_NAME,T1.OUT_NODE_NAV_TYPE,T2.VALUE
	ORDER BY T1.RESOURCE_TYPE,T1.OUTPUT_KEY,T1.SEQUENCE;
	
--Re-generate those 0 number records not saved in db	  	
SQL2 = 
    SELECT
        RESOURCE_TYPE_CODE,
		RESOURCE_TYPE_NAME,
	    CASE  WHEN OUTPUT_KEY = 'DEMAND' 
            	      THEN 'SUPPLY' 
	            ELSE 'DEMAND' 
	    END                AS OUTPUT_KEY,
	    0                  AS OUTPUT_VALUE,
		START_TIME,
		END_TIME,
		SEQUENCE,
		ALERT_STATUS,
		OUT_EXECUTION_ID,
		OUT_NODE_ID,
		HAS_DRILLDOWN_FLAG,
		TIME_INTERVAL,
		OUT_NODE_NAME,
		OUT_NODE_NAV_TYPE	
	FROM :SQL1
	UNION ALL
	SELECT
        RESOURCE_TYPE_CODE,
		RESOURCE_TYPE_NAME,
	    OUTPUT_KEY,
		OUTPUT_VALUE,
		START_TIME,
		END_TIME,
		SEQUENCE,
		ALERT_STATUS,
		OUT_EXECUTION_ID,
		OUT_NODE_ID,
		HAS_DRILLDOWN_FLAG,
		TIME_INTERVAL,
		OUT_NODE_NAME,
		OUT_NODE_NAV_TYPE	
	FROM :SQL1;
	
--Summerize quantity those output key and sequence are same    	
OUT_PUT = 
    SELECT 
        RESOURCE_TYPE_CODE,
		RESOURCE_TYPE_NAME,
	    OUTPUT_KEY,
		SUM(OUTPUT_VALUE) AS OUTPUT_VALUE,
		START_TIME,
		END_TIME,
		SEQUENCE,
		ALERT_STATUS,
		OUT_EXECUTION_ID,
		OUT_NODE_ID,
		HAS_DRILLDOWN_FLAG,
		TIME_INTERVAL,
		OUT_NODE_NAME,
		OUT_NODE_NAV_TYPE
	FROM :SQL2
	GROUP BY 
	    RESOURCE_TYPE_CODE,
		RESOURCE_TYPE_NAME,
	    OUTPUT_KEY,
		START_TIME,
		END_TIME,
		SEQUENCE,
		ALERT_STATUS,
		OUT_EXECUTION_ID,
		OUT_NODE_ID,
		HAS_DRILLDOWN_FLAG,
		TIME_INTERVAL,
		OUT_NODE_NAME,
		OUT_NODE_NAV_TYPE;
	
END;
