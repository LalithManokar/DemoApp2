PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.supplydemand::p_get_drilldown_by_executionid_location_equipment_date"(
	IN PLAN_ID BIGINT,
	IN IN_EXECUTION_ID BIGINT,
	IN TIMEZONE NVARCHAR(50),
	IN IN_NODE_ID BIGINT,
	IN IN_OUTPUT_KEY VARCHAR(2000),
	IN IN_LOCATION_ID VARCHAR(2000),
	IN IN_EQUIP_TYPE_ID VARCHAR(30),
	IN IN_SEQUENCE BIGINT,
	OUT OUTPUT "sap.tm.trp.db.supplydemand::tt_get_drilldown_by_executionid_location_equipment_date_output"
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	AS
BEGIN

 DECLARE  NON_EXISTS_EQUIP_ID VARCHAR(30);
 DECLARE  NON_OUTPUT_KEY VARCHAR(2000);
 DECLARE  ADDREGAT_METHOD_KEY VARCHAR(30) := 'AGGREGATIONMETHOD';
 DECLARE  ADDREGAT_METHOD_SUM_VALUE VARCHAR(30) := 'SUM';
 DECLARE  ADDREGAT_METHOD_MEAN_VALUE VARCHAR(30) := 'MEAN';
 DECLARE VAR_TIME_FILTER_ID BIGINT := 0 ;
 

	CALL "sap.tm.trp.db.dashboard::sp_splitter" (:IN_LOCATION_ID,',',IN_LOCATION_ID_LIST);
    LOCATION = SELECT NULL AS GEO_ID, STRING AS LOCATION_ID, NULL AS GEO_FILTER_TYPE, NULL AS GEO_GROUP_ID, NULL AS GEO_NAME FROM :IN_LOCATION_ID_LIST;
	CALL "sap.tm.trp.db.supplydemand::p_get_supply_demand_result_by_plan_location"(:PLAN_ID, :IN_EXECUTION_ID, :TIMEZONE, :LOCATION, SD_RESULT);
 
 CALL "sap.tm.trp.db.dashboard::sp_splitter" (:IN_OUTPUT_KEY,',',SQL1);
 
 NON_EXISTS_EQUIP_ID := '';
 NON_OUTPUT_KEY := '';
 
  --get time_filter_id:
      /*SELECT IFNULL(MAX(T2.TIME_FILTER_ID),0) INTO VAR_TIME_FILTER_ID
      FROM "sap.tm.trp.db.pipeline::t_execution_context" T1 
      INNER JOIN "sap.tm.trp.db.filter::t_filter_group" T2 ON (T1.VALUE = T2.ID)
      WHERE KEY = 'FILTER_GROUP_ID' AND EXECUTION_ID = :IN_EXECUTION_ID;
	    */
    
      IF :IN_EQUIP_TYPE_ID = :NON_EXISTS_EQUIP_ID THEN
        IF :IN_OUTPUT_KEY = :NON_OUTPUT_KEY THEN
	         OUTPUT = SELECT T1.LOCATION_ID,T2.OUTPUT_KEY,T10.METADATA_NODE_ID AS DRILLDOWN_OUTPUT_KEY,
	         CASE WHEN UCASE(T12.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN  AVG(TO_DOUBLE(T1.OUTPUT_VALUE)) 
	         ELSE SUM(TO_DOUBLE(T1.OUTPUT_VALUE))  END AS OUTPUT_VALUE, T13.VALUE AS DRILLDOWN_NODE_NAV_TYPE
	        FROM :SD_RESULT T1
	        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T2 ON (T1.NODE_ID = T2.PARENT_NODE_ID AND T1.OUTPUT_KEY = T2.OUTPUT_KEY)
           -- INNER JOIN "sap.tm.trp.db.pipeline::cv_get_time_filter_interval_by_execute_on_of_the_time_filter"(placeholder."$$IN_EXECUTION_ID$$"=>:IN_EXECUTION_ID,PLACEHOLDER."$$IN_TIME_FILTER_ID$$"=>:VAR_TIME_FILTER_ID) T22 ON T1.TIME_INTERVAL_ID = T22.TIME_INTERVAL_ID
	        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T10 on T10.ID = T1.NODE_ID
	        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T12 ON (T10.ID = T12.NODE_ID AND UCASE(T12.KEY) = :ADDREGAT_METHOD_KEY)
	        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T13 ON (T10.ID = T13.NODE_ID AND LOWER(T13.KEY) = 'navigationtype')
	        WHERE (T1.PLAN_EXECUTION_ID = :IN_EXECUTION_ID OR :IN_EXECUTION_ID = -1) AND T2.NODE_ID = :IN_NODE_ID 
            AND T1.SEQUENCE = :IN_SEQUENCE
	       GROUP BY  T1.LOCATION_ID, T2.OUTPUT_KEY, T10.METADATA_NODE_ID,T12.VALUE, T13.VALUE
	       ORDER BY T2.OUTPUT_KEY,T10.METADATA_NODE_ID;
	       
	   ELSE
            OUTPUT = SELECT T1.LOCATION_ID,T2.OUTPUT_KEY,T10.METADATA_NODE_ID AS DRILLDOWN_OUTPUT_KEY,
              	CASE WHEN UCASE(T12.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN AVG(TO_DOUBLE(T1.OUTPUT_VALUE)) ELSE SUM(TO_DOUBLE(T1.OUTPUT_VALUE))  END AS OUTPUT_VALUE,
            	T13.VALUE AS DRILLDOWN_NODE_NAV_TYPE
            FROM :SD_RESULT T1
            INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T2 ON (T1.NODE_ID = T2.PARENT_NODE_ID AND T1.OUTPUT_KEY = T2.OUTPUT_KEY)
            -- INNER JOIN "sap.tm.trp.db.pipeline::cv_get_time_filter_interval_by_execute_on_of_the_time_filter"(placeholder."$$IN_EXECUTION_ID$$"=>:IN_EXECUTION_ID,PLACEHOLDER."$$IN_TIME_FILTER_ID$$"=>:VAR_TIME_FILTER_ID) T22 ON T1.TIME_INTERVAL_ID = T22.TIME_INTERVAL_ID
            INNER JOIN :SQL1 T6 ON (T2.OUTPUT_KEY = T6.STRING) -- filter the logical hierachy by outputKey
	        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T10 on T10.ID = T1.NODE_ID
	        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T12 ON (T10.ID = T12.NODE_ID AND UCASE(T12.KEY) = :ADDREGAT_METHOD_KEY)
            LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T13 ON (T10.ID = T13.NODE_ID AND T13.KEY = 'navigationType')
            WHERE (T1.PLAN_EXECUTION_ID = :IN_EXECUTION_ID OR :IN_EXECUTION_ID = -1) AND T2.NODE_ID = :IN_NODE_ID 
            AND T1.SEQUENCE = :IN_SEQUENCE
           GROUP BY  T1.LOCATION_ID,T2.OUTPUT_KEY, T10.METADATA_NODE_ID,T12.VALUE, T13.VALUE
           ORDER BY T2.OUTPUT_KEY,T10.METADATA_NODE_ID;
        END IF;
         
      ELSE
          IF :IN_OUTPUT_KEY = :NON_OUTPUT_KEY THEN
            OUTPUT = SELECT T1.LOCATION_ID,T2.OUTPUT_KEY,T10.METADATA_NODE_ID AS DRILLDOWN_OUTPUT_KEY,
            T1.OUTPUT_VALUE, T13.VALUE AS DRILLDOWN_NODE_NAV_TYPE
	        FROM :SD_RESULT T1
	        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T2 ON (T1.NODE_ID = T2.PARENT_NODE_ID AND T1.OUTPUT_KEY = T2.OUTPUT_KEY)
            -- INNER JOIN "sap.tm.trp.db.pipeline::cv_get_time_filter_interval_by_execute_on_of_the_time_filter"(placeholder."$$IN_EXECUTION_ID$$"=>:IN_EXECUTION_ID,PLACEHOLDER."$$IN_TIME_FILTER_ID$$"=>:VAR_TIME_FILTER_ID) T22 ON T1.TIME_INTERVAL_ID = T22.TIME_INTERVAL_ID
	        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T10 on T10.ID = T1.NODE_ID
	        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T13 ON (T10.ID = T13.NODE_ID AND T13.KEY = 'navigationType')
	        WHERE (T1.PLAN_EXECUTION_ID = :IN_EXECUTION_ID OR :IN_EXECUTION_ID = -1) AND T2.NODE_ID = :IN_NODE_ID
	        AND T1.EQUIP_TYPE_ID = :IN_EQUIP_TYPE_ID
			AND T1.SEQUENCE = :IN_SEQUENCE
           ORDER BY T2.OUTPUT_KEY,T10.METADATA_NODE_ID;
         
          ELSE
            OUTPUT = SELECT T1.LOCATION_ID, T2.OUTPUT_KEY, T10.METADATA_NODE_ID AS DRILLDOWN_OUTPUT_KEY,
           T1.OUTPUT_VALUE, T13.VALUE AS DRILLDOWN_NODE_NAV_TYPE
	        FROM :SD_RESULT T1
	        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T2 ON (T1.NODE_ID = T2.PARENT_NODE_ID AND T1.OUTPUT_KEY = T2.OUTPUT_KEY)
            --INNER JOIN "sap.tm.trp.db.pipeline::cv_get_time_filter_interval_by_execute_on_of_the_time_filter"(placeholder."$$IN_EXECUTION_ID$$"=>:IN_EXECUTION_ID,PLACEHOLDER."$$IN_TIME_FILTER_ID$$"=>:VAR_TIME_FILTER_ID) T22 ON T1.TIME_INTERVAL_ID = T22.TIME_INTERVAL_ID
	        INNER JOIN :SQL1 T6 ON (T2.OUTPUT_KEY = T6.STRING)
	        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T10 on T10.ID = T1.NODE_ID
	        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T13 ON (T10.ID = T13.NODE_ID AND T13.KEY = 'navigationType')
	        WHERE (T1.PLAN_EXECUTION_ID = :IN_EXECUTION_ID OR :IN_EXECUTION_ID = -1) AND T2.NODE_ID = :IN_NODE_ID
	        AND T1.EQUIP_TYPE_ID = :IN_EQUIP_TYPE_ID
            AND T1.SEQUENCE = :IN_SEQUENCE
 			ORDER BY T2.OUTPUT_KEY,T10.METADATA_NODE_ID;
         
          END IF;
          
      END IF;  
      
 	
END;
