PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.supplydemand::p_get_drilldown_resource_by_executionid_location_equipment_date"(
	IN PLAN_ID BIGINT,
	IN EXECUTION_ID BIGINT,
	IN TIMEZONE NVARCHAR(50),
	IN NODE_ID BIGINT,
	IN RESOURCE_TYPE_CODE VARCHAR(32),
	IN IN_SEQUENCE BIGINT,
	IN LOCATION_ID_LIST "sap.tm.trp.db.pipeline::tt_get_virtual_plan_table_result_drilldown_details_location_id_list",
	IN OUTPUT_KEY_LIST "sap.tm.trp.db.pipeline::tt_get_virtual_plan_table_result_drilldown_details_output_key_list",
	OUT OUTPUT "sap.tm.trp.db.supplydemand::tt_get_drilldown_resource_by_executionid_location_equipment_date_output"
) 
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
DEFAULT SCHEMA "SAP_TM_TRP"
READS SQL DATA
AS
CNT INTEGER;
BEGIN

DECLARE  NON_EXISTS_EQUIP_ID VARCHAR(30) := '';
DECLARE  ADDREGAT_METHOD_KEY VARCHAR(30) := 'AGGREGATIONMETHOD';
DECLARE  ADDREGAT_METHOD_SUM_VALUE VARCHAR(30) := 'SUM';
DECLARE  ADDREGAT_METHOD_MEAN_VALUE VARCHAR(30) := 'MEAN';
DECLARE VAR_TIME_FILTER_ID BIGINT := 0 ;


    LOCATION = SELECT NULL AS GEO_ID, ID AS LOCATION_ID, NULL AS GEO_FILTER_TYPE, NULL AS GEO_GROUP_ID, NULL AS GEO_NAME FROM :LOCATION_ID_LIST;
	CALL "sap.tm.trp.db.supplydemand::p_get_supply_demand_result_by_plan_location"(:PLAN_ID, :EXECUTION_ID, :TIMEZONE, :LOCATION, SD_RESULT);
	
-- GET COUNT OF OUTPUT_KEY LIST
SELECT COUNT(*) INTO CNT FROM :OUTPUT_KEY_LIST;

IF :CNT = 0 THEN
	OUTPUT =
		SELECT 
			T1.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE
			,T2.OUTPUT_KEY
			,T10.METADATA_NODE_ID AS DRILLDOWN_OUTPUT_KEY
			,CASE WHEN UCASE(T12.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN  AVG(TO_DOUBLE(T1.OUTPUT_VALUE)) 
        		  ELSE SUM(TO_DOUBLE(T1.OUTPUT_VALUE))  END AS OUTPUT_VALUE
        	,T13.VALUE AS DRILLDOWN_NODE_NAV_TYPE
        FROM :SD_RESULT T1
        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T2 ON (T1.NODE_ID = T2.PARENT_NODE_ID AND T1.OUTPUT_KEY = T2.OUTPUT_KEY)
        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T10 on T10.ID = T1.NODE_ID
        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T12 ON (T10.ID = T12.NODE_ID AND UCASE(T12.KEY) = :ADDREGAT_METHOD_KEY)
        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T13 ON (T10.ID = T13.NODE_ID AND LOWER(T13.KEY) = 'navigationtype')
        WHERE (T1.PLAN_EXECUTION_ID = :EXECUTION_ID OR :EXECUTION_ID = -1) AND T2.NODE_ID = :NODE_ID
	 	AND T1.SEQUENCE = :IN_SEQUENCE AND T1.EQUIP_TYPE_ID = :RESOURCE_TYPE_CODE
        GROUP BY T1.EQUIP_TYPE_ID, T2.OUTPUT_KEY, T10.METADATA_NODE_ID,T12.VALUE, T13.VALUE
        ORDER BY T2.OUTPUT_KEY,T10.METADATA_NODE_ID;
ELSE
	OUTPUT =
		SELECT 
			T1.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE
			,T2.OUTPUT_KEY
			,T10.METADATA_NODE_ID AS DRILLDOWN_OUTPUT_KEY
			,CASE WHEN UCASE(T12.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN AVG(TO_DOUBLE(T1.OUTPUT_VALUE)) ELSE SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) END AS OUTPUT_VALUE
			,T13.VALUE AS DRILLDOWN_NODE_NAV_TYPE
        FROM :SD_RESULT T1
        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T2 ON (T1.NODE_ID = T2.PARENT_NODE_ID AND T1.OUTPUT_KEY = T2.OUTPUT_KEY)
        INNER JOIN :OUTPUT_KEY_LIST T6 ON (T2.OUTPUT_KEY = T6.OUTPUT_KEY) -- filter the logical hierachy by outputKey
        INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T10 on T10.ID = T1.NODE_ID
        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T12 ON (T10.ID = T12.NODE_ID AND UCASE(T12.KEY) = :ADDREGAT_METHOD_KEY)
        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T13 ON (T10.ID = T13.NODE_ID AND T13.KEY = 'navigationType')
        WHERE (T1.PLAN_EXECUTION_ID = :EXECUTION_ID OR :EXECUTION_ID = -1) AND T2.NODE_ID = :NODE_ID
	 	AND T1.SEQUENCE = :IN_SEQUENCE AND T1.EQUIP_TYPE_ID = :RESOURCE_TYPE_CODE
        GROUP BY T1.EQUIP_TYPE_ID,T2.OUTPUT_KEY, T10.METADATA_NODE_ID,T12.VALUE, T13.VALUE
        ORDER BY T2.OUTPUT_KEY,T10.METADATA_NODE_ID;
END IF;
	
END;
