PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.supplydemand::p_get_execution_result_by_executionid" (
	IN PLAN_ID BIGINT,
	IN PLAN_EXECUTION_ID BIGINT,
	IN TIMEZONE NVARCHAR(50),
	IN NODE_ID BIGINT,
	IN IN_LOCATION_ID_LIST CLOB, --"sap.tm.trp.db.supplydemand::tt_id_list",
	OUT OUT_PUT "sap.tm.trp.db.supplydemand::tt_get_execution_result_by_executionid_output"
)  
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	--READS SQL DATA
	AS
BEGIN

 	DECLARE  ADDREGAT_METHOD_KEY VARCHAR(30) := 'AGGREGATIONMETHOD';
    DECLARE  ADDREGAT_METHOD_SUM_VALUE VARCHAR(30) := 'SUM';
    DECLARE  ADDREGAT_METHOD_MEAN_VALUE VARCHAR(30) := 'MEAN';
    
    DECLARE INSTANT_ENABLED CHAR(1) DEFAULT '';
    
    DECLARE LOCATION_ID_INPUT_P TABLE(
    "ID" VARCHAR(22)
    );
    
    CALL "sap.tm.trp.db.dashboard::sp_splitter_clob" (:IN_LOCATION_ID_LIST,',',LOCATION_ID_INPUT_STRING);
    LOCATION_ID_INPUT_P = SELECT string as ID FROM :LOCATION_ID_INPUT_STRING;
    
    LOCATION = SELECT CAST('' AS VARCHAR(22)) AS GEO_ID, ID AS LOCATION_ID, 0 AS GEO_FILTER_TYPE, CAST('' AS VARCHAR(22)) AS GEO_GROUP_ID, CAST('' AS VARCHAR(100)) AS GEO_NAME FROM :LOCATION_ID_INPUT_P;
    
    --LOCATION = SELECT CAST('' AS VARCHAR(22)) AS GEO_ID, CAST(ID AS VARCHAR(22)) AS LOCATION_ID, 0 AS GEO_FILTER_TYPE, CAST('' AS VARCHAR(22)) AS GEO_GROUP_ID, CAST('' AS VARCHAR(100)) AS GEO_NAME FROM :IN_LOCATION_ID_LIST;
	CALL "sap.tm.trp.db.supplydemand::p_get_supply_demand_result_by_plan_location"(:PLAN_ID, :PLAN_EXECUTION_ID, :TIMEZONE, :LOCATION, SD_RESULT);
    
	lt_output_dataset = select T1.LOCATION_ID,T1.LOCATION_NAME,
	   T1.EQUIP_TYPE_ID,T1.EQUIP_TYPE_NAME,
       T1.START_TIME,T1.END_TIME,T1.SEQUENCE,
        T1.OUTPUT_KEY,TO_DOUBLE(T1.OUTPUT_VALUE) AS OUTPUT_VALUE,
        :NODE_ID AS OUT_NODE_ID,T1.TIME_INTERVAL,T1.node_id,t1.time_interval_id, t1.unit from  
        :SD_RESULT T1
     INNER JOIN :LOCATION_ID_INPUT_P T5 ON (T1.LOCATION_ID = T5.ID)
      --INNER JOIN :IN_LOCATION_ID_LIST T5 ON (T1.LOCATION_ID = T5.ID)
      WHERE T1.NODE_ID = :NODE_ID;
      
    lt_nodes = SELECT NAME,ID 
	                   FROM "sap.tm.trp.db.pipeline::t_pipeline_node"
	                   WHERE ID = :NODE_ID;
	                   
    SELECT IFNULL (T2.INSTANT_ENABLED,'') INTO INSTANT_ENABLED
	FROM "sap.tm.trp.db.pipeline::t_plan_model" AS T1
	INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_model" AS T2 ON T1.PIPELINE_MODEL_ID = T2.ID
	WHERE T1.ID = :PLAN_ID;
	
	IF PLAN_EXECUTION_ID IS NOT NULL AND PLAN_EXECUTION_ID <> -1 THEN
	
	    DATASET1 = SELECT DISTINCT 
    	    T1.LOCATION_ID,T1.LOCATION_NAME,
        	T1.EQUIP_TYPE_ID,T1.EQUIP_TYPE_NAME,
            T1.START_TIME,T1.END_TIME,T1.SEQUENCE,
            T1.OUTPUT_KEY,TO_DOUBLE(T1.OUTPUT_VALUE) AS OUTPUT_VALUE,
            CASE LOWER(T3."MESSAGE") WHEN 'alert' THEN 1 ELSE 0 END AS "ALERT_STATUS",
            T3.ALERT_REASON,
            :NODE_ID AS OUT_NODE_ID,T2.NAME AS OUT_NODE_NAME,T6.VALUE AS OUT_NODE_NAV_TYPE,
            IFNULL(T5.NODE_ID,0) AS HAS_DRILLDOWN_FLAG,T1.TIME_INTERVAL
        FROM :lt_output_dataset T1
        INNER JOIN :lt_nodes T2 ON (T1.NODE_ID = T2.ID)
        LEFT JOIN "sap.tm.trp.db.hrf::v_SD_KPI_rules"  T3 ON (T3.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID
                     AND T3.NODE_ID = T1.NODE_ID 
                     AND T3.EQUIP_TYPE_ID = T1.EQUIP_TYPE_ID AND T3.LOCATION_ID = T1.LOCATION_ID 
                     AND T1.TIME_INTERVAL_ID = T3.TIME_INTERVAL_ID
        )
        LEFT OUTER JOIN  "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy"  T5 ON (T5.NODE_ID = T1.NODE_ID AND T5.OUTPUT_KEY = T1.OUTPUT_KEY)
        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T6 ON (T1.NODE_ID = T6.NODE_ID AND LOWER(T6.KEY) = 'navigationtype');
	
	ELSEIF INSTANT_ENABLED = 'X' THEN
	
	    lt_dataset =
	        select 
	            node_id,
	            LOCATION_ID,
	            LOCATION_NAME,
	            EQUIP_TYPE_ID,
	            EQUIP_TYPE_NAME,
	            OUTPUT_KEY,
	            OUTPUT_VALUE,
	            time_interval_id,
	            START_TIME,
	            END_TIME,
	            SEQUENCE,
	            TIME_INTERVAL,
	            UNIT
            from :SD_RESULT;	            
	            
	    CALL "SAP_TM_TRP"."sap.tm.trp.db.supplydemand::p_get_instant_hrf_alert_wrapper"(:PLAN_ID, :lt_dataset, lt_hrf_sd_output );
	    
	    DATASET1 = SELECT DISTINCT T1.LOCATION_ID,T1.LOCATION_NAME,
    	   T1.EQUIP_TYPE_ID,T1.EQUIP_TYPE_NAME,
           T1.START_TIME,T1.END_TIME,T1.SEQUENCE,
            T1.OUTPUT_KEY,TO_DOUBLE(T1.OUTPUT_VALUE) AS OUTPUT_VALUE,
          CASE LOWER(T3."MESSAGE") WHEN 'alert' THEN 1 ELSE 0 END AS "ALERT_STATUS",
          T3.ALERT_REASON,
          :NODE_ID AS OUT_NODE_ID,T2.NAME AS OUT_NODE_NAME,T6.VALUE AS OUT_NODE_NAV_TYPE,
          IFNULL(T5.NODE_ID,0) AS HAS_DRILLDOWN_FLAG,T1.TIME_INTERVAL
          FROM :lt_output_dataset T1
          INNER JOIN :lt_nodes T2 ON (T1.NODE_ID = T2.ID)
          LEFT JOIN :lt_hrf_sd_output  T3 ON (
                    T3.NODE_ID = T1.NODE_ID 
                    AND T3.EQUIP_TYPE_ID = T1.EQUIP_TYPE_ID AND T3.LOCATION_ID = T1.LOCATION_ID 
                    AND T1.TIME_INTERVAL_ID = T3.TIME_INTERVAL_ID
                )
        LEFT OUTER JOIN  "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy"  T5 ON (T5.NODE_ID = T1.NODE_ID AND T5.OUTPUT_KEY = T1.OUTPUT_KEY)
        LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T6 ON (T1.NODE_ID = T6.NODE_ID AND LOWER(T6.KEY) = 'navigationtype');
	
	END IF;  

	DATASET = SELECT T4.LOCATION_ID AS GEO_ID,T4.LOCATION_NAME AS GEO_NAME,
				T4.OUTPUT_KEY,CASE WHEN UCASE(T12.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN  AVG(TO_DOUBLE(T4.OUTPUT_VALUE))
	            ELSE SUM(TO_DOUBLE(T4.OUTPUT_VALUE))  END AS OUTPUT_VALUE ,
	            T4.START_TIME,T4.END_TIME,
	            T4.SEQUENCE,SUM(T4.ALERT_STATUS) AS ALERT_STATUS,T4.OUT_NODE_ID,
	            T4.HAS_DRILLDOWN_FLAG,T4.TIME_INTERVAL,
	            T4.OUT_NODE_NAME,T4.OUT_NODE_NAV_TYPE
			    FROM :DATASET1 t4
				LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T12 ON (T4.OUT_NODE_ID = T12.NODE_ID AND UCASE(T12.KEY) = :ADDREGAT_METHOD_KEY )
			    GROUP BY T4.LOCATION_ID,T4.LOCATION_NAME,T4.OUTPUT_KEY,T12.VALUE,T4.START_TIME,T4.END_TIME,T4.SEQUENCE,T4.OUT_NODE_ID,
			    T4.HAS_DRILLDOWN_FLAG,T4.TIME_INTERVAL,T4.OUT_NODE_NAME,T4.OUT_NODE_NAV_TYPE
			    ORDER BY T4.LOCATION_ID,T4.OUTPUT_KEY,T4.SEQUENCE;
	
	--Re-generate those 0 number records not saved in db		    
	OUTPUT_WITH_ZERO = SELECT GEO_ID             AS GEO_ID,
	                 GEO_NAME           AS GEO_NAME,
	                 OUTPUT_KEY         AS OUTPUT_KEY,
	                 OUTPUT_VALUE       AS OUTPUT_VALUE,
	                 START_TIME         AS START_TIME,
	                 END_TIME           AS END_TIME,
	                 SEQUENCE           AS SEQUENCE,
	                 ALERT_STATUS       AS ALERT_STATUS,
	                 OUT_NODE_ID        AS OUT_NODE_ID,
	                 HAS_DRILLDOWN_FLAG AS HAS_DRILLDOWN_FLAG,
	                 TIME_INTERVAL      AS TIME_INTERVAL,
	                 OUT_NODE_NAME      AS OUT_NODE_NAME,
	                 OUT_NODE_NAV_TYPE  AS OUT_NODE_NAV_TYPE
	            FROM :DATASET
	           UNION ALL
	          SELECT GEO_ID            AS GEO_ID,
	                 GEO_NAME           AS GEO_NAME,
	                 CASE  WHEN OUTPUT_KEY = 'DEMAND' THEN 'SUPPLY' 
	                       ELSE 'DEMAND' END AS OUTPUT_KEY,
	                 0                  AS OUTPUT_VALUE,
	                 START_TIME         AS START_TIME,
	                 END_TIME           AS END_TIME,
	                 SEQUENCE           AS SEQUENCE,
	                 ALERT_STATUS       AS ALERT_STATUS,
	                 OUT_NODE_ID        AS OUT_NODE_ID,
	                 HAS_DRILLDOWN_FLAG AS HAS_DRILLDOWN_FLAG,
	                 TIME_INTERVAL      AS TIME_INTERVAL,
	                 OUT_NODE_NAME      AS OUT_NODE_NAME,
	                 OUT_NODE_NAV_TYPE  AS OUT_NODE_NAV_TYPE
	            FROM :DATASET; 
 	
 	--Summerize quantity those output key and sequence are same
    OUT_PUT =  SELECT    GEO_ID             AS GEO_ID,
                         CAST(GEO_NAME AS VARCHAR(50)) AS GEO_NAME,
                         CAST(OUTPUT_KEY AS VARCHAR(30) ) AS OUTPUT_KEY,
                         SUM(OUTPUT_VALUE)  AS OUTPUT_VALUE,
                         START_TIME         AS START_TIME,
                         END_TIME           AS END_TIME,
                         SEQUENCE           AS SEQUENCE,
                         SUM(ALERT_STATUS)  AS ALERT_STATUS,
                         OUT_NODE_ID        AS OUT_NODE_ID,
                         TO_INT(HAS_DRILLDOWN_FLAG) AS HAS_DRILLDOWN_FLAG,
                         TIME_INTERVAL      AS TIME_INTERVAL,
                         OUT_NODE_NAME      AS OUT_NODE_NAME,
                         OUT_NODE_NAV_TYPE  AS OUT_NODE_NAV_TYPE
                FROM    :OUTPUT_WITH_ZERO
                GROUP BY GEO_ID,
                         GEO_NAME,
                         OUTPUT_KEY,
                         START_TIME,
                         END_TIME,
                         SEQUENCE,
                         OUT_NODE_ID,
                         HAS_DRILLDOWN_FLAG,
                         TIME_INTERVAL,
                         OUT_NODE_NAME,
                         OUT_NODE_NAV_TYPE;
 
END;
