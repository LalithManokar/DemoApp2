PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.equipment::p_get_stock_chart_clob" (
	IN ATTRIBUTE_GROUP_ID BIGINT,
    IN EQUIPMENT_FILTER_ID BIGINT,
    IN LOCATION_FILTER_ID BIGINT,
	IN IV_NODE_ID_LIST CLOB,--"sap.tm.trp.db.filter::tt_attribute_group_dynamic_item_node_list",
	IN IV_LOCATION_ID_LIST CLOB,--"sap.tm.trp.db.equipment::tt_get_stock_table_location_id_list",
	--IN LOCATION_NAME_LIST CLOB,--VARCHAR(5000),
    --IN LOCATION_TYPE INTEGER,
	OUT OUTPUT_STOCK_LOCATION_EQUIP "sap.tm.trp.db.equipment::tt_get_stock_chart_location_equip_output",
	OUT OUTPUT_STOCK_LOCATION "sap.tm.trp.db.equipment::tt_get_stock_chart_location_output"
) 
	LANGUAGE SQLSCRIPT 
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
--	READS SQL DATA 
AS
EQUIP_FLAG INT;
LANGUAGE_CODE CHAR(1);
RESOURCE_CATEGORY VARCHAR(20);

BEGIN

-- 	DECLARE CONTSTANT
DECLARE EQUIP_TYPE INTEGER := 1; 
DECLARE EQUIP_TYPE_GROUP INTEGER := 2;
DECLARE LOCATION_TYPE INTEGER;
DECLARE LV_MOVEMENT_STATUS_CODE NVARCHAR(10);

---to eliminate cache invalidation
SELECT 'NIT' AS VALUE INTO LV_MOVEMENT_STATUS_CODE FROM DUMMY;
select RESOURCE_CATEGORY into RESOURCE_CATEGORY from dummy ;
SELECT EQUIPMENT_FILTER_ID INTO EQUIPMENT_FILTER_ID FROM DUMMY;


-- GET LANGUAGE CODE
SELECT IFNULL(MAX(SPRAS),'E') INTO LANGUAGE_CODE FROM "sap.tm.trp.db.semantic.common::v_lang_code";

-- GET FILTER_TYPE & LOCATION_TYPE
SELECT IFNULL (MAX (FILTER_TYPE),0), IFNULL (MAX (RESOURCE_CATEGORY),'') 
INTO EQUIP_FLAG, RESOURCE_CATEGORY 
FROM "sap.tm.trp.db.filter::t_equipment_filter"
WHERE ID = :EQUIPMENT_FILTER_ID;

RESOURCE_TYPES = SELECT DISTINCT RESOURCE_TYPE_CODE, RESOURCE_TYPE_DESC
                FROM "sap.tm.trp.db.semantic.resource::v_resource_type_with_category"
                WHERE RESOURCE_CATEGORY = :RESOURCE_CATEGORY;
                
                	--Begin of CLOB to Table Variable Changes - 
    CALL "sap.tm.trp.db.dashboard::sp_splitter_clob" (:IV_NODE_ID_LIST,',',LT_NODE_ID_LIST);
    NODE_ID_LIST = SELECT string as NODE_ID FROM :LT_NODE_ID_LIST;
    
    CALL "sap.tm.trp.db.dashboard::sp_splitter_clob" (:IV_LOCATION_ID_LIST,'~',lt_loc_id_raw);
    
    LOCATION_ID_LIST = select CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 1) as VARCHAR(22)) as ID,
                                CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 2) as VARCHAR(20)) as NAME,
                                CAST(SUBSTR_REGEXPR('[^,]+' IN "STRING" OCCURRENCE 3) as INTEGER) as TYPE
                            from :lt_loc_id_raw;                                                 
                            
--End of CLOB to Table Variable Changes - 
/*
-- Get Location Filter Type
SELECT DISTINCT TYPE INTO LOCATION_TYPE FROM :LOCATION_ID_LIST;

IF :LOCATION_TYPE = 1 THEN 
--LOCATION

LOCATION_ID_HIERARCHY_LIST =
    SELECT DISTINCT
        T0.ID AS ID
        ,T0.NAME AS NAME
        ,T1.DESC AS DESC
        ,T0.TYPE AS TYPE
        ,T0.ID AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
              LEFT JOIN "sap.tm.trp.db.semantic.location::v_location" T1 ON T1.ID = T0.ID
              ;

ELSEIF :LOCATION_TYPE = 2 THEN 
--LOCATION GROUP

LOCATION_ID_HIERARCHY_LIST =    
    SELECT DISTINCT
        T0.ID AS ID
        ,T0.NAME AS NAME
        ,T4.DESC AS DESC
        ,T0.TYPE AS TYPE
        ,T2.LOCATION_ID AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" T2 ON T2.LOCATION_GROUP_ID = T0.ID
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group" T3 ON T3.ID = T0.ID
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group_t" T4 ON T4.ID = T3.ID AND T4.SPRAS = :LANGUAGE_CODE
              ;    
    
ELSEIF :LOCATION_TYPE = 5 THEN 
--REGION

LOCATION_ID_HIERARCHY_LIST =    
    SELECT DISTINCT
        T0.ID AS ID
        ,T0.NAME AS NAME
        ,T6.DESC AS DESC
        ,T0.TYPE AS TYPE
       ,T5.LOCATION_ID AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
    LEFT JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A ON A.ROOT_ID = T0.ID
              LEFT JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_loc_of_regions" T5 ON T5.ZONE_ID = A.ROOT_ID
              LEFT JOIN "sap.tm.trp.db.semantic.location::v_zone" T6 ON T6.ID = T0.ID
              ;  

ELSEIF :LOCATION_TYPE = 6 THEN 
--REGION GROUP

LOCATION_ID_HIERARCHY_LIST =    
    SELECT DISTINCT
        T0.ID AS ID
        ,T0.NAME AS NAME
        ,T10.DESC AS DESC
        ,T0.TYPE AS TYPE
        ,T8.LOCATION_ID AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
              LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" T7 ON T7.REGION_GROUP_ID = T0.ID
              LEFT JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" B ON B.ROOT_ID = T7.ZONE_ID 
              LEFT JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_loc_of_regions" T8 ON T8.ZONE_ID = B.ZONE_ID
              LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group" T9 ON T9.ID = T0.ID
              LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group_t" T10 ON T10.ID = T9.ID AND T10.SPRAS = :LANGUAGE_CODE
              ;  

END IF;
*/
-- GET INPUT LOCATION LIST
LOCATION_ID_HIERARCHY_LIST =
	SELECT DISTINCT
		T0.ID AS ID
		,T0.NAME AS NAME
		,CASE WHEN T0.TYPE = 1 THEN T1.DESC
			  WHEN T0.TYPE = 2 THEN T4.DESC
			  WHEN T0.TYPE = 5 THEN T6.DESC
			  WHEN T0.TYPE = 6 THEN T10.DESC
		END AS DESC
		,T0.TYPE AS TYPE
		,CASE WHEN T0.TYPE = 1 THEN T0.ID
			  WHEN T0.TYPE = 2 THEN T2.LOCATION_ID
			  WHEN T0.TYPE = 5 THEN T5.LOCATION_ID
			  WHEN T0.TYPE = 6 THEN T8.LOCATION_ID 
		END AS LOCATION_ID
	FROM :LOCATION_ID_LIST T0
	LEFT JOIN "sap.tm.trp.db.semantic.location::v_location" T1 ON T1.ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" T2 ON T2.LOCATION_GROUP_ID = T0.ID
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group" T3 ON T3.ID = T0.ID
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group_t" T4 ON T4.ID = T3.ID AND T4.SPRAS = :LANGUAGE_CODE
	LEFT JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A ON A.ROOT_ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" T5 ON T5.ZONE_ID = A.ROOT_ID
	LEFT JOIN "sap.tm.trp.db.semantic.location::v_zone" T6 ON T6.ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" T7 ON T7.REGION_GROUP_ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" B ON B.ROOT_ID = T7.ZONE_ID 
	LEFT JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" T8 ON T8.ZONE_ID = B.ZONE_ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group" T9 ON T9.ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group_t" T10 ON T10.ID = T9.ID AND T10.SPRAS = :LANGUAGE_CODE
	;
	
	
-- GET ALL VALID RESOURCE FILTERED BY ATTRIBUTE GROUP
--IF :ATTRIBUTE_GROUP_ID = -1
IF 1 = 1 -- disable attribute group.(this might be enabled next time)
THEN
	T_RESOURCE_BASE =
	    SELECT DISTINCT
            T0.RESOURCE_NAME AS EQUIPMENT_ID
            ,T1.RESOURCE_TYPE_CODE AS SIZE_TYPE
            ,T1.RESOURCE_TYPE_DESC AS SIZE_TYPE_DESC
            ,T0.TEU_COUNT
            ,T2.MOVEMENT_STATUS_CODE AS MOVEMENT_STATUS
            ,T2.CURRENT_LOCATION_ID AS CURRENT_LOCATION
            ,T2.BLOCK_STATUS_CODE AS LAST_STATUS_CODE
            ,T2.BLOCK_STATUS_DESC AS LAST_STATUS_DESC
            ,(CASE WHEN T2.BLOCK_STATUS_CODE = '' OR T2.BLOCK_STATUS_CODE IS NULL THEN 'AVAILABLE' ELSE 'UNAVAILABLE' END) AS RESOURCE_AVAILABLITY
            ,T0.RESOURCE_ID AS RESID
    FROM "sap.tm.trp.db.semantic.resource::v_resource_master" T0
	INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_category" TRC ON TRC.MAPPING_CODE = T0.EQUITYPE
    LEFT JOIN "sap.tm.trp.db.semantic.resource::v_resource_type" T1 
    ON (T1.RESOURCE_TYPE_CODE = T0.RESOURCE_TYPE_CODE AND T1.EQUI_TYPE = T0.EQUITYPE)
	LEFT JOIN "sap.tm.trp.db.semantic.resource::v_resource_status" T2 ON T2.RESOURCE_ID = T0.RESOURCE_ID
    INNER JOIN (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T3 ON T3.LOCATION_ID = T2.CURRENT_LOCATION_ID
    WHERE T2.MOVEMENT_STATUS_CODE = :LV_MOVEMENT_STATUS_CODE AND TRC.CODE = :RESOURCE_CATEGORY
    ;
ELSE

CALL "sap.tm.trp.db.equipment::p_equipment_attribute_group"(:ATTRIBUTE_GROUP_ID, :NODE_ID_LIST, :RESOURCE_CATEGORY, T_RESOURCE_BASE_1);
T_RESOURCE_BASE =
	SELECT DISTINCT
		T0.EQUIPMENT_ID
        ,T0.SIZE_TYPE
        ,T0.SIZE_TYPE_DESC
        ,T0.TEU_COUNT
        ,T0.MOVEMENT_STATUS
        ,T0.CURRENT_LOCATION
        ,T0.LAST_STATUS_CODE
        ,T0.LAST_STATUS_DESC
        ,T0.RESOURCE_AVAILABLITY
        ,T0.RESID
    FROM :T_RESOURCE_BASE_1 T0
    INNER JOIN (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T1 ON T1.LOCATION_ID = T0.CURRENT_LOCATION
    WHERE T0.MOVEMENT_STATUS = :LV_MOVEMENT_STATUS_CODE
    ;
END IF;

IF :EQUIP_FLAG = :EQUIP_TYPE THEN
	EQUIP_TYPE_LIST =
		SELECT DISTINCT
			T1.EQUI_CODE AS ID
			,T1.EQUI_CODE AS NAME
			,T2.RESOURCE_TYPE_DESC AS DESC
		FROM "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T1
		LEFT JOIN :RESOURCE_TYPES T2 ON T2.RESOURCE_TYPE_CODE = T1.EQUI_CODE
		WHERE T1.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID 
		;
	T_RESOURCE = 
		SELECT 
			T2.CURRENT_LOCATION AS LOCATION_ID
			,T2.RESID AS RESOURCE_ID
			,T2.SIZE_TYPE AS EQUIPMENT_TYPE_ID
			,T2.SIZE_TYPE_DESC AS EQUIPMENT_TYPE
			,T2.TEU_COUNT
			,:EQUIP_FLAG AS EQUIP_CODE_TYPE
			,T2.LAST_STATUS_DESC AS CATEGORY
			,T2.RESOURCE_AVAILABLITY
		FROM :T_RESOURCE_BASE T2
		INNER JOIN :EQUIP_TYPE_LIST T4 ON T4.ID = T2.SIZE_TYPE
		WHERE T2.MOVEMENT_STATUS = :LV_MOVEMENT_STATUS_CODE 
		;
	T_TOTAL_STOCK =
		SELECT
			T0.LOC_ID
			,T0.RESOURCE_TYPE_CODE AS EQUIPMENT_TYPE_ID
			,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'AVAILABLE' THEN 1 ELSE 0 END) AS TOTAL_AVAILABLE_STOCK_PCS
			,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'UNAVAILABLE' THEN 1 ELSE 0 END) AS TOTAL_UNAVAILABLE_STOCK_PCS
			,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'AVAILABLE' THEN T1.TEU_COUNT ELSE 0 END) AS TOTAL_AVAILABLE_STOCK_TEU
			,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'UNAVAILABLE' THEN T1.TEU_COUNT ELSE 0 END) AS TOTAL_UNAVAILABLE_STOCK_TEU
			,T1.CATEGORY
		FROM (
			SELECT T0.LOC_ID, T1.ID AS RESOURCE_TYPE_CODE
			FROM (SELECT DISTINCT LOCATION_ID AS LOC_ID FROM :LOCATION_ID_HIERARCHY_LIST) T0
			CROSS JOIN :EQUIP_TYPE_LIST T1
			) T0
		LEFT JOIN (
			SELECT 
				T0.RESOURCE_ID
				,T1.CURRENT_LOCATION_ID AS LOCATION_ID
				,T0.RESOURCE_TYPE_CODE
				,T1.MOVEMENT_STATUS_CODE AS STATUS_TYPE
				,T1.BLOCK_STATUS_DESC AS CATEGORY
				,(CASE WHEN T1.BLOCK_STATUS_CODE = '' OR T1.BLOCK_STATUS_CODE IS NULL THEN 'AVAILABLE' ELSE 'UNAVAILABLE' END) AS RESOURCE_AVAILABLITY
				,T0.TEU_COUNT
			FROM "sap.tm.trp.db.semantic.resource::v_resource_master" T0
			INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_category" TRC ON TRC.MAPPING_CODE = T0.EQUITYPE
            LEFT JOIN "sap.tm.trp.db.semantic.resource::v_resource_status" T1 ON T1.RESOURCE_ID = T0.RESOURCE_ID
			INNER JOIN (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) LOCATION ON LOCATION.LOCATION_ID = T1.CURRENT_LOCATION_ID
			INNER JOIN :EQUIP_TYPE_LIST EQUIP ON EQUIP.ID = T0.RESOURCE_TYPE_CODE
			WHERE T1.MOVEMENT_STATUS_CODE = :LV_MOVEMENT_STATUS_CODE AND TRC.CODE = :RESOURCE_CATEGORY
			) T1 ON T1.LOCATION_ID = T0.LOC_ID AND T1.RESOURCE_TYPE_CODE = T0.RESOURCE_TYPE_CODE
		
		GROUP BY T0.LOC_ID,T0.RESOURCE_TYPE_CODE,T1.CATEGORY
		;
ELSE
	EQUIP_TYPE_LIST = 
		SELECT DISTINCT
			T1.EQUIPMENT_GROUP_ID AS ID
			,T2.DESC AS NAME
			,T3.DESC AS DESC
		FROM "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T1
		LEFT JOIN "sap.tm.trp.db.systemmanagement::t_equipment_group" T2 ON T2.ID = T1.EQUIPMENT_GROUP_ID AND T2.RESOURCE_CATEGORY = T1.RESOURCE_CATEGORY
		LEFT JOIN "sap.tm.trp.db.systemmanagement::t_equipment_group_t" T3 ON T3.ID = T1.EQUIPMENT_GROUP_ID AND T3.SPRAS = :LANGUAGE_CODE
		WHERE T1.EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
		;
	T_RESOURCE = 
		SELECT 
			T2.CURRENT_LOCATION AS LOCATION_ID
			,T2.RESID AS RESOURCE_ID
			,T3.EQUIPMENT_GROUP_ID AS EQUIPMENT_TYPE_ID
			,T4.DESC AS EQUIPMENT_TYPE
			,T2.TEU_COUNT
			,:EQUIP_FLAG AS EQUIP_CODE_TYPE
			,T2.LAST_STATUS_DESC AS CATEGORY
			,T2.RESOURCE_AVAILABLITY
		FROM :T_RESOURCE_BASE T2
		INNER JOIN "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T3 on T3.EQUI_CODE = T2.SIZE_TYPE
		LEFT JOIN (
			SELECT DISTINCT T1.ID,T1.DESC
			FROM "sap.tm.trp.db.systemmanagement::t_equipment_group" T1
			) T4 ON T4.ID = T3.EQUIPMENT_GROUP_ID
		INNER JOIN :EQUIP_TYPE_LIST T5 ON T5.ID = T3.EQUIPMENT_GROUP_ID
		WHERE T2.MOVEMENT_STATUS = :LV_MOVEMENT_STATUS_CODE
		;
	T_TOTAL_STOCK =
		SELECT
			T0.LOC_ID
			,T0.RESOURCE_TYPE_CODE AS EQUIPMENT_TYPE_ID
			,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'AVAILABLE' THEN 1 ELSE 0 END) AS TOTAL_AVAILABLE_STOCK_PCS
			,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'UNAVAILABLE' THEN 1 ELSE 0 END) AS TOTAL_UNAVAILABLE_STOCK_PCS
			,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'AVAILABLE' THEN T1.TEU_COUNT ELSE 0 END) AS TOTAL_AVAILABLE_STOCK_TEU
			,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'UNAVAILABLE' THEN T1.TEU_COUNT ELSE 0 END) AS TOTAL_UNAVAILABLE_STOCK_TEU
			,T1.CATEGORY
		FROM (
			SELECT T0.LOC_ID, T1.ID AS RESOURCE_TYPE_CODE
			FROM (SELECT DISTINCT LOCATION_ID AS LOC_ID FROM :LOCATION_ID_HIERARCHY_LIST) T0
			CROSS JOIN :EQUIP_TYPE_LIST T1
		) T0
		LEFT JOIN (
			SELECT DISTINCT
				T0.LOCATION_ID
				,T0.RESOURCE_ID
				,T1.RESOURCE_TYPE_CODE
				,T0.CATEGORY
				,T0.RESOURCE_AVAILABLITY
				,T0.TEU_COUNT
			FROM (
				SELECT 
					T0.RESOURCE_ID
					,T1.CURRENT_LOCATION_ID AS LOCATION_ID
					,T0.RESOURCE_TYPE_CODE
					,T1.MOVEMENT_STATUS_CODE AS STATUS_TYPE
					,T1.BLOCK_STATUS_DESC AS CATEGORY
					,(CASE WHEN T1.BLOCK_STATUS_CODE = '' OR T1.BLOCK_STATUS_CODE IS NULL THEN 'AVAILABLE' ELSE 'UNAVAILABLE' END) AS RESOURCE_AVAILABLITY
					,T0.TEU_COUNT
				FROM "sap.tm.trp.db.semantic.resource::v_resource_master" T0
				INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_category" TRC ON TRC.MAPPING_CODE = T0.EQUITYPE
                LEFT JOIN "sap.tm.trp.db.semantic.resource::v_resource_status" T1 ON T1.RESOURCE_ID = T0.RESOURCE_ID
				INNER JOIN (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) LOCATION ON LOCATION.LOCATION_ID = T1.CURRENT_LOCATION_ID
				WHERE T1.MOVEMENT_STATUS_CODE = :LV_MOVEMENT_STATUS_CODE AND TRC.CODE = :RESOURCE_CATEGORY
					) T0
			INNER JOIN (
				SELECT DISTINCT T1.EQUI_CODE,T3.ID AS RESOURCE_TYPE_CODE
				FROM "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T1
				INNER JOIN :EQUIP_TYPE_LIST T3 ON T3.ID = T1.EQUIPMENT_GROUP_ID 
				) T1 ON T1.EQUI_CODE = T0.RESOURCE_TYPE_CODE
		) T1 ON T1.LOCATION_ID = T0.LOC_ID AND T1.RESOURCE_TYPE_CODE = T0.RESOURCE_TYPE_CODE
		GROUP BY T0.LOC_ID,T0.RESOURCE_TYPE_CODE,T1.CATEGORY
		;
END IF;

-- GET STOCK RESULT BASE ON DEPOT LOCATION & EQUIPMENT TYPE
T_STOCK_DEPOT_EQUIPMENT = 
	SELECT	
		T0.LOC_ID
		,T0.EQUIPMENT_TYPE_ID
		,T0.EQUIPMENT_NAME
		,T0.EQUIPMENT_DESC
		,T1.CATEGORY
		,T2.TOTAL_AVAILABLE_STOCK_PCS
		,T2.TOTAL_UNAVAILABLE_STOCK_PCS
		,T2.TOTAL_AVAILABLE_STOCK_TEU
		,T2.TOTAL_UNAVAILABLE_STOCK_TEU
		,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'AVAILABLE' THEN 1 ELSE 0 END ) AS AVAILABLE_STOCK_PCS
		,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'UNAVAILABLE' THEN 1 ELSE 0 END ) AS UNAVAILABLE_STOCK_PCS
		,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'AVAILABLE' THEN T1.TEU_COUNT ELSE 0 END ) AS AVAILABLE_STOCK_TEU
		,SUM(CASE WHEN T1.RESOURCE_AVAILABLITY = 'UNAVAILABLE' THEN T1.TEU_COUNT ELSE 0 END ) AS UNAVAILABLE_STOCK_TEU
		,COUNT(T1.RESOURCE_ID) AS STOCK_PCS
		,SUM(T1.TEU_COUNT) AS STOCK_TEU
	FROM (
		SELECT T1.LOC_ID, T2.ID AS EQUIPMENT_TYPE_ID, T2.NAME AS EQUIPMENT_NAME, T2.DESC AS EQUIPMENT_DESC
		FROM (SELECT DISTINCT IFNULL(LOCATION_ID,ID) AS LOC_ID FROM :LOCATION_ID_HIERARCHY_LIST) T1	-- USE ID AS LOCATION_ID IN CASE THERE IS NO DEPOT(CHILD) UNDER THIS LOCATION(PARENT)
		CROSS JOIN :EQUIP_TYPE_LIST T2
		) T0
	LEFT JOIN :T_TOTAL_STOCK T2 ON T2.LOC_ID = T0.LOC_ID AND T2.EQUIPMENT_TYPE_ID = T0.EQUIPMENT_TYPE_ID
	LEFT JOIN :T_RESOURCE T1 ON T1.LOCATION_ID = T0.LOC_ID AND T1.EQUIPMENT_TYPE_ID = T0.EQUIPMENT_TYPE_ID AND T1.CATEGORY = T2.CATEGORY
	GROUP BY T0.LOC_ID, T0.EQUIPMENT_TYPE_ID, T0.EQUIPMENT_NAME, T0.EQUIPMENT_DESC, T1.CATEGORY,T2.TOTAL_AVAILABLE_STOCK_PCS,T2.TOTAL_UNAVAILABLE_STOCK_PCS,T2.TOTAL_AVAILABLE_STOCK_TEU,T2.TOTAL_UNAVAILABLE_STOCK_TEU
	;
T_OVERALL_STOCK =
	SELECT
		LOCATION_ID
		,CATEGORY
		,SUM(CASE WHEN RESOURCE_AVAILABLITY = 'AVAILABLE' THEN TEU_COUNT ELSE 0 END) OVER (PARTITION BY LOCATION_ID) AS AVAILABLE_STOCK_TEU
		,SUM(CASE WHEN RESOURCE_AVAILABLITY = 'UNAVAILABLE' THEN TEU_COUNT ELSE 0 END) OVER (PARTITION BY LOCATION_ID) AS UNAVAILABLE_STOCK_TEU
		,SUM(TEU_COUNT) OVER (PARTITION BY LOCATION_ID, CATEGORY) AS STOCK_TEU
		,SUM(CASE WHEN RESOURCE_AVAILABLITY = 'AVAILABLE' THEN 1 ELSE 0 END) OVER (PARTITION BY LOCATION_ID) AS AVAILABLE_STOCK_PCS
		,SUM(CASE WHEN RESOURCE_AVAILABLITY = 'UNAVAILABLE' THEN 1 ELSE 0 END) OVER (PARTITION BY LOCATION_ID) AS UNAVAILABLE_STOCK_PCS
		,COUNT(1) OVER (PARTITION BY LOCATION_ID, CATEGORY) AS STOCK_PCS
	FROM (
	SELECT
		T2.ID AS LOCATION_ID
		,T1.BLOCK_STATUS_DESC AS CATEGORY
		,(CASE WHEN T1.BLOCK_STATUS_CODE = '' OR T1.BLOCK_STATUS_CODE IS NULL THEN 'AVAILABLE' ELSE 'UNAVAILABLE' END) AS RESOURCE_AVAILABLITY
		,T0.TEU_COUNT
	FROM "sap.tm.trp.db.semantic.resource::v_resource_master" T0
	INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_category" TRC ON TRC.MAPPING_CODE = T0.EQUITYPE
	INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_status" T1 ON T1.RESOURCE_ID = T0.RESOURCE_ID
	INNER JOIN (SELECT DISTINCT ID, LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T2 ON T2.LOCATION_ID = T1.CURRENT_LOCATION_ID
	WHERE T1.MOVEMENT_STATUS_CODE = :LV_MOVEMENT_STATUS_CODE AND TRC.CODE = :RESOURCE_CATEGORY
	)
	;
	
-- GET STOCK WITH EQUIPMENT TYPE FOR INPUT LOCATION (LOCATION EQUIP RESULT)
OUTPUT_STOCK_LOCATION_EQUIP = 
	SELECT DISTINCT
		T0.ID AS GEO_ID
		,T0.NAME AS GEO_NAME
		,T0.DESC AS GEO_DESC
		,T0.TYPE AS GEO_TYPE
		,T0.EQUIPMENT_TYPE_ID AS RESOURCE_TYPE_CODE
		,T0.EQUIPMENT_NAME AS RESOURCE_TYPE_NAME
		,T0.EQUIPMENT_DESC AS RESOURCE_TYPE_DESC
		,:EQUIP_FLAG AS RESOURCE_TYPE
		,T1.CATEGORY AS STOCK_DETAIL_CATEGORY
		,IFNULL(T1.TOTAL_AVAILABLE_STOCK_PCS,0) AS TOTAL_AVAILABLE_STOCK_PCS
		,IFNULL(T1.TOTAL_UNAVAILABLE_STOCK_PCS,0) AS TOTAL_UNAVAILABLE_STOCK_PCS
		,IFNULL(T1.AVAILABLE_STOCK_PCS,0) AS AVAILABLE_STOCK_PCS
		,IFNULL(T1.UNAVAILABLE_STOCK_PCS,0) AS UNAVAILABLE_STOCK_PCS
        ,IFNULL(T1.TOTAL_AVAILABLE_STOCK_TEU,0) AS TOTAL_AVAILABLE_STOCK_TEU
        ,IFNULL(T1.TOTAL_UNAVAILABLE_STOCK_TEU,0) AS TOTAL_UNAVAILABLE_STOCK_TEU
        ,IFNULL(T1.AVAILABLE_STOCK_TEU,0) AS AVAILABLE_STOCK_TEU
        ,IFNULL(T1.UNAVAILABLE_STOCK_TEU,0) AS UNAVAILABLE_STOCK_TEU
		,T2.MIN_SAFETY AS MIN_SAFETY_STOCK
		,T2.MAX_SAFETY AS MAX_SAFETY_STOCK
		,IFNULL(T1.STOCK_PCS,0) AS OVERALL_STOCK_DETAIL_PCS
		,IFNULL(T1.STOCK_TEU,0) AS OVERALL_STOCK_DETAIL_TEU
	FROM (
		SELECT T1.ID,T1.TYPE,T1.NAME,T1.DESC, T2.ID AS EQUIPMENT_TYPE_ID, T2.NAME AS EQUIPMENT_NAME, T2.DESC AS EQUIPMENT_DESC
		FROM (SELECT DISTINCT ID,TYPE,NAME,DESC FROM :LOCATION_ID_HIERARCHY_LIST) T1	-- USE ID AS LOCATION_ID IN CASE THERE IS NO DEPOT(CHILD) UNDER THIS LOCATION(PARENT)
		CROSS JOIN :EQUIP_TYPE_LIST T2
		) T0
	LEFT JOIN (
		SELECT 
			T0.ID AS LOCATION_ID
			,T0.TYPE AS LOCATION_TYPE
			,T0.NAME AS LOCATION_NAME
			,T0.DESC AS LOCATION_DESC
			,T1.EQUIPMENT_TYPE_ID AS EQUIP_TYPE_ID
			,T1.EQUIPMENT_NAME AS EQUIP_TYPE_NAME
			,T1.EQUIPMENT_DESC AS EQUIP_TYPE_DESC
			,T1.CATEGORY AS CATEGORY
			,SUM(IFNULL(T1.TOTAL_AVAILABLE_STOCK_PCS,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID) AS TOTAL_AVAILABLE_STOCK_PCS
			,SUM(IFNULL(T1.TOTAL_UNAVAILABLE_STOCK_PCS,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID) AS TOTAL_UNAVAILABLE_STOCK_PCS
			,SUM(IFNULL(T1.AVAILABLE_STOCK_PCS,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID) AS AVAILABLE_STOCK_PCS
			,SUM(IFNULL(T1.UNAVAILABLE_STOCK_PCS,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID) AS UNAVAILABLE_STOCK_PCS
			,SUM(IFNULL(T1.STOCK_PCS,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID,T1.CATEGORY) AS STOCK_PCS
            ,SUM(IFNULL(T1.TOTAL_AVAILABLE_STOCK_TEU,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID) AS TOTAL_AVAILABLE_STOCK_TEU
            ,SUM(IFNULL(T1.TOTAL_UNAVAILABLE_STOCK_TEU,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID) AS TOTAL_UNAVAILABLE_STOCK_TEU
            ,SUM(IFNULL(T1.AVAILABLE_STOCK_TEU,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID) AS AVAILABLE_STOCK_TEU
            ,SUM(IFNULL(T1.UNAVAILABLE_STOCK_TEU,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID) AS UNAVAILABLE_STOCK_TEU
            ,SUM(IFNULL(T1.STOCK_TEU,0)) OVER (PARTITION BY T0.ID,T1.EQUIPMENT_TYPE_ID,T1.CATEGORY) AS STOCK_TEU
		FROM :LOCATION_ID_HIERARCHY_LIST T0
		INNER JOIN :T_STOCK_DEPOT_EQUIPMENT T1 ON T1.LOC_ID = IFNULL(T0.LOCATION_ID,T0.ID)	-- USE ID AS LOCATION_ID IN CASE THERE IS NO DEPOT(CHILD) UNDER THIS LOCATION(PARENT)
			) T1 ON T1.LOCATION_ID = T0.ID AND T1.EQUIP_TYPE_ID = T0.EQUIPMENT_TYPE_ID
	LEFT JOIN (
		SELECT DISTINCT T0.LOCATION_ID,T0.LOCATION_TYPE,T0.EQUIP_CODE,T0.EQUIP_CODE_TYPE,T0.MIN_SAFETY,T0.MAX_SAFETY,T0.MAX_CAPACITY
		FROM "sap.tm.trp.db.stock::t_stock_config" T0
		WHERE T0.LOCATION_HEAD_FLAG = 0 and T0.RESOURCE_CATEGORY = :RESOURCE_CATEGORY
		) T2 ON T2.LOCATION_ID = T1.LOCATION_ID AND T2.LOCATION_TYPE = T1.LOCATION_TYPE	AND T2.EQUIP_CODE = T1.EQUIP_TYPE_ID
	WHERE T2.MIN_SAFETY IS NOT NULL OR T2.MAX_SAFETY IS NOT NULL OR T2.MAX_CAPACITY IS NOT NULL OR T1.STOCK_PCS <> 0
	;

-- GET STOCK FOR INPUT LOCATION
OUTPUT_STOCK_LOCATION =
	SELECT DISTINCT
		T1.LOCATION_ID AS GEO_ID
		,T1.LOCATION_NAME AS GEO_NAME
		,T1.LOCATION_DESC AS GEO_DESC
		,T1.LOCATION_TYPE AS GEO_TYPE
		,T1.CATEGORY AS STOCK_DETAIL_CATEGORY
        ,IFNULL(T1.OVERALL_AVAILABLE_STOCK_TEU,0) AS OVERALL_AVAILABLE_STOCK_TEU
        ,IFNULL(T1.OVERALL_UNAVAILABLE_STOCK_TEU,0) AS OVERALL_UNAVAILABLE_STOCK_TEU
        ,IFNULL(T1.OVERALL_AVAILABLE_STOCK_PCS,0) AS OVERALL_AVAILABLE_STOCK_PCS
        ,IFNULL(T1.OVERALL_UNAVAILABLE_STOCK_PCS,0) AS OVERALL_UNAVAILABLE_STOCK_PCS
		,T2.MIN_SAFETY AS MIN_SAFETY_STOCK
		,T2.MAX_SAFETY AS MAX_SAFETY_STOCK
		,IFNULL(T1.STOCK_TEU,0) AS OVERALL_STOCK_DETAIL_TEU
		,IFNULL(T1.STOCK_PCS,0) AS OVERALL_STOCK_DETAIL_PCS
	FROM 
	--(SELECT DISTINCT ID,TYPE,NAME,DESC FROM :LOCATION_ID_HIERARCHY_LIST) T0
	--LEFT JOIN 
(
		SELECT 
			T0.ID AS LOCATION_ID
			,T0.TYPE AS LOCATION_TYPE
			,T0.NAME AS LOCATION_NAME
			,T0.DESC AS LOCATION_DESC
			,T1.CATEGORY AS CATEGORY
            ,IFNULL(T1.AVAILABLE_STOCK_TEU,0) AS OVERALL_AVAILABLE_STOCK_TEU
            ,IFNULL(T1.UNAVAILABLE_STOCK_TEU,0) AS OVERALL_UNAVAILABLE_STOCK_TEU
            ,IFNULL(T1.AVAILABLE_STOCK_PCS,0) AS OVERALL_AVAILABLE_STOCK_PCS
            ,IFNULL(T1.UNAVAILABLE_STOCK_PCS,0) AS OVERALL_UNAVAILABLE_STOCK_PCS
            ,IFNULL(T1.STOCK_TEU,0) AS STOCK_TEU
            ,IFNULL(T1.STOCK_PCS,0) AS STOCK_PCS
		FROM :LOCATION_ID_HIERARCHY_LIST T0
		LEFT JOIN :T_OVERALL_STOCK T1 ON T1.LOCATION_ID = T0.ID AND T1.CATEGORY IS NOT NULL 
			) T1 
			---ON T1.LOCATION_ID = T0.ID AND T1.CATEGORY IS NOT NULL -- remove records whose category is null
	LEFT JOIN (
		SELECT DISTINCT T0.LOCATION_ID,T0.LOCATION_TYPE,T0.MIN_SAFETY,T0.MAX_SAFETY,T0.MAX_CAPACITY
		FROM "sap.tm.trp.db.stock::t_stock_config" T0
		WHERE T0.LOCATION_HEAD_FLAG = 1  and T0.RESOURCE_CATEGORY = :RESOURCE_CATEGORY
		) T2 ON T2.LOCATION_ID = T1.LOCATION_ID AND T2.LOCATION_TYPE = T1.LOCATION_TYPE
	WHERE IFNULL(T1.OVERALL_AVAILABLE_STOCK_PCS,0) <> 0 OR IFNULL(T1.OVERALL_UNAVAILABLE_STOCK_PCS,0) <> 0 OR T2.MIN_SAFETY IS NOT NULL OR T2.MAX_SAFETY IS NOT NULL OR T2.MAX_CAPACITY IS NOT NULL
	; 
	
END;