PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.equipment::p_get_stock_table_resource_location" (
    IN ATTRIBUTE_GROUP_ID BIGINT,
    IN EQUIPMENT_FILTER_ID BIGINT,
    IN LOCATION_FILTER_ID BIGINT,
    IN RESOURCE_CATEGORY VARCHAR(20),
    IN NODE_ID_LIST "sap.tm.trp.db.filter::tt_attribute_group_dynamic_item_node_list",
    IN RESOURCE_TYPE_LIST "sap.tm.trp.db.equipment::tt_get_stock_table_resource_id_list",
    IN LOCATION_ID_LIST "sap.tm.trp.db.equipment::tt_get_stock_table_location_id_list",
    --IN LOCATION_NAME_LIST CLOB,-- VARCHAR(5000)
    --IN LOCATION_TYPE INTEGER,
    OUT OUTPUT_STOCK "sap.tm.trp.db.equipment::tt_get_stock_table_resource_location_output",
    OUT OUTPUT_RESOURCE_TYPE_LIST "sap.tm.trp.db.equipment::tt_get_stock_table_resource_id_list"
) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_TRP"
    READS SQL DATA

AS
EQUIP_FLAG INT;
RESOURCE_TYPE_LIST_CNT INT;
LANGUAGE_CODE CHAR(1);
FILTER CLOB;

BEGIN

-- DECLARE CONTSTANT
DECLARE EQUIP_TYPE INTEGER := 1;
DECLARE EQUIP_TYPE_GROUP INTEGER := 2;
DECLARE LOCATION_TYPE INTEGER;

-- GET LANGUAGE CODE 
SELECT IFNULL(MAX(SPRAS),'E') INTO LANGUAGE_CODE FROM "sap.tm.trp.db.semantic.common::v_lang_code";

-- GET FILTER_TYPE & LOCATION_TYPE
IF :EQUIPMENT_FILTER_ID = -1
THEN
	EQUIP_FLAG := :EQUIP_TYPE;
	SELECT COUNT(1) INTO RESOURCE_TYPE_LIST_CNT FROM :RESOURCE_TYPE_LIST;
	IF RESOURCE_TYPE_LIST_CNT = 0 
	THEN
		RESOURCE_TYPE_LIST = 
			SELECT DISTINCT
				RESOURCE_TYPE_CODE
				,RESOURCE_TYPE_CODE AS RESOURCE_TYPE_NAME
				,:EQUIP_TYPE AS RESOURCE_TYPE
			FROM "sap.tm.trp.db.semantic.resource::v_resource_type_with_category"
			WHERE RESOURCE_CATEGORY = :RESOURCE_CATEGORY
			;
	END IF;
ELSE
	SELECT FILTER_TYPE INTO EQUIP_FLAG 
	FROM "sap.tm.trp.db.filter::t_equipment_filter"
	WHERE ID = :EQUIPMENT_FILTER_ID
;
END IF;

/*
-- Get Location Filter Type
SELECT DISTINCT TYPE INTO LOCATION_TYPE FROM :LOCATION_ID_LIST;

-- GET INPUT LOCATION LIST
IF :LOCATION_TYPE = 1 THEN 
--LOCATION

LOCATION_ID_HIERARCHY_LIST =
    SELECT DISTINCT
        T0.ID AS ID
        ,T0.NAME AS NAME
        ,T1.DESC AS DESC
        ,T0.TYPE AS TYPE
        ,T0.ID AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
              LEFT JOIN "sap.tm.trp.db.semantic.location::v_location" T1 ON T1.ID = T0.ID
              ;

ELSEIF :LOCATION_TYPE = 2 THEN 
--LOCATION GROUP

LOCATION_ID_HIERARCHY_LIST =    
    SELECT DISTINCT
        T0.ID AS ID
        ,T0.NAME AS NAME
        ,T4.DESC AS DESC
        ,T0.TYPE AS TYPE
        ,T2.LOCATION_ID AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" T2 ON T2.LOCATION_GROUP_ID = T0.ID
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group" T3 ON T3.ID = T0.ID
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group_t" T4 ON T4.ID = T3.ID AND T4.SPRAS = :LANGUAGE_CODE
              ;    
    
ELSEIF :LOCATION_TYPE = 5 THEN 
--REGION

LOCATION_ID_HIERARCHY_LIST =    
    SELECT DISTINCT
        T0.ID AS ID
        ,T0.NAME AS NAME
        ,T6.DESC AS DESC
        ,T0.TYPE AS TYPE
       ,T5.LOCATION_ID AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
    LEFT JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A ON A.ROOT_ID = T0.ID
              LEFT JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_loc_of_regions" T5 ON T5.ZONE_ID = A.ROOT_ID
              LEFT JOIN "sap.tm.trp.db.semantic.location::v_zone" T6 ON T6.ID = T0.ID
              ;  

ELSEIF :LOCATION_TYPE = 6 THEN 
--REGION GROUP

LOCATION_ID_HIERARCHY_LIST =    
    SELECT DISTINCT
        T0.ID AS ID
        ,T0.NAME AS NAME
        ,T10.DESC AS DESC
        ,T0.TYPE AS TYPE
        ,T8.LOCATION_ID AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
              LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" T7 ON T7.REGION_GROUP_ID = T0.ID
              LEFT JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" B ON B.ROOT_ID = T7.ZONE_ID 
              LEFT JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_loc_of_regions" T8 ON T8.ZONE_ID = B.ZONE_ID
              LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group" T9 ON T9.ID = T0.ID
              LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group_t" T10 ON T10.ID = T9.ID AND T10.SPRAS = :LANGUAGE_CODE
              ;  

END IF;
*/

LOCATION_ID_HIERARCHY_LIST =
    SELECT DISTINCT
        T0.ID AS ID
        ,CASE WHEN T0.TYPE = 1 THEN T1.NAME
              WHEN T0.TYPE = 2 THEN T3.CODE
              WHEN T0.TYPE = 5 THEN T6.NAME
              WHEN T0.TYPE = 6 THEN T9.CODE
        END AS NAME
        ,CASE WHEN T0.TYPE = 1 THEN T1.DESC
              WHEN T0.TYPE = 2 THEN T4.DESC
              WHEN T0.TYPE = 5 THEN T6.DESC
              WHEN T0.TYPE = 6 THEN T10.DESC
        END AS DESC
        ,T0.TYPE AS TYPE
        ,CASE WHEN T0.TYPE = 1 THEN T0.ID
              WHEN T0.TYPE = 2 THEN T2.LOCATION_ID
              WHEN T0.TYPE = 5 THEN T5.LOCATION_ID
              WHEN T0.TYPE = 6 THEN T8.LOCATION_ID
        END AS LOCATION_ID
    FROM :LOCATION_ID_LIST T0
	LEFT JOIN "sap.tm.trp.db.semantic.location::v_location" T1 ON T1.ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group_item" T2 ON T2.LOCATION_GROUP_ID = T0.ID
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group" T3 ON T3.ID = T0.ID
    LEFT JOIN "sap.tm.trp.db.systemmanagement::t_location_group_t" T4 ON T4.ID = T3.ID AND T4.SPRAS = :LANGUAGE_CODE
	LEFT JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" A ON A.ROOT_ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" T5 ON T5.ZONE_ID = A.ROOT_ID
	LEFT JOIN "sap.tm.trp.db.semantic.location::v_zone" T6 ON T6.ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" T7 ON T7.REGION_GROUP_ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement.location::t_region_item" B ON B.ROOT_ID = T7.ZONE_ID 
	LEFT JOIN "sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions" T8 ON T8.ZONE_ID = B.ZONE_ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group" T9 ON T9.ID = T0.ID
	LEFT JOIN "sap.tm.trp.db.systemmanagement::t_region_group_t" T10 ON T10.ID = T9.ID AND T10.SPRAS = :LANGUAGE_CODE
	;

-- GET INPUT RESOURCE TYPE
SELECT COUNT(1) INTO RESOURCE_TYPE_LIST_CNT FROM :RESOURCE_TYPE_LIST;
IF :RESOURCE_TYPE_LIST_CNT = 0 
THEN
    RESOURCE_TYPE_LIST=
        SELECT DISTINCT
            IFNULL(EQUI_CODE,EQUIPMENT_GROUP_ID) AS RESOURCE_TYPE_CODE,NULL AS RESOURCE_TYPE_NAME,:EQUIP_FLAG AS RESOURCE_TYPE 
        FROM "sap.tm.trp.db.filter::v_equipment_filter_equipment_auth" T1
        WHERE EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
        ;
END IF;

-- GET ALL VALID RESOURCE FILTERED BY ATTRIBUTE GROUP
IF :ATTRIBUTE_GROUP_ID = -1
THEN
	T_RESOURCE_BASE =
	    SELECT DISTINCT
            T0.RESOURCE_NAME AS EQUIPMENT_ID
            ,T1.RESOURCE_TYPE_CODE AS SIZE_TYPE
            ,T1.RESOURCE_TYPE_DESC AS SIZE_TYPE_DESC
            ,T0.TEU_COUNT
            ,T2.MOVEMENT_STATUS_CODE AS MOVEMENT_STATUS
            ,T2.CURRENT_LOCATION_ID AS CURRENT_LOCATION
            ,T0.RESOURCE_ID AS RESID
    FROM "sap.tm.trp.db.semantic.resource::v_resource_master" T0
	INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_category" TRC ON TRC.MAPPING_CODE = T0.EQUITYPE
    LEFT JOIN "sap.tm.trp.db.semantic.resource::v_resource_type" T1 
    ON (T1.RESOURCE_TYPE_CODE = T0.RESOURCE_TYPE_CODE AND T1.EQUI_TYPE = T0.EQUITYPE)
	LEFT JOIN "sap.tm.trp.db.semantic.resource::v_resource_status" T2 ON T2.RESOURCE_ID = T0.RESOURCE_ID
    INNER JOIN (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T3 ON T3.LOCATION_ID = T2.CURRENT_LOCATION_ID
    WHERE T2.MOVEMENT_STATUS_CODE = 'NIT' AND TRC.CODE = :RESOURCE_CATEGORY
    ;
ELSE

CALL "sap.tm.trp.db.equipment::p_equipment_attribute_group"(:ATTRIBUTE_GROUP_ID,:NODE_ID_LIST,:RESOURCE_CATEGORY,T_RESOURCE_BASE_1);
T_RESOURCE_BASE =
    SELECT DISTINCT
        T0.EQUIPMENT_ID
        ,T0.SIZE_TYPE
        ,T0.SIZE_TYPE_DESC
        ,T0.TEU_COUNT
        ,T0.MOVEMENT_STATUS
        ,T0.CURRENT_LOCATION
        ,T0.RESID
    FROM :T_RESOURCE_BASE_1 T0
    INNER JOIN (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T1 ON T1.LOCATION_ID = T0.CURRENT_LOCATION
    WHERE T0.MOVEMENT_STATUS = 'NIT'
    ;
END IF;

-- GET ALL EQUIP TYPE LIST & RESOURCE
IF :EQUIP_FLAG = :EQUIP_TYPE THEN
    EQUIP_TYPE_LIST =
        SELECT DISTINCT
            T1.RESOURCE_TYPE_CODE AS ID
            ,T2.RESOURCE_TYPE_CODE AS NAME
            ,T2.RESOURCE_TYPE_DESC AS DESC
        FROM :RESOURCE_TYPE_LIST T1
        INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_type_with_category" T2 
        ON T2.RESOURCE_TYPE_CODE = T1.RESOURCE_TYPE_CODE AND T2.RESOURCE_CATEGORY = :RESOURCE_CATEGORY
        ;
	T_RESOURCE = 
		SELECT DISTINCT
                T1.CURRENT_LOCATION AS LOCATION_ID
                ,T1.RESID AS RESOURCE_ID
                ,T2.RESOURCE_TYPE_CODE AS EQUIPMENT_TYPE_ID
                ,T1.TEU_COUNT
                ,:EQUIP_FLAG AS EQUIP_CODE_TYPE
                ,T1.SIZE_TYPE_DESC AS EQUIPMENT_TYPE
            FROM :T_RESOURCE_BASE T1
            INNER JOIN :RESOURCE_TYPE_LIST T2 ON T2.RESOURCE_TYPE_CODE = T1.SIZE_TYPE
            WHERE T1.MOVEMENT_STATUS = 'NIT'
            ;
    T_TOTAL_STOCK =
        SELECT 
            T0.LOC_ID
            ,T0.EQUIP_CODE AS EQUIPMENT_TYPE_ID
            ,COUNT(T1.RESOURCE_ID) AS STOCK_PCS
            ,SUM(T1.TEU_COUNT) AS STOCK_TEU
        FROM (
            SELECT T0.LOCATION_ID AS LOC_ID, T1.ID AS EQUIP_CODE
            FROM (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T0
            CROSS JOIN :EQUIP_TYPE_LIST T1
        ) T0
        LEFT JOIN (
        	SELECT DISTINCT
                T0.LOCATION_ID
                ,T0.RESOURCE_ID
                ,T1.RESOURCE_TYPE_CODE AS EQUIPMENT_TYPE_ID
                ,T0.TEU_COUNT
            FROM (
                SELECT T0.RESOURCE_ID, T1.CURRENT_LOCATION_ID AS LOCATION_ID, T0.RESOURCE_TYPE_CODE, T0.TEU_COUNT
                FROM "sap.tm.trp.db.semantic.resource::v_resource_master" T0
				INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_category" TRC ON TRC.MAPPING_CODE = T0.EQUITYPE
                LEFT JOIN "sap.tm.trp.db.semantic.resource::v_resource_status" T1 ON T1.RESOURCE_ID = T0.RESOURCE_ID
                INNER JOIN (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T2 ON T2.LOCATION_ID = T1.CURRENT_LOCATION_ID
                WHERE T1.MOVEMENT_STATUS_CODE = 'NIT' AND TRC.CODE = :RESOURCE_CATEGORY
            ) T0
        	LEFT JOIN :RESOURCE_TYPE_LIST T1 ON T1.RESOURCE_TYPE_CODE = T0.RESOURCE_TYPE_CODE                
        ) T1 ON T1.LOCATION_ID = T0.LOC_ID AND T1.EQUIPMENT_TYPE_ID = T0.EQUIP_CODE
        GROUP BY T0.LOC_ID,T0.EQUIP_CODE
        ;
ELSE
    EQUIP_TYPE_LIST = 
        SELECT DISTINCT
            T1.RESOURCE_TYPE_CODE AS ID
            ,T2.DESC AS NAME
            ,T3.DESC AS DESC
        FROM :RESOURCE_TYPE_LIST T1
        LEFT JOIN "sap.tm.trp.db.systemmanagement::t_equipment_group" T2 ON T2.ID = T1.RESOURCE_TYPE_CODE
        LEFT JOIN "sap.tm.trp.db.systemmanagement::t_equipment_group_t" T3 ON T3.ID = T1.RESOURCE_TYPE_CODE AND T3.SPRAS = :LANGUAGE_CODE
        WHERE EQUIPMENT_FILTER_ID = :EQUIPMENT_FILTER_ID
        ;
    T_RESOURCE = 
        SELECT DISTINCT
            T0.CURRENT_LOCATION AS LOCATION_ID
            ,T0.RESID AS RESOURCE_ID
            ,T1.RESOURCE_TYPE_CODE AS EQUIPMENT_TYPE_ID
            ,T0.TEU_COUNT
            ,:EQUIP_FLAG AS EQUIP_CODE_TYPE
            ,T1.DESC AS EQUIPMENT_TYPE
        FROM :T_RESOURCE_BASE T0
        LEFT JOIN (
            SELECT T1.EQUI_CODE, T2.DESC, T3.RESOURCE_TYPE_CODE, T1.RESOURCE_CATEGORY
            FROM "sap.tm.trp.db.systemmanagement::v_equipment_group_item_auth" T1
            INNER JOIN "sap.tm.trp.db.systemmanagement::t_equipment_group" T2 ON T2.ID = T1.EQUIPMENT_GROUP_ID AND T2.RESOURCE_CATEGORY = T1.RESOURCE_CATEGORY
            INNER JOIN :RESOURCE_TYPE_LIST T3 ON T3.RESOURCE_TYPE_CODE = T1.EQUIPMENT_GROUP_ID
        ) T1 ON T1.EQUI_CODE = T0.SIZE_TYPE
        WHERE T0.MOVEMENT_STATUS = 'NIT'
        ;
    T_TOTAL_STOCK =
        SELECT 
            T0.LOC_ID
            ,T0.EQUIP_CODE AS EQUIPMENT_TYPE_ID
            ,COUNT(DISTINCT T1.RESOURCE_ID) AS STOCK_PCS
            ,SUM(T1.TEU_COUNT) AS STOCK_TEU
        FROM (
            SELECT T0.LOCATION_ID AS LOC_ID, T1.ID AS EQUIP_CODE
            FROM (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T0
            CROSS JOIN :EQUIP_TYPE_LIST T1
        ) T0
        LEFT JOIN (
            SELECT DISTINCT
                    T0.LOCATION_ID
                    ,T0.RESOURCE_ID
                    ,T1.RESOURCE_TYPE_CODE AS EQUIPMENT_TYPE_ID
                    ,T0.TEU_COUNT
                    ,:EQUIP_FLAG AS EQUIP_CODE_TYPE
                FROM (
                    SELECT T0.RESOURCE_ID, T1.CURRENT_LOCATION_ID AS LOCATION_ID, T0.RESOURCE_TYPE_CODE, T0.TEU_COUNT
                    FROM "sap.tm.trp.db.semantic.resource::v_resource_master" T0
					INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_category" TRC ON TRC.MAPPING_CODE = T0.EQUITYPE
                    LEFT JOIN "sap.tm.trp.db.semantic.resource::v_resource_status" T1 ON T1.RESOURCE_ID = T0.RESOURCE_ID
                    INNER JOIN (SELECT DISTINCT LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T2 ON T2.LOCATION_ID = T1.CURRENT_LOCATION_ID
                    WHERE T1.MOVEMENT_STATUS_CODE = 'NIT' AND TRC.CODE = :RESOURCE_CATEGORY
                ) T0
            LEFT JOIN (
                    SELECT DISTINCT T1.EQUI_CODE, T3.RESOURCE_TYPE_CODE
                    FROM "sap.tm.trp.db.systemmanagement::t_equipment_group_item" T1
                    INNER JOIN :RESOURCE_TYPE_LIST T3 ON T3.RESOURCE_TYPE_CODE = T1.EQUIPMENT_GROUP_ID
                ) T1 ON T1.EQUI_CODE = T0.RESOURCE_TYPE_CODE
            ) T1 ON T1.LOCATION_ID = T0.LOC_ID AND T1.EQUIPMENT_TYPE_ID = T0.EQUIP_CODE
        GROUP BY T0.LOC_ID,T0.EQUIP_CODE
		;
END IF;

-- GET STOCK RESULT BASE ON DEPOT LOCATION & EQUIPMENT TYPE
T_STOCK_DEPOT_EQUIPMENT = 
    SELECT  
        T0.LOC_ID
        ,T0.EQUIPMENT_TYPE_ID
        ,T0.EQUIPMENT_NAME
        ,T0.EQUIPMENT_DESC
        ,T2.STOCK_PCS AS TOTAL_STOCK_PCS
        ,COUNT(T1.RESOURCE_ID) AS CURRENT_STOCK_PCS
        ,T2.STOCK_TEU AS TOTAL_STOCK_TEU
        ,SUM(T1.TEU_COUNT) AS CURRENT_STOCK_TEU
    FROM (
        SELECT T1.LOCATION_ID AS LOC_ID, T2.ID AS EQUIPMENT_TYPE_ID, T2.NAME AS EQUIPMENT_NAME, T2.DESC AS EQUIPMENT_DESC
        FROM (SELECT DISTINCT IFNULL(LOCATION_ID,ID) AS LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T1    -- USE ID AS LOCATION_ID IN CASE THERE IS NO DEPOT(CHILD) UNDER THIS LOCATION(PARENT)
        CROSS JOIN :EQUIP_TYPE_LIST T2
        ) T0
    LEFT JOIN :T_TOTAL_STOCK T2 ON T2.LOC_ID = T0.LOC_ID AND T2.EQUIPMENT_TYPE_ID = T0.EQUIPMENT_TYPE_ID
    LEFT JOIN :T_RESOURCE T1 ON T1.LOCATION_ID = T0.LOC_ID AND T1.EQUIPMENT_TYPE_ID = T0.EQUIPMENT_TYPE_ID
    GROUP BY T0.LOC_ID,T0.EQUIPMENT_TYPE_ID, T0.EQUIPMENT_NAME, T0.EQUIPMENT_DESC,T2.STOCK_PCS,T2.STOCK_TEU
    ;
    
T_OVERALL_STOCK =
	SELECT
		T2.ID AS LOCATION_ID
		,SUM(T0.TEU_COUNT) AS OVERALL_STOCK_TEU
		,COUNT(1) AS OVERALL_STOCK_PCS
	FROM "sap.tm.trp.db.semantic.resource::v_resource_master" T0
	INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_category" TRC ON TRC.MAPPING_CODE = T0.EQUITYPE
	INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_status" T1 ON T1.RESOURCE_ID = T0.RESOURCE_ID
	INNER JOIN (SELECT DISTINCT ID, LOCATION_ID FROM :LOCATION_ID_HIERARCHY_LIST) T2 ON T2.LOCATION_ID = T1.CURRENT_LOCATION_ID
	WHERE T1.MOVEMENT_STATUS_CODE = 'NIT' AND TRC.CODE = :RESOURCE_CATEGORY
	GROUP BY T2.ID
	;
-- GET STOCK WITH EQUIPMENT TYPE FOR INPUT LOCATION (CHILD RESULT)
T_STOCK_EQUIP = 
    SELECT 
        T1.LOCATION_ID
        ,T1.LOCATION_NAME
        ,T1.LOCATION_DESC
        ,T1.LOCATION_TYPE
        ,T1.EQUIP_TYPE_ID
        ,T1.EQUIP_TYPE_NAME
        ,T1.EQUIP_TYPE_DESC
        ,T1.TOTAL_STOCK_PCS
        ,T1.STOCK_PCS
        ,T1.TOTAL_STOCK_TEU
        ,T1.STOCK_TEU
        ,ROUND(CASE WHEN T1.TOTAL_STOCK_PCS > T2.MAX_SAFETY THEN (T1.TOTAL_STOCK_PCS - T2.MAX_SAFETY)/(T2.MAX_SAFETY + 0.00001) -- INCASE THAT MAX/MIN SAFETY STOCK IS 0
                    WHEN T1.TOTAL_STOCK_PCS < T2.MIN_SAFETY THEN (T1.TOTAL_STOCK_PCS - T2.MIN_SAFETY)/(T2.MIN_SAFETY + 0.00001)
                    ELSE NULL
               END, 4) AS STORAGE_STATUS
        ,CASE WHEN T1.TOTAL_STOCK_PCS > T2.MAX_SAFETY THEN (T1.TOTAL_STOCK_PCS - T2.MAX_SAFETY)
        	  WHEN T1.TOTAL_STOCK_PCS < T2.MIN_SAFETY THEN (T1.TOTAL_STOCK_PCS - T2.MIN_SAFETY)
        	  ELSE NULL
        END AS OUT_OF_RANGE_QUANTITY
        ,T2.MIN_SAFETY AS MIN_SAFETY_STOCK
        ,T2.MAX_SAFETY AS MAX_SAFETY_STOCK
        ,T2.MAX_CAPACITY AS MAX_CAPACITY
    FROM (
        SELECT 
            T0.ID AS LOCATION_ID
            ,T0.TYPE AS LOCATION_TYPE
            ,T0.NAME AS LOCATION_NAME
            ,T0.DESC AS LOCATION_DESC
            ,T1.EQUIPMENT_TYPE_ID AS EQUIP_TYPE_ID
            ,T1.EQUIPMENT_NAME AS EQUIP_TYPE_NAME
            ,T1.EQUIPMENT_DESC AS EQUIP_TYPE_DESC
            ,SUM(IFNULL(T1.CURRENT_STOCK_PCS,0)) AS STOCK_PCS
            ,SUM(IFNULL(T1.TOTAL_STOCK_PCS,0)) AS TOTAL_STOCK_PCS
            ,SUM(IFNULL(T1.CURRENT_STOCK_TEU,0)) AS STOCK_TEU
            ,SUM(IFNULL(T1.TOTAL_STOCK_TEU,0)) AS TOTAL_STOCK_TEU
        FROM :LOCATION_ID_HIERARCHY_LIST T0
        LEFT JOIN :T_STOCK_DEPOT_EQUIPMENT T1 ON T1.LOC_ID = IFNULL(T0.LOCATION_ID,T0.ID)   -- USE ID AS LOCATION_ID IN CASE THERE IS NO DEPOT(CHILD) UNDER THIS LOCATION(PARENT)
        GROUP BY T0.ID,T0.TYPE,T0.NAME,T0.DESC,T1.EQUIPMENT_TYPE_ID,T1.EQUIPMENT_NAME,T1.EQUIPMENT_DESC
            ) T1
    LEFT JOIN (
        SELECT DISTINCT T0.LOCATION_ID,T0.LOCATION_TYPE,T0.EQUIP_CODE,T0.EQUIP_CODE_TYPE,T0.MIN_SAFETY,T0.MAX_SAFETY,T0.MAX_CAPACITY
        FROM "sap.tm.trp.db.stock::t_stock_config" T0
        WHERE T0.LOCATION_HEAD_FLAG = 0 AND T0.RESOURCE_CATEGORY = :RESOURCE_CATEGORY
        ) T2 
        ON T2.LOCATION_ID = T1.LOCATION_ID AND T2.LOCATION_TYPE = T1.LOCATION_TYPE
        AND T2.EQUIP_CODE = T1.EQUIP_TYPE_ID
    ;

-- GET STOCK FOR INPUT LOCATION
-- The UOM of the stocksettiong for location differs between railcar(PCs)/container(TEU), so the caclulation logic is different for STORAGE_STATUS/OUT_OF_RANGE_QUANTITY
T_STOCK =
    SELECT
        T1.EQUIPMENT_TYPE_ID AS EQUIP_TYPE_ID
        ,T1.EQUIPMENT_NAME AS EQUIP_TYPE_NAME
        ,:EQUIP_FLAG AS EQUIP_TYPE
        ,T1.EQUIPMENT_DESC AS EQUIP_TYPE_DESC
        ,SUM(T1.TOTAL_STOCK_PCS) AS TOTAL_STOCK_PCS
        ,SUM(T1.CURRENT_STOCK_PCS) AS STOCK_PCS
        ,SUM(T1.TOTAL_STOCK_TEU) AS TOTAL_STOCK_TEU
        ,SUM(T1.CURRENT_STOCK_TEU) AS STOCK_TEU
    FROM :T_STOCK_DEPOT_EQUIPMENT T1
    GROUP BY T1.EQUIPMENT_TYPE_ID,T1.EQUIPMENT_NAME,T1.EQUIPMENT_DESC
;

-- GET OUTPUT
OUTPUT_STOCK =
    SELECT
        T1.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE
        ,T1.EQUIP_TYPE_NAME AS RESOURCE_TYPE_NAME
        ,T1.EQUIP_TYPE_DESC AS RESOURCE_TYPE_DESC
        ,T1.EQUIP_TYPE AS RESOURCE_TYPE
        ,T1.TOTAL_STOCK_PCS AS RES_TOTAL_STOCK_PCS
        ,T1.STOCK_PCS AS RES_SELECTED_STOCK_PCS
        ,T1.TOTAL_STOCK_TEU AS RES_TOTAL_STOCK_TEU
        ,T1.STOCK_TEU AS RES_SELECTED_STOCK_TEU
        ,T2.LOCATION_ID AS GEO_ID
        ,T2.LOCATION_NAME AS GEO_NAME
        ,T2.LOCATION_DESC AS GEO_DESC
        ,T2.LOCATION_TYPE AS GEO_TYPE
        ,T2.TOTAL_STOCK_PCS AS TOTAL_STOCK_PCS
        ,T2.STOCK_PCS AS SELECTED_STOCK_PCS
        ,T2.TOTAL_STOCK_TEU AS TOTAL_STOCK_TEU
        ,T2.STOCK_TEU AS SELECTED_STOCK_TEU
        ,IFNULL(T3.OVERALL_STOCK_TEU,0) AS OVERALL_STOCK_TEU
        ,IFNULL(T3.OVERALL_STOCK_PCS,0) AS OVERALL_STOCK_PCS
        ,T2.STORAGE_STATUS AS STORAGE_STATUS_VALUE
        ,T2.OUT_OF_RANGE_QUANTITY AS OUT_OF_RANGE_QUANTITY
        ,T2.MIN_SAFETY_STOCK AS MIN_SAFETY_STOCK
        ,T2.MAX_SAFETY_STOCK AS MAX_SAFETY_STOCK
        ,T2.MAX_CAPACITY AS MAX_PHYSICAL_STOCK
    /*FROM :T_STOCK T1
    INNER JOIN :T_STOCK_EQUIP T2 ON T2.EQUIP_TYPE_ID = T1.EQUIP_TYPE_ID
		AND (T2.MIN_SAFETY_STOCK IS NOT NULL OR T2.MAX_SAFETY_STOCK IS NOT NULL OR T2.MAX_CAPACITY IS NOT NULL OR T2.TOTAL_STOCK_PCS <> 0 OR T2.STOCK_PCS <> 0)
    LEFT JOIN :T_OVERALL_STOCK T3 ON T3.LOCATION_ID = T2.LOCATION_ID
    ;*/
    --Refactored code start
    FROM :T_STOCK T1
    INNER JOIN :T_STOCK_EQUIP T2 ON T2.EQUIP_TYPE_ID = T1.EQUIP_TYPE_ID
    LEFT JOIN :T_OVERALL_STOCK T3 ON T3.LOCATION_ID = T2.LOCATION_ID
    WHERE  (T2.MIN_SAFETY_STOCK IS NOT NULL OR T2.MAX_SAFETY_STOCK IS NOT NULL OR T2.MAX_CAPACITY IS NOT NULL OR T2.TOTAL_STOCK_PCS <> 0 OR T2.STOCK_PCS <> 0)
    ;
    --Refactored code end
OUTPUT_RESOURCE_TYPE_LIST =
    SELECT DISTINCT RESOURCE_TYPE_CODE,RESOURCE_TYPE_NAME,RESOURCE_TYPE FROM :OUTPUT_STOCK
;

END;