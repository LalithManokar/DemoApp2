PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_locationinfo_by_filtergroupid" ( 
	IN  In_Filter_Group_ID BIGINT, 	
	OUT ET_LOCATION "sap.tm.trp.db.supplydemand.instant::tt_sd_parameter_location"
	) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA SAP_TM_TRP
	READS SQL DATA AS
BEGIN
	DECLARE filter_type INTEGER;
  	 DECLARE LOCATION_TYPE INTEGER := 1;
	 DECLARE LOCATION_GROUP_TYPE INTEGER := 2;
	 --DECLARE ZONE_TYPE  INTEGER :=3;
	 --DECLARE ZONE_GROUP_TYPE  INTEGER :=4 ;
	 DECLARE REGION_TYPE INTEGER :=5;
	 DECLARE REGION_GROUP_TYPE INTEGER :=6;
     DECLARE loc_filter_id BIGINT;
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM DUMMY;

     -- there are 3 levels for the ids:GEO_GROUP_ID, GEO_ID and LOCATION_ID
     -- and only 1 name is needed GEO_NAME, the name is a bit ambiguous here as it's not always corresponding to the GEO_ID
     -- it returns different object name based on the location filter type 
     -- Location Filter --> Location name
     -- Location Group Filter --> Location Group name
     -- Region filter --> Region name
     -- Region Group filter --> Region Group name
     filter_type := 0 ;
     
     SELECT IFNULL(MAX(t2.LOCATION_TYPE),0), IFNULL(MAX(t2.ID),0) INTO filter_type, loc_filter_id 
     FROM "sap.tm.trp.db.filter::t_filter_location_filter" t1
     INNER JOIN "sap.tm.trp.db.filter::t_location_filter" t2 ON (t1.LOCATION_FILTER_ID = t2.ID)
     WHERE t1.FILTER_GROUP_ID = :In_Filter_Group_ID;  
     
     -- Location filter
     IF :filter_type = :LOCATION_TYPE THEN 
     ET_LOCATION = SELECT DISTINCT LOCATION_ID AS GEO_ID, LOCATION_ID, 1 AS GEO_FILTER_TYPE, LOCATION_ID AS GEO_GROUP_ID, b.NAME AS GEO_NAME 
               FROM "sap.tm.trp.db.filter::t_location_filter_location" a
               INNER JOIN "sap.tm.trp.db.semantic.location::v_location" b ON (a.LOCATION_ID = b.ID)
               WHERE LOCATION_FILTER_ID = :loc_filter_id;
                
     -- Location group filter           
     ELSEIF :filter_type = :LOCATION_GROUP_TYPE THEN           
     ET_LOCATION = SELECT DISTINCT  c.LOCATION_ID AS GEO_ID, c.LOCATION_ID, :filter_type AS GEO_FILTER_TYPE, b.LOCATION_GROUP_ID AS GEO_GROUP_ID,
                       d.DESC AS GEO_NAME
               FROM "sap.tm.trp.db.filter::t_location_filter_location" b 
               INNER JOIN  "sap.tm.trp.db.systemmanagement::t_location_group_item" c ON (b.LOCATION_GROUP_ID = c.LOCATION_GROUP_ID) 
               INNER JOIN "sap.tm.trp.db.systemmanagement::t_location_group" d ON (c.LOCATION_GROUP_ID = d.ID)
               WHERE b.LOCATION_FILTER_ID = :loc_filter_id;
                 
      -- there may be regions without any location, the UI show supply and demand values for these regions with 0
      -- so use left outer join with v_region_location_all  
       -- region filter(currently, there is no concept of region, that's always zone. But some region related views still can be used to 
       -- avoid mass code changes)      
       ELSEIF :filter_type = :REGION_TYPE THEN
       ET_LOCATION = SELECT DISTINCT b.ZONE_ID AS GEO_ID, c.LOCATION_ID, :filter_type AS GEO_FILTER_TYPE, b.ZONE_ID AS GEO_GROUP_ID, d.NAME AS GEO_NAME
                 FROM "sap.tm.trp.db.filter::t_location_filter_region" b
                 LEFT OUTER JOIN  "sap.tm.trp.db.systemmanagement.location::v_region_location_all" c ON (b.ZONE_ID = c.ROOT_ID)
                 LEFT OUTER JOIN "sap.tm.trp.db.semantic.location::v_zone" d ON (b.ZONE_ID = d.ID)                 
                 WHERE b.LOCATION_FILTER_ID = :loc_filter_id;
                  
       -- region group filter           
       ELSEIF :filter_type = :REGION_GROUP_TYPE THEN            
       ET_LOCATION =  SELECT DISTINCT c.ZONE_ID AS GEO_ID, d.LOCATION_ID, :filter_type AS GEO_FILTER_TYPE, b.REGION_GROUP_ID AS GEO_GROUP_ID, e.DESC AS GEO_NAME
                  FROM "sap.tm.trp.db.filter::t_location_filter_region" b             
                  INNER JOIN "sap.tm.trp.db.systemmanagement::t_region_group_item" c ON  (b.REGION_GROUP_ID = c.REGION_GROUP_ID)
                  LEFT OUTER JOIN "sap.tm.trp.db.systemmanagement.location::v_region_location_all" d ON (c.ZONE_ID = d.ROOT_ID)
                  LEFT OUTER JOIN "sap.tm.trp.db.systemmanagement::t_region_group" e ON (b.REGION_GROUP_ID = e.ID)
                  WHERE  b.LOCATION_FILTER_ID = :loc_filter_id;
                  
        END IF;   
END;
