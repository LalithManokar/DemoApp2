PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_schedule_plan_update" (
    IN PLAN_MODEL_ID BIGINT,
    IN NAME VARCHAR(200),
    IN EQUIPMENT_FILTER_ID BIGINT,
    IN TIME_FILTER_ID BIGINT,
    IN LOCATION_FILTER_ID BIGINT,
    IN PIPELINE_MODEL_ID BIGINT,
    IN PLAN_MODEL_TYPE INTEGER,
    IN DESC VARCHAR(500),
    IN VISIBILITY INT,
    IN ALERT_RULE_GROUP_ID BIGINT,
    IN ATTRIBUTE_GROUP_ID BIGINT,
    IN KEEP_EXECUTION_RUNS BIGINT,
    IN USAGE NVARCHAR(1),
    IN USAGE_CODE NVARCHAR(4),
    IN START_TIME TIMESTAMP,
    IN EXPIRY_TIME TIMESTAMP,
    IN RECURRENCE_TYPE VARCHAR(50),
    IN RECURRENCE_INTERVAL INTEGER,
    IN RECURRENCE_DAY INTEGER,
    IN TIMEZONE VARCHAR(40),
    IN SCHEDULE_TYPE VARCHAR(5),
    OUT MESSAGE VARCHAR(50)
) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA SAP_TM_TRP
    --READS SQL DATA 
AS
    FILTER_GROUP_ID BIGINT;
    USER_ID BIGINT;
    CODE VARCHAR(50);
    OLD_CAL_MODEL BIGINT; 
BEGIN
DECLARE STATUS_SUSPEND INTEGER := 1;
DECLARE I_COUNT INTEGER;
DECLARE ASSIGNED_TO_VIRTUAL INTEGER := 0;
DECLARE V_DIFF INTEGER := 0;
DECLARE OLD_USAGE VARCHAR(1);
DECLARE OLD_USAGE_CODE VARCHAR(4);
DECLARE V_START_DATE VARCHAR(10);
DECLARE V_EXPIRE_DATE VARCHAR(10);
DECLARE V_RECURRENCE_TYPE VARCHAR(50);
DECLARE V_RECURRENCE_INTERVAL INTEGER;
DECLARE V_RECURRENCE_DAY INTEGER;
DECLARE V_TIMEZONES VARCHAR(40);
DECLARE NEW_START_DATE VARCHAR(10);
DECLARE NEW_EXPIRE_DATE VARCHAR(10);

-- GET PLAN FILTR_GROUP_ID
SELECT IFNULL(FILTER_GROUP_ID,0), IFNULL(PIPELINE_MODEL_ID,0),
       USAGE, USAGE_CODE
INTO FILTER_GROUP_ID, OLD_CAL_MODEL,OLD_USAGE,OLD_USAGE_CODE
FROM "sap.tm.trp.db.pipeline::t_plan_model"
WHERE ID = :PLAN_MODEL_ID
;

  --Check if the plan has been assigned to virtual plan
   SELECT COUNT(1) INTO ASSIGNED_TO_VIRTUAL 
   FROM  "sap.tm.trp.db.pipeline::t_virtual_plan_persisted_plan" B
   WHERE PERSISTED_PLAN_MODEL_ID = :PLAN_MODEL_ID;
   
   IF ASSIGNED_TO_VIRTUAL >0 THEN
   
---if the plan has been assigned to virtual plan, then below fields are not allowed to change 
--Location filter, resource filter, calcualtion model, USAGE,USAGE_CODE
--time zone, RECURRENCE_TYPE,RECURRENCE_INTERVAL,RECURRENCE_DAY
	    SELECT COUNT(1) INTO V_DIFF -- time filter
	    FROM "sap.tm.trp.db.filter::t_filter_group"
	     WHERE ID = :FILTER_GROUP_ID AND TIME_FILTER_ID <> :TIME_FILTER_ID;
	    IF :V_DIFF > 0 THEN
	      MESSAGE := 'MSG_TIME_FILTER_CHANGE_ERROR';
	      RETURN;
	    END IF;
	    
	    SELECT COUNT(1) INTO V_DIFF --location filter
	    FROM "sap.tm.trp.db.filter::t_filter_location_filter"
	    WHERE FILTER_GROUP_ID = :FILTER_GROUP_ID AND LOCATION_FILTER_ID <> :LOCATION_FILTER_ID;
	    IF :V_DIFF > 0 THEN
	      MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_LOCATION_FILTER';
	      RETURN;
	    END IF;
	    
	    SELECT COUNT(1) INTO V_DIFF --resource filter
	    FROM "sap.tm.trp.db.filter::t_filter_equipment_filter"
	    WHERE FILTER_GROUP_ID = :FILTER_GROUP_ID AND  EQUIPMENT_FILTER_ID <> :EQUIPMENT_FILTER_ID;
	    IF :V_DIFF > 0 THEN
	   	  MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_RESOURCE_FILTER';
	      RETURN;
	    END IF;
   
       IF :OLD_CAL_MODEL <> :PIPELINE_MODEL_ID THEN --calculation model
       	  MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_CALCULATION_MODEL';
	      RETURN;
       END IF;
        
       IF :OLD_USAGE <> :USAGE THEN --Disable Intermediate Node
       	  MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_DISABLE_INTER_NODE';
	      RETURN;
       END IF;
       
       IF :OLD_USAGE_CODE <> :USAGE_CODE THEN --Plan usage
          MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_PLAN_USAGE';
	      RETURN;
       END IF;
       
       --Getting schedule details
       SELECT  RECURRENCE_TYPE,RECURRENCE_INTERVAL,RECURRENCE_DAY,TIMEZONES
       INTO V_RECURRENCE_TYPE, V_RECURRENCE_INTERVAL,V_RECURRENCE_DAY,V_TIMEZONES
       FROM "sap.tm.trp.db.job::t_model_schedule_detail"
       WHERE MODEL_ID = :PLAN_MODEL_ID AND SCHEDULE_TYPE = :SCHEDULE_TYPE;
       /*remove validation of start/end date for subplans from patch 11 hotfix, patch 12 and TRP 3.1
       SELECT TO_VARCHAR(:START_TIME,'YYYY-MM-DD') , TO_VARCHAR(:EXPIRY_TIME,'YYYY-MM-DD') 
       INTO NEW_START_DATE, NEW_EXPIRE_DATE
       FROM DUMMY WHERE 1 = 1;
       
       IF :V_START_DATE <> :NEW_START_DATE THEN
          MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_START_SCHEDUL_DATE';
	      RETURN;
       END IF;
       
       IF :V_EXPIRE_DATE <> :NEW_EXPIRE_DATE THEN
          MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_END_SCHEDUL_DATE';
	      RETURN;
       END IF;*/
       IF :V_TIMEZONES <> TIMEZONE THEN
          MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_TIMEZONE';
         RETURN;
       END IF;
       
       IF :V_RECURRENCE_TYPE <> :RECURRENCE_TYPE THEN
          MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_RECURRENCE';
          RETURN;
       END IF;
       
       IF :V_RECURRENCE_INTERVAL <> :RECURRENCE_INTERVAL THEN
          MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_RECURRENCE_INTERVAL';
          RETURN;
       END IF;
       
       IF :V_RECURRENCE_DAY <> :RECURRENCE_DAY THEN
         MESSAGE := 'ASSIGNED_TO_VPLAN_CANT_CHANGE_RECURRENCE_DAY';
         RETURN;
       END IF;
   END IF;
   

-- GET CURRENT USER_ID
SELECT IFNULL(MAX(ID),0) INTO USER_ID
FROM "sap.tm.trp.db.systemmanagement.user::t_user"
WHERE USERNAME = (SELECT USERNAME FROM "sap.tm.trp.db.systemmanagement.user::cv_get_username");

-- UPDATE FILTER GROUP
CALL "sap.tm.trp.db.filter::p_ext_filter_group_update"(:FILTER_GROUP_ID, :EQUIPMENT_FILTER_ID, :TIME_FILTER_ID, :LOCATION_FILTER_ID)
;

-- ALERT RULE GROUP ASSIGN
DELETE FROM "sap.tm.trp.db.alert.alert_rule_group::t_alert_rule_group_assign_plan_model"
WHERE PLAN_MODEL_ID = :PLAN_MODEL_ID;

INSERT INTO "sap.tm.trp.db.alert.alert_rule_group::t_alert_rule_group_assign_plan_model"(PLAN_MODEL_ID, ALERT_RULE_GROUP_ID)
VALUES(:PLAN_MODEL_ID, :ALERT_RULE_GROUP_ID);

-- UPDATE PLAN DATA
UPDATE "sap.tm.trp.db.pipeline::t_plan_model"
SET NAME = :NAME,
	FILTER_GROUP_ID = :FILTER_GROUP_ID,
    PIPELINE_MODEL_ID = :PIPELINE_MODEL_ID,
    LAST_MODIFIED_BY = :USER_ID,
    LAST_MODIFIED_ON = CURRENT_UTCTIMESTAMP,
    PLAN_MODEL_TYPE_ID = :PLAN_MODEL_TYPE,
    DESC = :DESC,
    VISIBILITY_FLAG = :VISIBILITY,
    ALERT_RULE_GROUP_ID = :ALERT_RULE_GROUP_ID,
    ATTRIBUTE_GROUP_ID = CASE WHEN :ATTRIBUTE_GROUP_ID > 0 THEN :ATTRIBUTE_GROUP_ID ELSE NULL END,
    USAGE = :USAGE,
    USAGE_CODE = :USAGE_CODE,
    STATUS = STATUS_SUSPEND,
    KEEP_EXECUTION_RUNS=:KEEP_EXECUTION_RUNS
WHERE ID = :PLAN_MODEL_ID;

-- Track the calculation model change time
IF :PIPELINE_MODEL_ID != :OLD_CAL_MODEL THEN
   UPDATE "sap.tm.trp.db.pipeline::t_plan_model" SET CALMODEL_MODIFIED_ON = CURRENT_UTCTIMESTAMP 
   WHERE ID = :PLAN_MODEL_ID;  
END IF;

-- SET USED PLAN STATUS TO NEED_CHECK (1)
/*SELECT IFNULL(MAX(CODE),'') INTO CODE FROM "sap.tm.trp.db.pipeline::t_plan_model" WHERE ID = :PLAN_MODEL_ID;
CALL "sap.tm.trp.db.pipeline::p_set_plan_status_need_check"(:CODE,'PLAN');
*/
UPDATE "sap.tm.trp.db.pipeline::t_plan_model"
SET STATUS = :STATUS_SUSPEND
WHERE ID = :PLAN_MODEL_ID;

--Check if the plan been used by a virtual plan, if yes, need to set the virtual plan's status to 1(PLAN CHANGED.)
UPDATE T1
SET T1.STATUS = :STATUS_SUSPEND
FROM "sap.tm.trp.db.pipeline::t_plan_model" T1
INNER JOIN 
(
SELECT DISTINCT T1.VIRTUAL_PLAN_MODEL_ID
FROM "sap.tm.trp.db.pipeline::t_virtual_plan_persisted_plan" T1
WHERE T1.PERSISTED_PLAN_MODEL_ID = :PLAN_MODEL_ID
) T2 ON (T1.ID = T2.VIRTUAL_PLAN_MODEL_ID);
 

MESSAGE :='MSG_SUCCESS_STATUS';

END;
