PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_alert_on_map_for_template_plan_of_the_resource"(
    IN IN_EXECUTION_ID BIGINT,
    IN IN_NODE_ID BIGINT,
    IN IN_START_TIME TIMESTAMP,
    IN IN_POLYGON CLOB,
    IN IN_RESOURCE_TYPE_ID NVARCHAR(20), 
    OUT out_alert_on_map "sap.tm.trp.db.pipeline::tt_alert_on_map",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT,
    OUT GIS_TYPE VARCHAR(10),
    OUT OUT_PLAN_STATUS SMALLINT,
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
)


    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
    AS
BEGIN

        DECLARE LOCATION_FILTER_TYPE INTEGER;
	    DECLARE ID_COUNT INTEGER;
	    DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER :=2000;
	    DECLARE VAR_LOCATION_NUM INTEGER :=0 ;
	    TOO_MUCH_LOCATION_FLAG :=0;  
	    GIS_TYPE := '';
	    OUT_PLAN_STATUS := -1;--this output do not need any more according to the new requirements(show history table view ), keep it just in order to keep the interface not changed.Will remove it later. 
	
	     -- Becuase for supply&demand node, there might be two output_key, while the alert for the supply key and demand key is the same, so need to do the distinct
	  LOCATION_ALERT_INFO =  SELECT DISTINCT 
         LOCATION_ID, LOCATION_NAME,LOCATION_FILTER_TYPE,
         EQUIP_TYPE_ID,EQUIP_TYPE_NAME,
	      SEQUENCE,
	      ALERT_NUM,
	      ALERT_SCORE,
	      START_TIME,END_TIME
	   FROM "sap.tm.trp.db.pipeline::cv_get_execution_result_by_executionid_base_on_map_of_the_resource"(
       placeholder."$$IN_EXECUTION_ID$$"=>:IN_EXECUTION_ID,placeholder."$$IN_NODE_ID$$"=>:IN_NODE_ID,placeholder."$$IN_START_TIME$$"=>:IN_START_TIME,placeholder."$$IN_RESOURCE_TYPE_ID$$"=>:IN_RESOURCE_TYPE_ID);
      
    
          SQL0 = SELECT TOP 1 LOCATION_FILTER_TYPE FROM :LOCATION_ALERT_INFO ;
	      
	     SELECT COUNT(1) INTO ID_COUNT
	     FROM :SQL0;
	      
	     IF(ID_COUNT !=0 ) THEN
              SELECT LOCATION_FILTER_TYPE INTO LOCATION_FILTER_TYPE
              FROM :SQL0;
                      
	      ELSE
	         LOCATION_FILTER_TYPE := 0;
	         out_alert_on_map = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,
                  NULL AS BOUNDARY,NULL AS ALERT_NUM,NULL AS ALERT_SCORE,NULL AS POINT_TYPE
	              FROM DUMMY;
	          TOO_MUCH_LOCATION_FLAG := 0;
	         RETURN;
	      END IF;

     
     AGG_LOCATION_ALERT_INFO = SELECT T1.LOCATION_ID,T1.LOCATION_NAME,
     --SUM(T1.ALERT_NUM) AS ALERT_NUM,MAX(T1.ALERT_SCORE) AS ALERT_SCORE
     T1.ALERT_NUM,T1.ALERT_SCORE
     FROM :LOCATION_ALERT_INFO T1;
     --GROUP BY T1.LOCATION_ID,T1.LOCATION_NAME;

     IN_LOCATION_IDS_SQL = SELECT DISTINCT LOCATION_ID AS ID FROM :AGG_LOCATION_ALERT_INFO;
     
     CALL "sap.tm.trp.db.pipeline::p_get_xpos_or_polygon_info_for_location"(:IN_LOCATION_IDS_SQL,:LOCATION_FILTER_TYPE,:IN_POLYGON,OUT_GEO_POLYGON_INFO_SQL,GIS_TYPE,OUT_LOCATIONS_XPOS_YPOS_INVALID);
     
     	SELECT COUNT(1) AS LOCATION_NUM INTO VAR_LOCATION_NUM
	FROM :OUT_GEO_POLYGON_INFO_SQL;
	
	IF VAR_LOCATION_NUM > :MAX_LOCATION_NUM_ON_MAP THEN
	    out_alert_on_map = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,
                  NULL AS BOUNDARY,NULL AS ALERT_NUM,NULL AS ALERT_SCORE,NULL AS POINT_TYPE
	              FROM DUMMY;
	    TOO_MUCH_LOCATION_FLAG := 1;
	    RETURN;
	END IF;
	
	out_alert_on_map = SELECT T1.LOCATION_ID,T1.LOCATION_NAME,T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE
	,T2.BOUNDARY,T1.ALERT_NUM,T1.ALERT_SCORE,T2.POINT_TYPE
	FROM :AGG_LOCATION_ALERT_INFO T1
	INNER JOIN :OUT_GEO_POLYGON_INFO_SQL T2 ON (T1.LOCATION_ID = T2.LOCATION_ID);
   
   
END;