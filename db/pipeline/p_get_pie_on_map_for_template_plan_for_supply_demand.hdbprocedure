PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_pie_on_map_for_template_plan_for_supply_demand"(
	IN PLAN_ID BIGINT,
	IN TIMEZONE NVARCHAR(50),
    IN PLAN_EXECUTION_ID BIGINT,
    IN IN_NODE_ID BIGINT,
    IN SEQUENCE BIGINT,
    IN IN_POLYGON CLOB,
    OUT out_pie_on_map "sap.tm.trp.db.pipeline::tt_pie_on_map_for_supply_demand",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT,
    OUT GIS_TYPE VARCHAR(10),
    OUT OUT_PLAN_STATUS SMALLINT,
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
    AS
BEGIN
 

        
        
        DECLARE LOCATION_FILTER_TYPE INTEGER;
	    DECLARE ID_COUNT INTEGER;
	    DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER :=2000;
	    DECLARE VAR_LOCATION_NUM INTEGER :=0 ;
	    DECLARE  ADDREGAT_METHOD_KEY VARCHAR(30) := 'AGGREGATIONMETHOD';
 		DECLARE  ADDREGAT_METHOD_SUM_VALUE VARCHAR(30) := 'SUM';
 		DECLARE  ADDREGAT_METHOD_MEAN_VALUE VARCHAR(30) := 'MEAN';
 		
	    TOO_MUCH_LOCATION_FLAG :=0;
	    GIS_TYPE := '';
	     OUT_PLAN_STATUS := -1;--this output do not need any more according to the new requirements(show history table view ), keep it just in order to keep the interface not changed.Will remove it later. 
	
	   CALL "sap.tm.trp.db.supplydemand::p_get_supply_demand_result_by_plan"(:PLAN_ID, :PLAN_EXECUTION_ID, :TIMEZONE, SD_RESULT);
	   SD_RESULT = SELECT * FROM :SD_RESULT WHERE SEQUENCE = :SEQUENCE;
	   SQL0 = SELECT TOP 1 LOCATION_FILTER_TYPE FROM :SD_RESULT;
	   
	   SELECT COUNT(1) INTO ID_COUNT
	     FROM :SQL0;
	      
	     IF(ID_COUNT !=0 ) THEN
              SELECT LOCATION_FILTER_TYPE INTO LOCATION_FILTER_TYPE
              FROM :SQL0;
	      ELSE
	         LOCATION_FILTER_TYPE := 0;
	         out_alert_on_map = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,
                  NULL AS BOUNDARY,NULL AS OUTPUT_KEY,NULL AS OUTPUT_VALUE,NULL AS PARENT_OUTPUT_KEY,NULL AS POINT_TYPE
	              FROM DUMMY;
	          TOO_MUCH_LOCATION_FLAG := 0;
	         RETURN;
	      END IF;
    
	      --NOTE: Move the filter scriteria to the tables to improve the performance:
	      SQL1 = SELECT T1.NODE_ID,T1.LOCATION_ID,T1.LOCATION_NAME, T1.EQUIP_TYPE_ID,
        T23.METADATA_NODE_ID AS OUTPUT_KEY,TO_DOUBLE(T1.OUTPUT_VALUE) AS OUTPUT_VALUE, T1.OUTPUT_KEY AS PARENT_OUTPUT_KEY--,
       -- T3. ALERT_NUM,T3.ALERT_SCORE
     FROM :SD_RESULT T1
     INNER JOIN (SELECT * FROM "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" WHERE NODE_ID = :IN_NODE_ID ) T22 ON (T1.NODE_ID = T22.PARENT_NODE_ID AND T1.OUTPUT_KEY = T22.OUTPUT_KEY)
     INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T23 ON (T1.NODE_ID = T23.ID);    
    
      
      AGG_LOCATION_PIE_INFO = SELECT T1.LOCATION_ID, T1.LOCATION_NAME,
	   T1.OUTPUT_KEY,CASE WHEN UCASE(T12.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN AVG(T1.OUTPUT_VALUE) 
	         ELSE SUM(T1.OUTPUT_VALUE)  END AS OUTPUT_VALUE,T1.PARENT_OUTPUT_KEY--,
      --SUM(T1.ALERT_NUM) AS ALERT_NUM,SUM(T1.ALERT_SCORE) AS ALERT_SCORE
     FROM :SQL1 T1
     LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T12 ON (T1.NODE_ID = T12.NODE_ID AND UCASE(T12.KEY) = :ADDREGAT_METHOD_KEY)
     GROUP BY T1.LOCATION_ID, T1.LOCATION_NAME,T1.OUTPUT_KEY,T12.VALUE,T1.PARENT_OUTPUT_KEY;
     
      IN_LOCATION_IDS_SQL = SELECT DISTINCT LOCATION_ID AS ID FROM :AGG_LOCATION_PIE_INFO;
     
     CALL "sap.tm.trp.db.pipeline::p_get_xpos_or_polygon_info_for_location"(:IN_LOCATION_IDS_SQL,:LOCATION_FILTER_TYPE,:IN_POLYGON,OUT_GEO_POLYGON_INFO_SQL,GIS_TYPE,OUT_LOCATIONS_XPOS_YPOS_INVALID);
     
     SELECT COUNT(1) AS LOCATION_NUM INTO VAR_LOCATION_NUM
	FROM :OUT_GEO_POLYGON_INFO_SQL;
	
	IF VAR_LOCATION_NUM > :MAX_LOCATION_NUM_ON_MAP THEN
	    out_pie_on_map = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS LATITUDE,NULL AS LONGITUDE,
                  NULL AS BOUNDARY,NULL AS OUTPUT_KEY,NULL AS OUTPUT_VALUE,NULL AS PARENT_OUTPUT_KEY,NULL AS POINT_TYPE
	              FROM DUMMY;
	    TOO_MUCH_LOCATION_FLAG := 1;
	    RETURN;
	END IF;
	
	out_pie_on_map = SELECT T1.LOCATION_ID,T1.LOCATION_NAME,T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE
	,T2.BOUNDARY,T1.OUTPUT_KEY,T1.OUTPUT_VALUE,T1.PARENT_OUTPUT_KEY,T2.POINT_TYPE
	FROM :AGG_LOCATION_PIE_INFO T1
	INNER JOIN :OUT_GEO_POLYGON_INFO_SQL T2 ON (T1.LOCATION_ID = T2.LOCATION_ID);
	
     
  
   
END;