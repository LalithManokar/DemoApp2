--zxt 2016/06/23 created
PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_virtual_kpi_plan_chart_by_resource" (
	IN PLAN_MODEL_ID BIGINT,
	IN METADATA_NODE_ID VARCHAR(32),
	IN LOCATION_ID_LIST "sap.tm.trp.db.pipeline::tt_get_virtual_kpi_plan_chart_location_id_list",
	IN IN_PP_EXECUTION_ID BIGINT,
	OUT RESOURCE_AGG_OUTPUT "sap.tm.trp.db.pipeline::tt_get_virtual_kpi_plan_chart_by_resource_output",
	OUT RESOURCE_OUTPUT "sap.tm.trp.db.pipeline::tt_get_virtual_kpi_plan_chart_resource_output",
	OUT PLAN_STATUS INTEGER
)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	DEFAULT SCHEMA SAP_TM_TRP
	--READS SQL DATA
AS
BEGIN



DECLARE STATUS_VALID SMALLINT := 0;
DECLARE STATUS_SUSPEND SMALLINT := 1;
DECLARE STATUS_INVALID SMALLINT := 2;
DECLARE AGGREGATIONMETHOD_SUM VARCHAR(10) := 'SUM'; -- SUM
DECLARE AGGREGATIONMETHOD_MEAN VARCHAR(10) := 'MEAN'; -- MEAN
DECLARE AGGREGATIONMETHOD_STR VARCHAR(20) := 'AGGREGATIONMETHOD';

-- CHECK WHETHER THE PLAN IS VALID
SELECT IFNULL(MAX(STATUS),:STATUS_SUSPEND) INTO PLAN_STATUS FROM "sap.tm.trp.db.pipeline::t_plan_model" WHERE ID = :PLAN_MODEL_ID;

 IF PLAN_STATUS = :STATUS_INVALID THEN
	RETURN;
 ELSEIF PLAN_STATUS = :STATUS_SUSPEND THEN
     CALL "sap.tm.trp.db.pipeline::p_virtual_plan_valid_check" (:PLAN_MODEL_ID,PLAN_STATUS);
     IF :PLAN_STATUS = :STATUS_INVALID THEN
       RETURN;
     END IF;
 END IF;


	    CALL "sap.tm.trp.db.pipeline::p_get_aggregate_execution_result_for_virtual_plan"(:PLAN_MODEL_ID,:IN_PP_EXECUTION_ID,:LOCATION_ID_LIST,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);

		-- GET AGGREGATIONMETHOD
		 SQL_AGGREGATE_METHOD_FOR_EACH_METADATA_NODE_ID =
		 SELECT T3.METADATA_NODE_ID,IFNULL(UCASE(T4.VALUE),:AGGREGATIONMETHOD_SUM) AS AGGREGATIONMETHOD
		 FROM
		 (
			 SELECT T2.METADATA_NODE_ID, MAX(T2.ID) AS NODE_ID
			 FROM :PLAN_RESULT T1
			 INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T2 ON T1.METADATA_NODE_ID = T2.METADATA_NODE_ID
			 GROUP BY T2.METADATA_NODE_ID
		 )T3
		LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T4 ON T3.NODE_ID = T4.NODE_ID AND UCASE(T4.KEY) = :AGGREGATIONMETHOD_STR
		;

		RESOURCE_OUTPUT =
			SELECT
				T0.LOCATION_ID AS GEO_ID
				,T0.LOCATION_NAME AS GEO_NAME
				,T0.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE
				,T0.EQUIP_NAME AS RESOURCE_TYPE_NAME
				,T0.SEQUENCE
				,T0.START_TIME
				,T0.END_TIME
				,T0.OUTPUT_KEY
				,T0.OUTPUT_VALUE
				,T0.ALERT_NUM AS ALERT
				,:METADATA_NODE_ID AS OUTPUT_NODE_NAME
			FROM :PLAN_RESULT T0
			WHERE T0.METADATA_NODE_ID = :METADATA_NODE_ID
			;

		RESOURCE_AGG_OUTPUT =
			SELECT
				T0.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE
				,T0.EQUIP_NAME AS RESOURCE_TYPE_NAME
				,T0.SEQUENCE
				,T0.START_TIME
				,T0.END_TIME
				,T0.OUTPUT_KEY
				,CASE WHEN T2.AGGREGATIONMETHOD = :AGGREGATIONMETHOD_SUM THEN SUM(T0.OUTPUT_VALUE)
					  WHEN T2.AGGREGATIONMETHOD = :AGGREGATIONMETHOD_MEAN THEN AVG(T0.OUTPUT_VALUE)
					  ELSE SUM(T0.OUTPUT_VALUE)
				 END AS OUTPUT_VALUE
				,SUM(T0.ALERT_NUM) AS ALERT
				,:METADATA_NODE_ID AS OUTPUT_NODE_NAME
			FROM :PLAN_RESULT T0
			LEFT JOIN :SQL_AGGREGATE_METHOD_FOR_EACH_METADATA_NODE_ID T2 ON T2.METADATA_NODE_ID = T0.METADATA_NODE_ID
			WHERE T0.METADATA_NODE_ID = :METADATA_NODE_ID
			GROUP BY T0.EQUIP_TYPE_ID,T0.EQUIP_NAME,T0.SEQUENCE,T0.START_TIME,T0.END_TIME,T0.OUTPUT_KEY,T2.AGGREGATIONMETHOD
			;

END;
