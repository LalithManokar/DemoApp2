PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_virtual_kpi_plan_table_result_drilldown_details" (
	IN PLAN_MODEL_ID BIGINT,
	IN METADATA_NODE_ID VARCHAR(32),
	IN RESOURCE_ID VARCHAR(32),
	IN START_TIME TIMESTAMP,
	IN LOCATION_ID_LIST "sap.tm.trp.db.pipeline::tt_get_virtual_kpi_plan_table_result_drilldown_details_location_id_list",
	IN OUTPUT_KEY_LIST "sap.tm.trp.db.pipeline::tt_get_virtual_kpi_plan_table_result_drilldown_details_output_key_list",
	IN IN_PP_EXECUTION_ID BIGINT,
	OUT OUTPUT "sap.tm.trp.db.pipeline::tt_get_virtual_kpi_plan_table_result_drilldown_details_output",
	OUT PLAN_STATUS INTEGER
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA SAP_TM_TRP
	--READS SQL DATA 
AS
	IN_OUTPUT_KEY_CNT INTEGER;
BEGIN
 


DECLARE STATUS_VALID SMALLINT := 0;
DECLARE STATUS_SUSPEND SMALLINT := 1;
DECLARE STATUS_INVALID SMALLINT := 2;
DECLARE  NON_EXISTS_EQUIP_ID VARCHAR(30) := '';
DECLARE  NON_OUTPUT_KEY INTEGER := 0;

-- CHECK WHETHER THE PLAN IS VALID
SELECT IFNULL(MAX(STATUS),:STATUS_SUSPEND) INTO PLAN_STATUS FROM "sap.tm.trp.db.pipeline::t_plan_model" WHERE ID = :PLAN_MODEL_ID;

IF PLAN_STATUS = :STATUS_INVALID THEN
	RETURN;
 ELSEIF PLAN_STATUS = :STATUS_SUSPEND THEN
     CALL "sap.tm.trp.db.pipeline::p_virtual_plan_valid_check" (:PLAN_MODEL_ID,PLAN_STATUS);
     IF :PLAN_STATUS = :STATUS_INVALID THEN
       RETURN;
     END IF;
 END IF;
 
 SELECT COUNT(*) INTO IN_OUTPUT_KEY_CNT FROM :OUTPUT_KEY_LIST;
		-- GENERATE PARENT NODE LIST
		PARENT_NODE_LIST =
		SELECT
			T0.OUTPUT_KEY,
			T2.NAME AS PARENT_NODE_NAME
		FROM :OUTPUT_KEY_LIST T0
		INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T1 ON T1.OUTPUT_KEY = T0.OUTPUT_KEY
		INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T2 ON T2.ID = T1.PARENT_NODE_ID
		;
		
		-- GET VIRTUAL PLAN RESULT
		CALL "sap.tm.trp.db.pipeline::p_get_aggregate_execution_result_for_virtual_plan"(:PLAN_MODEL_ID,:IN_PP_EXECUTION_ID,:LOCATION_ID_LIST,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);
		
		IF :RESOURCE_ID = :NON_EXISTS_EQUIP_ID THEN
			IF :IN_OUTPUT_KEY_CNT = :NON_OUTPUT_KEY THEN
			OUTPUT =
				SELECT
					T1.LOCATION_ID AS LOCATION_ID
					,T1.OUT_NODE_NAME AS OUTPUT_KEY
					,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
					,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
			        FROM :PLAN_RESULT T1
			        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
			        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
			        AND T1.START_TIME = :START_TIME
			        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
			        ;
			ELSE
			OUTPUT =
				SELECT
					T1.LOCATION_ID AS LOCATION_ID
					,T1.OUT_NODE_NAME AS OUTPUT_KEY
					,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
					,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
			        FROM :PLAN_RESULT T1
			        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
			        INNER JOIN :PARENT_NODE_LIST T3 ON T3.OUTPUT_KEY = T1.OUTPUT_KEY
			        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
			        AND T1.START_TIME = :START_TIME
			        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
			        ;
			
			END IF;
		ELSE
			IF :IN_OUTPUT_KEY_CNT = :NON_OUTPUT_KEY THEN
			OUTPUT =
				SELECT
					T1.LOCATION_ID AS LOCATION_ID
					,T1.OUT_NODE_NAME AS OUTPUT_KEY
					,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
					,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
			        FROM :PLAN_RESULT T1
			        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
			        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
			        AND T1.START_TIME = :START_TIME
			        AND T1.EQUIP_TYPE_ID = :RESOURCE_ID
			        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
			        ;
			ELSE
			OUTPUT =
				SELECT
					T1.LOCATION_ID AS LOCATION_ID
					,T1.OUT_NODE_NAME AS OUTPUT_KEY
					,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
					,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
			        FROM :PLAN_RESULT T1
			        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
			        INNER JOIN :PARENT_NODE_LIST T3 ON T3.OUTPUT_KEY = T1.OUTPUT_KEY
			        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
			        AND T1.START_TIME = :START_TIME
			        AND T1.EQUIP_TYPE_ID = :RESOURCE_ID
			        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
			        ;
			END IF;
		END IF;

	
 
 /*
IF :PLAN_STATUS = :STATUS_SUSPEND
THEN
	CALL "sap.tm.trp.db.pipeline::p_virtual_plan_valid_check"(:PLAN_MODEL_ID,PLAN_STATUS);
	IF :PLAN_STATUS = :STATUS_INVALID
	THEN
		OUTPUT =
			SELECT
				NULL AS LOCATION_ID
				,NULL AS OUTPUT_KEY
				,NULL AS DRILLDOWN_OUTPUT_KEY
				,NULL AS OUTPUT_VALUE
		        FROM DUMMY
		        WHERE 1 = 2
		        ;
	ELSEIF :PLAN_STATUS = :STATUS_VALID
	THEN
		SELECT COUNT(*) INTO IN_OUTPUT_KEY_CNT FROM :OUTPUT_KEY_LIST;
		-- GENERATE PARENT NODE LIST
		PARENT_NODE_LIST =
		SELECT
			T0.OUTPUT_KEY,
			T2.NAME AS PARENT_NODE_NAME
		FROM :OUTPUT_KEY_LIST T0
		INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T1 ON T1.OUTPUT_KEY = T0.OUTPUT_KEY
		INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T2 ON T2.ID = T1.PARENT_NODE_ID
		;
		
		-- GET VIRTUAL PLAN RESULT
		--CALL "sap.tm.trp.db.pipeline::p_get_execution_result_by_virtual_plan_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,PLAN_RESULT,NO_DATA_PLAN_LIST);
		CALL "sap.tm.trp.db.pipeline::p_get_execution_result_for_virtual_plan_of_execution_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);
		
		IF :RESOURCE_ID = :NON_EXISTS_EQUIP_ID THEN
			IF :IN_OUTPUT_KEY_CNT = :NON_OUTPUT_KEY THEN
			OUTPUT =
				SELECT
					T1.LOCATION_ID AS LOCATION_ID
					,T1.OUT_NODE_NAME AS OUTPUT_KEY
					,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
					,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
			        FROM :PLAN_RESULT T1
			        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
			        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
			        AND T1.START_TIME = :START_TIME
			        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
			        ;
			ELSE
			OUTPUT =
				SELECT
					T1.LOCATION_ID AS LOCATION_ID
					,T1.OUT_NODE_NAME AS OUTPUT_KEY
					,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
					,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
			        FROM :PLAN_RESULT T1
			        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
			        INNER JOIN :PARENT_NODE_LIST T3 ON T3.OUTPUT_KEY = T1.OUTPUT_KEY
			        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
			        AND T1.START_TIME = :START_TIME
			        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
			        ;
			
			END IF;
		ELSE
			IF :IN_OUTPUT_KEY_CNT = :NON_OUTPUT_KEY THEN
			OUTPUT =
				SELECT
					T1.LOCATION_ID AS LOCATION_ID
					,T1.OUT_NODE_NAME AS OUTPUT_KEY
					,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
					,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
			        FROM :PLAN_RESULT T1
			        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
			        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
			        AND T1.START_TIME = :START_TIME
			        AND T1.EQUIP_TYPE_ID = :RESOURCE_ID
			        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
			        ;
			ELSE
			OUTPUT =
				SELECT
					T1.LOCATION_ID AS LOCATION_ID
					,T1.OUT_NODE_NAME AS OUTPUT_KEY
					,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
					,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
			        FROM :PLAN_RESULT T1
			        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
			        INNER JOIN :PARENT_NODE_LIST T3 ON T3.OUTPUT_KEY = T1.OUTPUT_KEY
			        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
			        AND T1.START_TIME = :START_TIME
			        AND T1.EQUIP_TYPE_ID = :RESOURCE_ID
			        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
			        ;
			END IF;
		END IF;
	END IF;
ELSEIF :PLAN_STATUS = :STATUS_INVALID
THEN
	OUTPUT =
		SELECT
			NULL AS LOCATION_ID
			,NULL AS OUTPUT_KEY
			,NULL AS DRILLDOWN_OUTPUT_KEY
			,NULL AS OUTPUT_VALUE
	        FROM DUMMY
	        WHERE 1 = 2
	        ;
ELSE
	SELECT COUNT(*) INTO IN_OUTPUT_KEY_CNT FROM :OUTPUT_KEY_LIST;
	-- GENERATE PARENT NODE LIST
	PARENT_NODE_LIST =
	SELECT
		T0.OUTPUT_KEY,
		T2.NAME AS PARENT_NODE_NAME
	FROM :OUTPUT_KEY_LIST T0
	INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy" T1 ON T1.OUTPUT_KEY = T0.OUTPUT_KEY
	INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T2 ON T2.ID = T1.PARENT_NODE_ID
	;
	-- GET VIRTUAL PLAN RESULT
	--CALL "sap.tm.trp.db.pipeline::p_get_execution_result_by_virtual_plan_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,PLAN_RESULT,NO_DATA_PLAN_LIST);
	CALL "sap.tm.trp.db.pipeline::p_get_execution_result_for_virtual_plan_of_execution_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);
	
	IF :RESOURCE_ID = :NON_EXISTS_EQUIP_ID THEN
		IF :IN_OUTPUT_KEY_CNT = :NON_OUTPUT_KEY THEN
		OUTPUT =
			SELECT
				T1.LOCATION_ID AS LOCATION_ID
				,T1.OUT_NODE_NAME AS OUTPUT_KEY
				,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
				,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
		        FROM :PLAN_RESULT T1
		        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
		        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
		        AND T1.START_TIME = :START_TIME
		        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
		        ;
		ELSE
		OUTPUT =
			SELECT
				T1.LOCATION_ID AS LOCATION_ID
				,T1.OUT_NODE_NAME AS OUTPUT_KEY
				,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
				,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
		        FROM :PLAN_RESULT T1
		        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
		        INNER JOIN :PARENT_NODE_LIST T3 ON T3.OUTPUT_KEY = T1.OUTPUT_KEY
		        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
		        AND T1.START_TIME = :START_TIME
		        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
		        ;
		END IF;
	ELSE
		IF :IN_OUTPUT_KEY_CNT = :NON_OUTPUT_KEY THEN
		OUTPUT =
			SELECT
				T1.LOCATION_ID AS LOCATION_ID
				,T1.OUT_NODE_NAME AS OUTPUT_KEY
				,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
				,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
		        FROM :PLAN_RESULT T1
		        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
		        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
		        AND T1.START_TIME = :START_TIME
		        AND T1.EQUIP_TYPE_ID = :RESOURCE_ID
		        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
		        ;
		ELSE
		OUTPUT =
			SELECT
				T1.LOCATION_ID AS LOCATION_ID
				,T1.OUT_NODE_NAME AS OUTPUT_KEY
				,T1.OUTPUT_KEY AS DRILLDOWN_OUTPUT_KEY
				,SUM(TO_DOUBLE(T1.OUTPUT_VALUE)) AS OUTPUT_VALUE
		        FROM :PLAN_RESULT T1
		        INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID
		        INNER JOIN :PARENT_NODE_LIST T3 ON T3.OUTPUT_KEY = T1.OUTPUT_KEY
		        WHERE T1.METADATA_NODE_ID = :METADATA_NODE_ID
		        AND T1.START_TIME = :START_TIME
		        AND T1.EQUIP_TYPE_ID = :RESOURCE_ID
		        GROUP BY  T1.LOCATION_ID,T1.OUT_NODE_NAME,T1.OUTPUT_KEY
		        ;
		END IF;
	END IF;
END IF;
*/
END;
