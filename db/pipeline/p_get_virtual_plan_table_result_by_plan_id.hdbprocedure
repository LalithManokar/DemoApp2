PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_virtual_plan_table_result_by_plan_id" (
	IN PLAN_MODEL_ID BIGINT,
	IN METADATA_NODE_ID VARCHAR(32),
	IN LOCATION_ID_LIST CLOB,
	IN IN_PP_EXECUTION_ID BIGINT,
	OUT OUTPUT "sap.tm.trp.db.pipeline::tt_get_virtual_plan_table_result_by_plan_id_output",
	OUT NO_DATA_PLAN_LIST "sap.tm.trp.db.pipeline::tt_get_virtual_plan_table_result_no_data_plan_list",
	OUT PLAN_STATUS INTEGER
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
	--DEFAULT SCHEMA <default_schema_name>
	--READS SQL DATA 
AS
BEGIN
 


DECLARE STATUS_VALID SMALLINT := 0;
DECLARE STATUS_SUSPEND SMALLINT := 1;
DECLARE STATUS_INVALID SMALLINT := 2;
DECLARE LOCATION_ID_LIST_P TABLE(
    "ID" VARCHAR(22)
    );
  
  CALL "sap.tm.trp.db.dashboard::sp_splitter_clob" (:LOCATION_ID_LIST,',',LOCATION_ID_LIST_STRING);
  LOCATION_ID_LIST_P = SELECT string as ID FROM :LOCATION_ID_LIST_STRING;

-- CHECK WHETHER THE PLAN IS VALID
SELECT IFNULL(MAX(STATUS),:STATUS_SUSPEND) INTO PLAN_STATUS FROM "sap.tm.trp.db.pipeline::t_plan_model" WHERE ID = :PLAN_MODEL_ID;

 IF PLAN_STATUS = :STATUS_INVALID THEN
	RETURN;
 ELSEIF PLAN_STATUS = :STATUS_SUSPEND THEN
     CALL "sap.tm.trp.db.pipeline::p_virtual_plan_valid_check" (:PLAN_MODEL_ID,PLAN_STATUS);
     IF :PLAN_STATUS = :STATUS_INVALID THEN
       RETURN;
     END IF;
 END IF;
 
 
		--CALL "sap.tm.trp.db.pipeline::p_get_execution_result_for_virtual_plan_of_execution_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);
		 CALL "sap.tm.trp.db.pipeline::p_get_aggregate_execution_result_for_virtual_plan"(:PLAN_MODEL_ID,:IN_PP_EXECUTION_ID,:LOCATION_ID_LIST_P,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);
		 
		OUTPUT =
		SELECT
			T0.LOCATION_ID AS GEO_ID
			,T0.LOCATION_NAME AS GEO_NAME
			,T0.SEQUENCE
			,T0.START_TIME
			,T0.END_TIME
			,T0.OUTPUT_KEY
			,SUM(T0.OUTPUT_VALUE) AS OUTPUT_VALUE
			,SUM(T0.ALERT_NUM) AS ALERT_STATUS
			,T0.OUT_NODE_NAME
			,T0.HAS_DRILLDOWN_FLAG
			,T0.TIME_INTERVAL
		FROM :PLAN_RESULT T0
		--INNER JOIN "sap.tm.trp.db.pipeline::t_virtual_tree_location_info" T1 ON T1.LOCATION_ID = T0.LOCATION_ID AND T1.VIRTUAL_PLAN_MODEL_ID = :PLAN_MODEL_ID
		WHERE T0.METADATA_NODE_ID = :METADATA_NODE_ID
		GROUP BY T0.LOCATION_ID,T0.LOCATION_NAME,T0.START_TIME,T0.END_TIME,T0.SEQUENCE,T0.OUTPUT_KEY,T0.OUT_NODE_NAME,T0.HAS_DRILLDOWN_FLAG,T0.TIME_INTERVAL
		;
 
 /*
IF :PLAN_STATUS = :STATUS_SUSPEND
THEN
	CALL "sap.tm.trp.db.pipeline::p_virtual_plan_valid_check"(:PLAN_MODEL_ID,PLAN_STATUS);
	IF :PLAN_STATUS = :STATUS_INVALID
	THEN
		OUTPUT =
			SELECT
				NULL AS GEO_ID
				,NULL AS GEO_NAME
				,NULL AS SEQUENCE
				,NULL AS START_TIME
				,NULL AS END_TIME
				,NULL AS OUTPUT_KEY
				,NULL AS OUTPUT_VALUE
				,NULL AS ALERT_STATUS
				,NULL AS OUT_NODE_NAME
				,NULL AS HAS_DRILLDOWN_FLAG
				,NULL AS TIME_INTERVAL
			FROM DUMMY
			WHERE 1 = 2
			;
		NO_DATA_PLAN_LIST =
			SELECT NULL AS PLAN_MODEL_ID FROM DUMMY
			WHERE 1 = 2
			;
	ELSEIF :PLAN_STATUS = :STATUS_VALID
	THEN
		-- GET VIRTUAL PLAN RESULT
		--CALL "sap.tm.trp.db.pipeline::p_get_execution_result_by_virtual_plan_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,PLAN_RESULT,NO_DATA_PLAN_LIST);
		CALL "sap.tm.trp.db.pipeline::p_get_execution_result_for_virtual_plan_of_execution_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);
		
		OUTPUT =
		SELECT
			T0.LOCATION_ID AS GEO_ID
			,T1.LOCATION_NAME AS GEO_NAME
			,T0.SEQUENCE
			,T0.START_TIME
			,T0.END_TIME
			,T0.OUTPUT_KEY
			,SUM(T0.OUTPUT_VALUE) AS OUTPUT_VALUE
			,SUM(T0.ALERT_NUM) AS ALERT_STATUS
			,T0.OUT_NODE_NAME
			,T0.HAS_DRILLDOWN_FLAG
			,T0.TIME_INTERVAL
		FROM :PLAN_RESULT T0
		INNER JOIN "sap.tm.trp.db.pipeline::t_virtual_tree_location_info" T1 ON T1.LOCATION_ID = T0.LOCATION_ID AND T1.VIRTUAL_PLAN_MODEL_ID = :PLAN_MODEL_ID
		WHERE T0.METADATA_NODE_ID = :METADATA_NODE_ID
		GROUP BY T0.LOCATION_ID,T1.LOCATION_NAME,T0.START_TIME,T0.END_TIME,T0.SEQUENCE,T0.OUTPUT_KEY,T0.OUT_NODE_NAME,T0.HAS_DRILLDOWN_FLAG,T0.TIME_INTERVAL
		;
	END IF;
ELSEIF :PLAN_STATUS = :STATUS_INVALID
THEN
	OUTPUT =
		SELECT
			NULL AS GEO_ID
			,NULL AS GEO_NAME
			,NULL AS SEQUENCE
			,NULL AS START_TIME
			,NULL AS END_TIME
			,NULL AS OUTPUT_KEY
			,NULL AS OUTPUT_VALUE
			,NULL AS ALERT_STATUS
			,NULL AS OUT_NODE_NAME
			,NULL AS HAS_DRILLDOWN_FLAG
			,NULL AS TIME_INTERVAL
		FROM DUMMY
		WHERE 1 = 2
		;
	NO_DATA_PLAN_LIST =
		SELECT NULL AS PLAN_MODEL_ID FROM DUMMY
		WHERE 1 = 2
		;
ELSE
	-- GET VIRTUAL PLAN RESULT
	--CALL "sap.tm.trp.db.pipeline::p_get_execution_result_by_virtual_plan_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,PLAN_RESULT,NO_DATA_PLAN_LIST);
	CALL "sap.tm.trp.db.pipeline::p_get_execution_result_for_virtual_plan_of_execution_id_new"(:PLAN_MODEL_ID,:LOCATION_ID_LIST,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);
	
	OUTPUT =
	SELECT
		T0.LOCATION_ID AS GEO_ID
		,T1.LOCATION_NAME AS GEO_NAME
		,T0.SEQUENCE
		,T0.START_TIME
		,T0.END_TIME
		,T0.OUTPUT_KEY
		,SUM(T0.OUTPUT_VALUE) AS OUTPUT_VALUE
		,SUM(T0.ALERT_NUM) AS ALERT_STATUS
		,T0.OUT_NODE_NAME
		,T0.HAS_DRILLDOWN_FLAG
		,T0.TIME_INTERVAL
	FROM :PLAN_RESULT T0
	INNER JOIN "sap.tm.trp.db.pipeline::t_virtual_tree_location_info" T1 ON T1.LOCATION_ID = T0.LOCATION_ID AND T1.VIRTUAL_PLAN_MODEL_ID = :PLAN_MODEL_ID
	WHERE T0.METADATA_NODE_ID = :METADATA_NODE_ID
	GROUP BY T0.LOCATION_ID,T1.LOCATION_NAME,T0.START_TIME,T0.END_TIME,T0.SEQUENCE,T0.OUTPUT_KEY,T0.OUT_NODE_NAME,T0.HAS_DRILLDOWN_FLAG,T0.TIME_INTERVAL
	;
END IF;
*/
END;