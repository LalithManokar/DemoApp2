PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_execution_result_by_executionid_base_on_map_for_bubble" (
	IN PLAN_ID BIGINT,
	IN TIMEZONE NVARCHAR(50),
    IN PLAN_EXECUTION_ID BIGINT,
    IN IN_NODE_ID BIGINT,
    IN SEQUENCE BIGINT,
    IN IN_RESOURCE_TYPE_ID NVARCHAR(20),
    OUT OUTPUT "sap.tm.trp.db.pipeline::tt_bubble_on_map_for_execution"
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
    AS
BEGIN

DECLARE NODE_ID BIGINT;
	  DECLARE NON_EXISTS_NODE_ID BIGINT := '-1';
	  DECLARE VAR_TIME_FILTER_ID BIGINT := 0 ;
	 
	  --get the node id of the execution
	  IF :IN_NODE_ID = :NON_EXISTS_NODE_ID THEN
	  CALL "sap.tm.trp.db.pipeline::p_get_default_node_by_executionid" (:PLAN_EXECUTION_ID, NODE_ID);
	  ELSE 
	  NODE_ID := :IN_NODE_ID;
	  END IF;
	  
	   --get time_filter_id:
      SELECT IFNULL(MAX(T2.TIME_FILTER_ID),0) INTO VAR_TIME_FILTER_ID
      FROM "sap.tm.trp.db.pipeline::t_execution_context" T1 
      INNER JOIN "sap.tm.trp.db.filter::t_filter_group" T2 ON (T1.VALUE = T2.ID)
      WHERE KEY = 'FILTER_GROUP_ID' AND EXECUTION_ID = :PLAN_EXECUTION_ID;   
      
      CALL "sap.tm.trp.db.supplydemand::p_get_supply_demand_result_by_plan"(:PLAN_ID, :PLAN_EXECUTION_ID, :TIMEZONE, SD_RESULT);
	   

IF IN_RESOURCE_TYPE_ID = 'N/A' THEN
	DATASET = SELECT A.LOCATION_ID,A.LOCATION_NAME,A.LOCATION_FILTER_TYPE,
				  A.OUTPUT_KEY,CASE WHEN UCASE(C.VALUE) = 'MEAN' THEN AVG(TO_DOUBLE(A.OUTPUT_VALUE)) 
		         ELSE SUM(TO_DOUBLE(A.OUTPUT_VALUE))  END AS OUTPUT_VALUE
	              FROM :SD_RESULT A
	              LEFT OUTER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" C ON (C.NODE_ID = :IN_NODE_ID AND UCASE(C.KEY) = 'AGGREGATIONMETHOD')
	              WHERE A.NODE_ID = :NODE_ID
                        AND A.SEQUENCE = :SEQUENCE
	               GROUP BY A.LOCATION_ID,A.LOCATION_NAME,A.LOCATION_FILTER_TYPE,A.OUTPUT_KEY,C.VALUE;
ELSE
	DATASET = SELECT A.LOCATION_ID,A.LOCATION_NAME,A.LOCATION_FILTER_TYPE,
	               A.OUTPUT_KEY,A.OUTPUT_VALUE
	               FROM :SD_RESULT A
	               WHERE A.NODE_ID = :NODE_ID
                        AND A.SEQUENCE = :SEQUENCE
	                AND A.EQUIP_TYPE_ID = :IN_RESOURCE_TYPE_ID;
END IF;

 OUTPUT = SELECT T1.LOCATION_ID,T1.LOCATION_NAME,T1.LOCATION_FILTER_TYPE,
        T1.OUTPUT_KEY, T1.OUTPUT_VALUE,
         T2.ALERT_NUM,
         T2.ALERT_AGGREGATED_SCORE AS ALERT_SCORE,
         T2.MESSAGE,
         T2.SURPLUS_DEFICIT_NUM,T2.THRESHOLD,T2.SURPLUS_DEFICIT_PERCENT         
      FROM :DATASET T1
               LEFT OUTER JOIN 
              ( 
                SELECT *
                FROM "sap.tm.trp.db.hrf.planBubble::t_SD_KPI_cus_BubbleRule_output" 
                WHERE PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID  
                      AND NODE_ID = :NODE_ID
                      AND SEQUENCE = :SEQUENCE
					  AND EQUIP_TYPE_ID = :IN_RESOURCE_TYPE_ID
              ) T2 ON T2.LOCATION_ID = T1.LOCATION_ID;
              
IF PLAN_EXECUTION_ID = -1 THEN
	SUPPLY_DEMAND_VALUE = SELECT LOCATION_ID, SUM(SUPPLY) AS SUPPLY, SUM(DEMAND) AS DEMAND FROM (
		SELECT LOCATION_ID, OUTPUT_VALUE AS SUPPLY, 0 AS DEMAND FROM :OUTPUT WHERE OUTPUT_KEY = 'SUPPLY'
			UNION
		SELECT LOCATION_ID, 0 AS SUPPLY, OUTPUT_VALUE AS DEMAND FROM :OUTPUT WHERE OUTPUT_KEY = 'DEMAND'
	) GROUP BY LOCATION_ID;
	OUTPUT = SELECT 
	T1.LOCATION_ID,T1.LOCATION_NAME,T1.LOCATION_FILTER_TYPE,T1.OUTPUT_KEY,T1.OUTPUT_VALUE,
	T1.ALERT_NUM, T1.ALERT_SCORE,
	CASE 
		WHEN T2.SUPPLY - T2.DEMAND = 0 THEN NULL 
		WHEN T2.SUPPLY - T2.DEMAND > 0 THEN 'Surplus' 
		WHEN T2.SUPPLY - T2.DEMAND < 0 THEN 'Deficit' 
		END AS MESSAGE,
	T1.SURPLUS_DEFICIT_NUM,T1.THRESHOLD,T1.SURPLUS_DEFICIT_PERCENT 
	FROM :OUTPUT T1
	LEFT JOIN :SUPPLY_DEMAND_VALUE T2 ON T1.LOCATION_ID = T2.LOCATION_ID;
	-- Deficit
END IF;
              
END;