<?xml version="1.0" encoding="UTF-8"?>
<Calculation:scenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Calculation="http://www.sap.com/ndb/BiModelCalculation.ecore" schemaVersion="2.3" id="cv_pipeline_node" applyPrivilegeType="ANALYTIC_PRIVILEGE" checkAnalyticPrivileges="true" defaultClient="$$client$$" defaultLanguage="$$language$$" hierarchiesSQLEnabled="false" translationRelevant="true" visibility="internal" calculationScenarioType="SCRIPT_BASED" dataCategory="DEFAULT" enforceSqlExecution="false" executionSemantic="UNDEFINED" scriptParametersCaseSensitive="true">
  <descriptions defaultDescription="cv_pipeline_node"/>
  <localVariables>
    <variable id="PLAN_EXECUTION_ID" parameter="true">
      <descriptions defaultDescription="PLAN_EXECUTION_ID"/>
      <variableProperties datatype="INTEGER" mandatory="true" defaultValue="undefined">
        <valueDomain type="empty"/>
        <selection multiLine="false" type="SingleValue"/>
      </variableProperties>
    </variable>
    <variable id="PLAN_MODEL_ID" parameter="true">
      <descriptions defaultDescription="PLAN_MODEL_ID"/>
      <variableProperties datatype="BIGINT" mandatory="true" defaultValue="undefined">
        <valueDomain type="empty"/>
        <selection multiLine="false" type="SingleValue"/>
      </variableProperties>
    </variable>
  </localVariables>
  <variableMappings/>
  <informationModelLayout relativeWidthScenario="27"/>
  <dataSources/>
  <calculationViews>
    <calculationView xsi:type="Calculation:SqlScriptView" id="Script_View">
      <descriptions/>
      <viewAttributes>
        <viewAttribute datatype="INTEGER" id="ID"/>
        <viewAttribute datatype="INTEGER" id="RESULT_VISIBLE"/>
        <viewAttribute datatype="INTEGER" id="PIPELINE_MODEL_ID"/>
        <viewAttribute datatype="INTEGER" id="NODE_INDEX"/>
        <viewAttribute datatype="VARCHAR" id="NAME" length="100"/>
        <viewAttribute datatype="VARCHAR" id="METADATA_NODE_ID" length="100"/>
        <viewAttribute datatype="INTEGER" id="PLAN_EXECUTION_ID"/>
        <viewAttribute datatype="INTEGER" id="HAS_DRILLDOWN_FLAG"/>
      </viewAttributes>
      <calculatedViewAttributes/>
      <localVariable>#PLAN_EXECUTION_ID</localVariable>
      <localVariable>#PLAN_MODEL_ID</localVariable>
      <definition>

 BEGIN

     DECLARE V_USAGE VARCHAR(1);
     DECLARE METADATA_NODE_ID VARCHAR(20) DEFAULT 'SUPPLY_DEMAND';
     DECLARE V_CAL_MODEL_ID INTEGER;
     DECLARE V_SD_PLAN_ID INTEGER;
     DECLARE V_SD_LF_ID BIGINT;
     DECLARE V_SD_EF_ID BIGINT;
     DECLARE V_EXECUTION_ID BIGINT;
     DECLARE V_NODE_ID BIGINT;

     IF PLAN_EXECUTION_ID IS NOT NULL AND PLAN_EXECUTION_ID &lt;&gt; -1 THEN -- classical plan

     SELECT USAGE
       INTO V_USAGE
       FROM &quot;sap.tm.trp.db.pipeline::t_plan_model&quot; AS A
       INNER JOIN &quot;sap.tm.trp.db.pipeline::t_plan_execution&quot; AS B ON A.ID = B.PLAN_MODEL_ID AND
                                                                     B.ID = PLAN_EXECUTION_ID;

     IF :V_USAGE = 'X' THEN --When the plan set with disabled intermediate node, only SUPPLY_DEMAND node display

      	var1 =

          SELECT DISTINCT
                  A.ID,
                  A.RESULT_VISIBLE,
                  A.PIPELINE_MODEL_ID,
                  A.NODE_INDEX,
                  A.NAME,
                  A.METADATA_NODE_ID,
                  B.PLAN_EXECUTION_ID,
                  CASE WHEN C.NODE_ID IS NULL THEN 0 ELSE 1 END AS HAS_DRILLDOWN_FLAG
            FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_node&quot;   A
          INNER JOIN (SELECT plan_execution_id,node_id
                  FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_output_dataset&quot;
                  WHERE plan_execution_id = :PLAN_EXECUTION_ID
                  GROUP BY plan_execution_id,node_id
            ) B ON  A.ID = B.node_id
            LEFT JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy&quot; C
            ON (A.ID = C.NODE_ID)
            WHERE A.METADATA_NODE_ID = :METADATA_NODE_ID;

        sub_nodes = select distinct T1.SUBSEQUENT_NODE_ID from &quot;sap.tm.trp.db.pipeline::t_pipeline_node_connection&quot; T1 inner join :var1 T2
                on (T2.ID = T1.NODE_ID) where T1.SUBSEQUENT_NODE_ID not in (select ID from :var1);

        var2 =    SELECT DISTINCT
                  E.ID,
                  E.RESULT_VISIBLE,
                  E.PIPELINE_MODEL_ID,
                  E.NODE_INDEX,
                  E.NAME,
                  E.METADATA_NODE_ID,
                  :PLAN_EXECUTION_ID AS PLAN_EXECUTION_ID,
                   CASE WHEN C.NODE_ID IS NULL THEN 0 ELSE 1 END AS HAS_DRILLDOWN_FLAG
            FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_node&quot; E inner join :sub_nodes D on E.ID = D.SUBSEQUENT_NODE_ID
            LEFT JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy&quot; C
            ON (E.ID = C.NODE_ID)
            WHERE E.METADATA_NODE_ID = :METADATA_NODE_ID;

       var_out = select* from :var2 union select * from :var1;

       var_out = SELECT * FROM :var_out where METADATA_NODE_ID IS NOT NULL ;

     ELSE

      var1 =

        SELECT DISTINCT
            A.ID,
                A.RESULT_VISIBLE,
                A.PIPELINE_MODEL_ID,
                A.NODE_INDEX,
                A.NAME,
                A.METADATA_NODE_ID,
                B.PLAN_EXECUTION_ID,
                CASE WHEN C.NODE_ID IS NULL THEN 0 ELSE 1 END AS HAS_DRILLDOWN_FLAG
          FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_node&quot;   A
        INNER JOIN (SELECT plan_execution_id,node_id
                FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_output_dataset&quot;
                WHERE plan_execution_id = :PLAN_EXECUTION_ID
                GROUP BY plan_execution_id,node_id
          ) B ON  A.ID = B.node_id
          LEFT JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy&quot; C
          ON (A.ID = C.NODE_ID);

       sub_nodes = select distinct T1.SUBSEQUENT_NODE_ID from &quot;sap.tm.trp.db.pipeline::t_pipeline_node_connection&quot; T1 inner join :var1 T2
                on (T2.ID = T1.NODE_ID) where T1.SUBSEQUENT_NODE_ID not in (select ID from :var1);

        var2 =    SELECT DISTINCT
                  E.ID,
                  E.RESULT_VISIBLE,
                  E.PIPELINE_MODEL_ID,
                  E.NODE_INDEX,
                  E.NAME,
                  E.METADATA_NODE_ID,
                  :PLAN_EXECUTION_ID AS PLAN_EXECUTION_ID,
                  CASE WHEN C.NODE_ID IS NULL THEN 0 ELSE 1 END AS HAS_DRILLDOWN_FLAG
            FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_node&quot; E inner join :sub_nodes D on E.ID = D.SUBSEQUENT_NODE_ID
            LEFT JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy&quot; C
            ON (E.ID = C.NODE_ID);

       var_out = select* from :var2 union select * from :var1;

       var_out = SELECT * FROM :var_out where METADATA_NODE_ID IS NOT NULL ;

     END IF;

     ELSE       --instant plan

       SELECT USAGE
       INTO V_USAGE
       FROM &quot;sap.tm.trp.db.pipeline::t_plan_model&quot; AS A
       WHERE A.ID = :PLAN_MODEL_ID;

        SELECT T2.ID INTO V_CAL_MODEL_ID
        FROM &quot;sap.tm.trp.db.pipeline::t_plan_model&quot; AS T1
        INNER JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_model&quot; AS T2 ON T1.PIPELINE_MODEL_ID = T2.ID
        WHERE T1.ID = PLAN_MODEL_ID;


       IF :V_USAGE = 'X' THEN --When the plan set with disabled intermediate node, only SUPPLY_DEMAND node display

      	var1 =

          SELECT DISTINCT
                  A.ID,
                  A.RESULT_VISIBLE,
                  A.PIPELINE_MODEL_ID,
                  A.NODE_INDEX,
                  A.NAME,
                  A.METADATA_NODE_ID,
                  -1 AS PLAN_EXECUTION_ID,
                  CASE WHEN C.NODE_ID IS NULL THEN 0 ELSE 1 END AS HAS_DRILLDOWN_FLAG
            FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_node&quot;   A
            LEFT JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy&quot; C
            ON (A.ID = C.NODE_ID)
            WHERE A.METADATA_NODE_ID = :METADATA_NODE_ID
            AND A.PIPELINE_MODEL_ID = :V_CAL_MODEL_ID  ;


        sub_nodes = select distinct T1.SUBSEQUENT_NODE_ID from &quot;sap.tm.trp.db.pipeline::t_pipeline_node_connection&quot; T1 inner join :var1 T2
                on (T2.ID = T1.NODE_ID) where T1.SUBSEQUENT_NODE_ID not in (select ID from :var1);

        var2 =    SELECT DISTINCT
                  E.ID,
                  E.RESULT_VISIBLE,
                  E.PIPELINE_MODEL_ID,
                  E.NODE_INDEX,
                  E.NAME,
                  E.METADATA_NODE_ID,
                  -1 AS PLAN_EXECUTION_ID,
                   CASE WHEN C.NODE_ID IS NULL THEN 0 ELSE 1 END AS HAS_DRILLDOWN_FLAG
            FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_node&quot; E inner join :sub_nodes D on E.ID = D.SUBSEQUENT_NODE_ID
            LEFT JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy&quot; C
            ON (E.ID = C.NODE_ID)
            WHERE E.METADATA_NODE_ID = :METADATA_NODE_ID
            AND E.PIPELINE_MODEL_ID = :V_CAL_MODEL_ID;

       var_out = select* from :var2 union select * from :var1;

       var_out = SELECT * FROM :var_out where METADATA_NODE_ID IS NOT NULL ;

     ELSE

      var1 =

        SELECT DISTINCT
            A.ID,
                A.RESULT_VISIBLE,
                A.PIPELINE_MODEL_ID,
                A.NODE_INDEX,
                A.NAME,
                A.METADATA_NODE_ID,
                -1 AS PLAN_EXECUTION_ID,
                CASE WHEN C.NODE_ID IS NULL THEN 0 ELSE 1 END AS HAS_DRILLDOWN_FLAG
          FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_node&quot;   A
          LEFT JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy&quot; C
          ON (A.ID = C.NODE_ID)
          WHERE A.PIPELINE_MODEL_ID = :V_CAL_MODEL_ID ;

       sub_nodes = select distinct T1.SUBSEQUENT_NODE_ID from &quot;sap.tm.trp.db.pipeline::t_pipeline_node_connection&quot; T1 inner join :var1 T2
                on (T2.ID = T1.NODE_ID) where T1.SUBSEQUENT_NODE_ID not in (select ID from :var1);

        var2 =    SELECT DISTINCT
                  E.ID,
                  E.RESULT_VISIBLE,
                  E.PIPELINE_MODEL_ID,
                  E.NODE_INDEX,
                  E.NAME,
                  E.METADATA_NODE_ID,
                  -1 AS PLAN_EXECUTION_ID,
                  CASE WHEN C.NODE_ID IS NULL THEN 0 ELSE 1 END AS HAS_DRILLDOWN_FLAG
            FROM &quot;sap.tm.trp.db.pipeline::t_pipeline_node&quot; E inner join :sub_nodes D on E.ID = D.SUBSEQUENT_NODE_ID
            LEFT JOIN &quot;sap.tm.trp.db.pipeline::t_pipeline_node_logical_hierarchy&quot; C
            ON (E.ID = C.NODE_ID)
            WHERE E.PIPELINE_MODEL_ID = :V_CAL_MODEL_ID ;

       var_out = SELECT * FROM :var2 UNION SELECT * FROM :var1;

       var_out = SELECT * FROM :var_out where METADATA_NODE_ID IS NOT NULL ;

     END IF;

     END IF;

END

</definition>
    </calculationView>
  </calculationViews>
  <logicalModel id="Script_View">
    <descriptions/>
    <attributes>
      <attribute id="ID" order="1">
        <descriptions defaultDescription="ID"/>
        <keyMapping columnObjectName="Script_View" columnName="ID"/>
      </attribute>
      <attribute id="RESULT_VISIBLE" order="2">
        <descriptions defaultDescription="RESULT_VISIBLE"/>
        <keyMapping columnObjectName="Script_View" columnName="RESULT_VISIBLE"/>
      </attribute>
      <attribute id="PIPELINE_MODEL_ID" order="3">
        <descriptions defaultDescription="PIPELINE_MODEL_ID"/>
        <keyMapping columnObjectName="Script_View" columnName="PIPELINE_MODEL_ID"/>
      </attribute>
      <attribute id="NODE_INDEX" order="4">
        <descriptions defaultDescription="NODE_INDEX"/>
        <keyMapping columnObjectName="Script_View" columnName="NODE_INDEX"/>
      </attribute>
      <attribute id="NAME" order="5">
        <descriptions defaultDescription="NAME"/>
        <keyMapping columnObjectName="Script_View" columnName="NAME"/>
      </attribute>
      <attribute id="METADATA_NODE_ID" order="6">
        <descriptions defaultDescription="METADATA_NODE_ID"/>
        <keyMapping columnObjectName="Script_View" columnName="METADATA_NODE_ID"/>
      </attribute>
    </attributes>
    <calculatedAttributes/>
    <privateDataFoundation>
      <tableProxies/>
      <joins/>
      <layout>
        <shapes/>
      </layout>
    </privateDataFoundation>
    <baseMeasures>
      <measure id="PLAN_EXECUTION_ID" order="7" aggregationType="sum" measureType="simple">
        <descriptions defaultDescription="PLAN_EXECUTION_ID"/>
        <measureMapping columnObjectName="Script_View" columnName="PLAN_EXECUTION_ID"/>
      </measure>
      <measure id="HAS_DRILLDOWN_FLAG" order="8" aggregationType="sum" measureType="simple">
        <descriptions defaultDescription="HAS_DRILLDOWN_FLAG"/>
        <measureMapping columnObjectName="Script_View" columnName="HAS_DRILLDOWN_FLAG"/>
      </measure>
    </baseMeasures>
    <calculatedMeasures/>
    <restrictedMeasures/>
    <localDimensions/>
  </logicalModel>
  <layout>
    <shapes>
      <shape modelObjectName="Output" modelObjectNameSpace="MeasureGroup">
        <upperLeftCorner x="40" y="85"/>
      </shape>
    </shapes>
  </layout>
</Calculation:scenario>
