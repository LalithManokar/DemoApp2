PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline.operator.instant.lean::p_all_supply_sources" (
	IN BASIC_DATASET "sap.tm.trp.db.supplydemand.instant::tt_sd_output",
	OUT sum "sap.tm.trp.db.pipeline.operator::tt_pipeline_output_datasets") 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	READS SQL DATA AS	
BEGIN
  
-- This procedure includes all basic and its corresponding overdue operator/pipeline node having same GEO/EQUIP/INTERVAL information.
-- All operator/pipeline nodes has been clubed in single procedure in order to have a lean model for better performance. 
sum = 
	SELECT 'SUPPLY_ADD_NINE' AS NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE,EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,TIME_INTERVAL_ID,SEQUENCE,
	  START_TIME,END_TIME,INTER_SECONDS, 'SUPPLY' AS OUTPUT_KEY,SUM(OUTPUT_VALUE) AS OUTPUT_VALUE,UNIT FROM 
	  (
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT
            FROM :BASIC_DATASET
            WHERE NODE_ID = 'EMPTY_RETURN'
		UNION ALL
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT
            FROM :BASIC_DATASET
            WHERE NODE_ID = 'DOWNTIME_OUT'
		UNION ALL
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT
            FROM :BASIC_DATASET
            WHERE NODE_ID = 'ON_HIRE'
		UNION ALL
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT
            FROM :BASIC_DATASET
			WHERE NODE_ID = 'INLAND_EMPTY_RP_IN'
		UNION ALL
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT
            FROM :BASIC_DATASET
			WHERE NODE_ID = 'MAIN_CARGO_OUT_FROM_TM'
		UNION ALL
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT 
           FROM :BASIC_DATASET
			WHERE NODE_ID = 'MARITIME_EMPTY_RP_IN'
		UNION ALL
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT
            FROM :BASIC_DATASET
			WHERE NODE_ID = 'OVERDUE_EMPTY_RETURN'
		UNION ALL
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT
           FROM :BASIC_DATASET
			WHERE NODE_ID = 'OVERDUE_INLAND_EMPTY_RP_IN'
		UNION ALL
		SELECT NODE_ID,GEO_ID,GEO_NAME,GEO_FILTER_TYPE, EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,
           TIME_INTERVAL_ID,SEQUENCE,START_TIME,END_TIME,INTER_SECONDS,
           'SUPPLY' AS OUTPUT_KEY, IFNULL(OUTPUT_VALUE,0) AS OUTPUT_VALUE,UNIT
            FROM :BASIC_DATASET
			WHERE NODE_ID = 'OVERDUE_MARITIME_EMPTY_RP_IN'
	   )  GROUP BY GEO_ID,GEO_NAME,GEO_FILTER_TYPE,EQUIP_TYPE,EQUIP_NAME,EQUIP_FILTER_TYPE,TIME_INTERVAL_ID,SEQUENCE,
	  START_TIME,END_TIME,INTER_SECONDS,UNIT;	
			
END;
