PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_pie_on_map_for_virtual_plan"(
    IN IN_PLAN_MODEL_ID BIGINT,
    IN IN_HIERARCHY_LEVEL INTEGER,
    IN IN_POLYGON CLOB,
    IN IN_NODE_NAME VARCHAR(30),
    IN START_TIME INTEGER,
    IN IN_PP_EXECUTION_ID BIGINT,
    OUT out_pie_on_map "sap.tm.trp.db.pipeline::tt_pie_on_map",
    OUT NO_DATA_PLAN_LIST "sap.tm.trp.db.pipeline::tt_plan_model_id_list",
    OUT TOO_MUCH_LOCATION_FLAG SMALLINT,
    OUT GIS_TYPE VARCHAR(10),
    OUT OUT_PLAN_STATUS SMALLINT,
    OUT OUT_LOCATIONS_XPOS_YPOS_INVALID  "sap.tm.trp.db.pipeline::tt_location_info_list" 
   
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER 
    DEFAULT SCHEMA "SAP_TM_TRP"
    AS
BEGIN
    
    
     DECLARE I_COUNT INTEGER := 0;
    -- DECLARE VAR_LOCATION_TYPE INTEGER;
     DECLARE LOCATION_FILTER_TYPE INTEGER;
    
	 DECLARE OUT_MAX_LEVEL INTEGER;
	 DECLARE MAX_LOCATION_NUM_ON_MAP INTEGER :=2000;
	 DECLARE VAR_LOCATION_NUM INTEGER :=0 ;
     DECLARE OUT_UUID VARCHAR(32) := SYSUUID; 
    
	 DECLARE VAR_PLAN_STATUS SMALLINT :=0 ;
	 DECLARE PLAN_STATUS_SUSPEND SMALLINT := 1;
	 DECLARE PLAN_STATUS_INVALID SMALLINT := 2;
	 DECLARE PLAN_STATUS_VALID SMALLINT := 0;
	 DECLARE ID_COUNT INTEGER := 0;
     TOO_MUCH_LOCATION_FLAG :=0;
     GIS_TYPE := '';
     
      --Check if the plan status is susplend, if yes, then do the virtual plan valid check:
	  SQL_PLAN_STATUS =
	    SELECT T1.STATUS 
	    FROM "sap.tm.trp.db.pipeline::t_plan_model" T1
	    WHERE T1.ID = :IN_PLAN_MODEL_ID;
	    
	    SELECT COUNT(1) INTO ID_COUNT
	    FROM :SQL_PLAN_STATUS;
	    
	    IF ID_COUNT >0 THEN
	      SELECT STATUS INTO VAR_PLAN_STATUS FROM :SQL_PLAN_STATUS;
	      OUT_PLAN_STATUS := :VAR_PLAN_STATUS;
	      IF VAR_PLAN_STATUS = :PLAN_STATUS_INVALID THEN
	        RETURN;
	      ELSEIF VAR_PLAN_STATUS = :PLAN_STATUS_SUSPEND THEN
	         CALL "sap.tm.trp.db.pipeline::p_virtual_plan_valid_check" (:IN_PLAN_MODEL_ID,VAR_PLAN_STATUS);
	        -- IF :VAR_PLAN_STATUS = :PLAN_STATUS_INVALID OR  :VAR_PLAN_STATUS = :PLAN_STATUS_SUSPEND THEN
	         IF :VAR_PLAN_STATUS = :PLAN_STATUS_INVALID THEN
	           RETURN;
	         END IF;
	      END IF;
	    END IF;
	 
   --get the location list of the indicated layer
    VIRTUAL_TREE_LOCATION_LIST = SELECT LOCATION_ID,LOCATION_NAME,LOCATION_TYPE
	    FROM  "sap.tm.trp.db.pipeline::t_virtual_tree_location_info"
	    WHERE VIRTUAL_PLAN_MODEL_ID = :IN_PLAN_MODEL_ID
	    AND LEVEL = :IN_HIERARCHY_LEVEL ;
    
    SELECT COUNT(1) INTO I_COUNT FROM :VIRTUAL_TREE_LOCATION_LIST;
    IF I_COUNT = 0 THEN
    
	  out_pie_on_map = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS EQUIP_TYPE_ID,NULL AS EQUIP_NAME,
	  NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,NULL AS OUTPUT_KEY,NULL AS OUTPUT_VALUE,NULL AS POINT_TYPE,
      NULL AS OUTPUT_NODE_NAME
	FROM DUMMY;
	
	NO_DATA_PLAN_LIST = SELECT NULL AS PLAN_MODEL_ID FROM DUMMY;
	TOO_MUCH_LOCATION_FLAG := 0 ;
	RETURN;
   
  
    END IF;
    
    LOCATION_ID_LIST = SELECT LOCATION_ID AS ID FROM :VIRTUAL_TREE_LOCATION_LIST;
    
    
    --Get the location type of the location list of  the indicated layer
   SELECT TOP 1 LOCATION_TYPE INTO LOCATION_FILTER_TYPE
   FROM :VIRTUAL_TREE_LOCATION_LIST;
   
		 
		 
	CALL "sap.tm.trp.db.pipeline::p_get_aggregate_execution_result_for_virtual_plan"(:IN_PLAN_MODEL_ID,:IN_PP_EXECUTION_ID,:LOCATION_ID_LIST,:IN_NODE_NAME,sql_result_dataset,NO_DATA_PLAN_LIST);
			 
		
	LOCATION_ERROR_INFO = SELECT T1.LOCATION_ID,T2.LOCATION_NAME,T1.EQUIP_TYPE_ID,T1.EQUIP_NAME,T1.OUTPUT_KEY,T1.OUTPUT_VALUE
	FROM :sql_result_dataset T1
	INNER JOIN :VIRTUAL_TREE_LOCATION_LIST T2 ON (T1.LOCATION_ID = T2.LOCATION_ID)
	WHERE OUT_NODE_NAME = :IN_NODE_NAME AND T1.SEQUENCE = :START_TIME;--START_TIME = :START_TIME;
	
	
	 IN_LOCATION_IDS_SQL = SELECT DISTINCT LOCATION_ID AS ID FROM :LOCATION_ERROR_INFO;
	 
	  CALL "sap.tm.trp.db.pipeline::p_get_xpos_or_polygon_info_for_location"(:IN_LOCATION_IDS_SQL,:LOCATION_FILTER_TYPE,:IN_POLYGON,OUT_GEO_POLYGON_INFO_SQL,GIS_TYPE,OUT_LOCATIONS_XPOS_YPOS_INVALID);
	  
	     SELECT COUNT(1) AS LOCATION_NUM INTO VAR_LOCATION_NUM
	   FROM :OUT_GEO_POLYGON_INFO_SQL;
	   
	    IF VAR_LOCATION_NUM > :MAX_LOCATION_NUM_ON_MAP THEN
	     out_pie_on_map = SELECT NULL AS LOCATION_ID,NULL AS LOCATION_NAME,NULL AS EQUIP_TYPE_ID,NULL AS EQUIP_NAME,
			  NULL AS LATITUDE,NULL AS LONGITUDE,NULL AS BOUNDARY,NULL AS OUTPUT_KEY,NULL AS OUTPUT_VALUE,NULL AS POINT_TYPE,
		      NULL AS OUTPUT_NODE_NAME
			FROM DUMMY;
	    TOO_MUCH_LOCATION_FLAG := 1;
	    RETURN;
	   END IF;

	
	   out_pie_on_map = SELECT T1.LOCATION_ID,T1.LOCATION_NAME,T1.EQUIP_TYPE_ID,T1.EQUIP_NAME,
	   T2.XPOS AS LATITUDE,T2.YPOS AS LONGITUDE
	  ,T2.BOUNDARY,T1.OUTPUT_KEY,T1.OUTPUT_VALUE,T2.POINT_TYPE,:IN_NODE_NAME AS OUTPUT_NODE_NAME
	FROM :LOCATION_ERROR_INFO T1
	INNER JOIN :OUT_GEO_POLYGON_INFO_SQL T2 ON (T1.LOCATION_ID = T2.LOCATION_ID);
   
   
END;