<?xml version="1.0" encoding="UTF-8"?>
<Calculation:scenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Calculation="http://www.sap.com/ndb/BiModelCalculation.ecore" schemaVersion="2.3" id="cv_get_locationinfo_by_filtergroupid" applyPrivilegeType="ANALYTIC_PRIVILEGE" checkAnalyticPrivileges="true" defaultClient="crossClient" defaultLanguage="$$language$$" hierarchiesSQLEnabled="false" translationRelevant="true" visibility="internal" calculationScenarioType="SCRIPT_BASED" dataCategory="DEFAULT" enforceSqlExecution="false" executionSemantic="UNDEFINED" scriptParametersCaseSensitive="true">
  <descriptions defaultDescription="cv_get_locations_by_filtergroupid"/>
  <defaultSchema schemaName="SAP_TM_TRP"/>
  <localVariables>
    <variable id="Filter_Group_ID" parameter="true">
      <descriptions defaultDescription="In_Filter_Group_ID"/>
      <variableProperties datatype="BIGINT" mandatory="true">
        <valueDomain type="empty"/>
        <selection multiLine="false" type="SingleValue"/>
      </variableProperties>
    </variable>
  </localVariables>
  <variableMappings/>
  <informationModelLayout relativeWidthScenario="27"/>
  <dataSources/>
  <calculationViews>
    <calculationView xsi:type="Calculation:SqlScriptView" id="Script_View">
      <descriptions/>
      <viewAttributes>
        <viewAttribute datatype="VARCHAR" id="GEO_ID" length="22"/>
        <viewAttribute datatype="VARCHAR" id="LOCATION_ID" length="22"/>
        <viewAttribute datatype="INTEGER" id="GEO_FILTER_TYPE"/>
        <viewAttribute datatype="VARCHAR" id="GEO_GROUP_ID" length="22"/>
        <viewAttribute datatype="VARCHAR" id="GEO_NAME" length="100"/>
      </viewAttributes>
      <calculatedViewAttributes/>
      <localVariable>#Filter_Group_ID</localVariable>
      <definition> 
  
 BEGIN 
     DECLARE filter_type INTEGER;
  	 DECLARE LOCATION_TYPE INTEGER := 1;
	 DECLARE LOCATION_GROUP_TYPE INTEGER := 2;
	 --DECLARE ZONE_TYPE  INTEGER :=3;
	 --DECLARE ZONE_GROUP_TYPE  INTEGER :=4 ;
	 DECLARE REGION_TYPE INTEGER :=5;
	 DECLARE REGION_GROUP_TYPE INTEGER :=6;
     DECLARE loc_filter_id BIGINT;
     DECLARE EXIT HANDLER FOR SQLEXCEPTION
     SELECT ::SQL_ERROR_CODE, ::SQL_ERROR_MESSAGE FROM DUMMY;

     -- there are 3 levels for the ids:GEO_GROUP_ID, GEO_ID and LOCATION_ID
     -- and only 1 name is needed GEO_NAME, the name is a bit ambiguous here as it's not always corresponding to the GEO_ID
     -- it returns different object name based on the location filter type 
     -- Location Filter --> Location name
     -- Location Group Filter --> Location Group name
     -- Region filter --> Region name
     -- Region Group filter --> Region Group name
     filter_type := 0 ;
     
     SELECT IFNULL(MAX(t2.LOCATION_TYPE),0), IFNULL(MAX(t2.ID),0) INTO filter_type, loc_filter_id 
     FROM &quot;sap.tm.trp.db.filter::t_filter_location_filter&quot; t1
     INNER JOIN &quot;sap.tm.trp.db.filter::t_location_filter&quot; t2 ON (t1.LOCATION_FILTER_ID = t2.ID)
     WHERE t1.FILTER_GROUP_ID = :Filter_Group_ID;      
     
     -- Location filter
     IF :filter_type = :LOCATION_TYPE THEN 
     var_out = SELECT DISTINCT LOCATION_ID AS GEO_ID, LOCATION_ID, 1 AS GEO_FILTER_TYPE, LOCATION_ID AS GEO_GROUP_ID, b.NAME AS GEO_NAME 
               FROM &quot;sap.tm.trp.db.filter::t_location_filter_location&quot; a
               INNER JOIN &quot;sap.tm.trp.db.semantic.location::v_location&quot; b ON (a.LOCATION_ID = b.ID)
               WHERE LOCATION_FILTER_ID = :loc_filter_id;
                
     -- Location group filter           
     ELSEIF :filter_type = :LOCATION_GROUP_TYPE THEN           
     var_out = SELECT DISTINCT  c.LOCATION_ID AS GEO_ID, c.LOCATION_ID, :filter_type AS GEO_FILTER_TYPE, b.LOCATION_GROUP_ID AS GEO_GROUP_ID,
                       d.DESC AS GEO_NAME
               FROM &quot;sap.tm.trp.db.filter::t_location_filter_location&quot; b 
               INNER JOIN  &quot;sap.tm.trp.db.systemmanagement::t_location_group_item&quot; c ON (b.LOCATION_GROUP_ID = c.LOCATION_GROUP_ID) 
               INNER JOIN &quot;sap.tm.trp.db.systemmanagement::t_location_group&quot; d ON (c.LOCATION_GROUP_ID = d.ID)
               WHERE b.LOCATION_FILTER_ID = :loc_filter_id;
                 
      -- there may be regions without any location, the UI show supply and demand values for these regions with 0
      -- so use left outer join with v_region_location_all  
       -- region filter(currently, there is no concept of region, that's always zone. But some region related views still can be used to 
       -- avoid mass code changes)      
       ELSEIF :filter_type = :REGION_TYPE THEN
       /*var_out = SELECT DISTINCT b.ZONE_ID AS GEO_ID, c.LOCATION_ID, :filter_type AS GEO_FILTER_TYPE, b.ZONE_ID AS GEO_GROUP_ID, d.NAME AS GEO_NAME
                 FROM &quot;sap.tm.trp.db.filter::t_location_filter_region&quot; b
                 LEFT OUTER JOIN  &quot;sap.tm.trp.db.systemmanagement.location::v_region_location_all&quot; c ON (b.ZONE_ID = c.ROOT_ID)
                 LEFT OUTER JOIN &quot;sap.tm.trp.db.semantic.location::v_zone&quot; d ON (b.ZONE_ID = d.ID)                 
                 WHERE b.LOCATION_FILTER_ID = :loc_filter_id;*/
                 
        -- Optimized code
       		ZONE_IDS =  SELECT zone_id FROM &quot;sap.tm.trp.db.filter::t_location_filter_region&quot; 
       		            WHERE LOCATION_FILTER_ID = :loc_filter_id;
	       
	        lt_zone_loc_info =  SELECT ROOT_ID,LOCATION_ID 
	                            FROM &quot;sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions_sd&quot;(PLACEHOLDER.&quot;$$IP_LOCATION_FILTER_ID$$&quot;=>:loc_filter_id,PLACEHOLDER.&quot;$$IP_FILTER_TYPE$$&quot;=>5);	        
	        
	        var_out  =    SELECT DISTINCT  b.ZONE_ID AS GEO_ID,  c.LOCATION_ID, :filter_type AS GEO_FILTER_TYPE, b.ZONE_ID AS GEO_GROUP_ID, d.NAME AS GEO_NAME
                          FROM :ZONE_IDS b                 
                          LEFT OUTER JOIN :lt_zone_loc_info c on (b.ZONE_ID = c.ROOT_ID)
                          LEFT OUTER JOIN &quot;sap.tm.trp.db.semantic.location::v_zone&quot; d ON (b.ZONE_ID = d.ID);          
        -- Optimized code end         
                  
       -- region group filter           
       ELSEIF :filter_type = :REGION_GROUP_TYPE THEN            
       /*var_out =  SELECT DISTINCT c.ZONE_ID AS GEO_ID, d.LOCATION_ID, :filter_type AS GEO_FILTER_TYPE, b.REGION_GROUP_ID AS GEO_GROUP_ID, e.DESC AS GEO_NAME
                  FROM &quot;sap.tm.trp.db.filter::t_location_filter_region&quot; b             
                  INNER JOIN &quot;sap.tm.trp.db.systemmanagement::t_region_group_item&quot; c ON  (b.REGION_GROUP_ID = c.REGION_GROUP_ID)
                  LEFT OUTER JOIN &quot;sap.tm.trp.db.systemmanagement.location::v_region_location_all&quot; d ON (c.ZONE_ID = d.ROOT_ID)
                  LEFT OUTER JOIN &quot;sap.tm.trp.db.systemmanagement::t_region_group&quot; e ON (b.REGION_GROUP_ID = e.ID)
                  WHERE  b.LOCATION_FILTER_ID = :loc_filter_id;*/
                  
     -- Optimized code start
                   
         lt_loc_reg_group = SELECT DISTINCT b.ZONE_ID,a.REGION_GROUP_ID
                            FROM &quot;sap.tm.trp.db.filter::t_location_filter_region&quot; a            
                            INNER JOIN &quot;sap.tm.trp.db.systemmanagement::t_region_group_item&quot; b ON  (a.REGION_GROUP_ID = b.REGION_GROUP_ID)
                            WHERE  a.LOCATION_FILTER_ID = :loc_filter_id;
                   
	     ZONE_IDS = SELECT DISTINCT zone_id FROM :lt_loc_reg_group;  

         lt_zone_loc_info =  SELECT ROOT_ID,LOCATION_ID FROM &quot;sap.tm.trp.db.systemmanagement.location::cv_get_locations_of_regions_sd&quot;(PLACEHOLDER.&quot;$$IP_LOCATION_FILTER_ID$$&quot;=>:loc_filter_id,PLACEHOLDER.&quot;$$IP_FILTER_TYPE$$&quot;=>6); 
         
         var_out =  SELECT DISTINCT a.ZONE_ID AS GEO_ID, d.LOCATION_ID, :filter_type AS GEO_FILTER_TYPE, a.REGION_GROUP_ID AS GEO_GROUP_ID, e.DESC AS GEO_NAME
                    FROM :lt_loc_reg_group a                  
                    LEFT OUTER JOIN :lt_zone_loc_info d ON (a.ZONE_ID = d.ROOT_ID)
                    LEFT OUTER JOIN &quot;sap.tm.trp.db.systemmanagement::t_region_group&quot; e ON (a.REGION_GROUP_ID = e.ID); 
                   
      -- Optimized code end         
        
        --ELSE   
        --var_out = SELECT NULL AS GEO_ID, NULL AS LOCATION_ID, NULL AS GEO_TYPE, NULL AS GEO_GROUP_ID FROM DUMMY;
                  
        END IF;         
        
END </definition>
    </calculationView>
  </calculationViews>
  <logicalModel id="Script_View">
    <descriptions/>
    <attributes>
      <attribute id="GEO_ID" order="1">
        <descriptions defaultDescription="GEO_ID"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_ID"/>
      </attribute>
      <attribute id="LOCATION_ID" order="2">
        <descriptions defaultDescription="LOCATION_ID"/>
        <keyMapping columnObjectName="Script_View" columnName="LOCATION_ID"/>
      </attribute>
      <attribute id="GEO_FILTER_TYPE" order="3">
        <descriptions defaultDescription="TYPE"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_FILTER_TYPE"/>
      </attribute>
      <attribute id="GEO_GROUP_ID" order="4">
        <descriptions defaultDescription="GEO_GROUP_ID"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_GROUP_ID"/>
      </attribute>
      <attribute id="GEO_NAME" order="5">
        <descriptions defaultDescription="GEO_NAME"/>
        <keyMapping columnObjectName="Script_View" columnName="GEO_NAME"/>
      </attribute>
    </attributes>
    <calculatedAttributes/>
    <privateDataFoundation>
      <tableProxies/>
      <joins/>
      <layout>
        <shapes/>
      </layout>
    </privateDataFoundation>
    <baseMeasures/>
    <calculatedMeasures/>
    <restrictedMeasures/>
    <localDimensions/>
  </logicalModel>
  <layout>
    <shapes>
      <shape modelObjectName="Output" modelObjectNameSpace="MeasureGroup">
        <upperLeftCorner x="40" y="85"/>
      </shape>
    </shapes>
  </layout>
</Calculation:scenario>