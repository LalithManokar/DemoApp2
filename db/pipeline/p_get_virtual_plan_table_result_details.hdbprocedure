PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_virtual_plan_table_result_details" 
( 
	IN PLAN_MODEL_ID BIGINT,
	IN NODE_NAME VARCHAR(32),
	IN IN_PP_EXECUTION_ID BIGINT,
	IN LOCATION_ID_LIST "sap.tm.trp.db.pipeline::tt_get_virtual_plan_table_result_drilldown_details_location_id_list",
	OUT OUTPUT "sap.tm.trp.db.pipeline::tt_get_virtual_plan_table_result_details_output_by_plan_id_location_id_resource_type",
	OUT PLAN_STATUS INTEGER,
	OUT DEFAULT_NODE_ID BIGINT
)
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	AS
BEGIN

DECLARE STATUS_VALID SMALLINT := 0;
DECLARE STATUS_SUSPEND SMALLINT := 1;
DECLARE STATUS_INVALID SMALLINT := 2;
DECLARE  ADDREGAT_METHOD_KEY VARCHAR(30) := 'AGGREGATIONMETHOD';
DECLARE  ADDREGAT_METHOD_MEAN_VALUE VARCHAR(30) := 'MEAN';

-- CHECK WHETHER THE PLAN IS VALID
SELECT IFNULL(MAX(STATUS),:STATUS_SUSPEND) INTO PLAN_STATUS FROM "sap.tm.trp.db.pipeline::t_plan_model" WHERE ID = :PLAN_MODEL_ID;

IF PLAN_STATUS = :STATUS_INVALID THEN
	RETURN;
ELSEIF PLAN_STATUS = :STATUS_SUSPEND THEN
	CALL "sap.tm.trp.db.pipeline::p_virtual_plan_valid_check" (:PLAN_MODEL_ID,PLAN_STATUS);
    IF :PLAN_STATUS = :STATUS_INVALID THEN
    	RETURN;
    END IF;
END IF;

-- GET VIRTUAL PLAN RESULT
CALL "sap.tm.trp.db.pipeline::p_get_aggregate_execution_result_for_virtual_plan"(:PLAN_MODEL_ID,:IN_PP_EXECUTION_ID,:LOCATION_ID_LIST,:NODE_NAME,PLAN_RESULT,NO_DATA_PLAN_LIST);

OUTPUT =
    SELECT
		T1.LOCATION_ID AS GEO_ID
		,T1.LOCATION_NAME AS GEO_NAME
		,T1.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE
		,T1.EQUIP_NAME AS RESOURCE_TYPE_NAME
        ,T1.OUTPUT_KEY -- NOTE: Actually, the output key of parent node and the node is the same
        ,T1.METADATA_NODE_ID AS DRILLDOWN_OUTPUT_KEY
        ,T1.SEQUENCE
        ,T1.START_TIME
        ,T1.END_TIME
        ,T1.TIME_INTERVAL
        ,T1.DRILLDOWN_NODE_ID
        ,SUM(T1.OUTPUT_VALUE) AS OUTPUT_VALUE
        ,SUM(T1.ALERT_NUM) AS ALERT_STATUS
    FROM :PLAN_RESULT T1 
    INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T1.LOCATION_ID -- filter the output data which does not match the location
    WHERE T1.PARENT_METADATA_NODE_ID = :NODE_NAME AND T1.HAS_DRILLDOWN_FLAG = 3 -- filter the node which matches the input node name
    GROUP BY T1.LOCATION_ID,T1.LOCATION_NAME,T1.EQUIP_TYPE_ID,T1.EQUIP_NAME,T1.OUTPUT_KEY,T1.METADATA_NODE_ID,T1.SEQUENCE,T1.START_TIME,T1.END_TIME,T1.TIME_INTERVAL,T1.DRILLDOWN_NODE_ID
    UNION
    SELECT
		T0.LOCATION_ID AS GEO_ID
		,T0.LOCATION_NAME AS GEO_NAME
		,T0.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE
		,T0.EQUIP_NAME AS RESOURCE_TYPE_NAME
        ,T0.OUTPUT_KEY
        ,T0.METADATA_NODE_ID AS DRILLDOWN_OUTPUT_KEY
		,T0.SEQUENCE
		,T0.START_TIME
		,T0.END_TIME
		,T0.TIME_INTERVAL
		,T0.DRILLDOWN_NODE_ID
		,CASE WHEN UCASE(T4.VALUE) = :ADDREGAT_METHOD_MEAN_VALUE THEN  AVG(TO_DOUBLE(T0.OUTPUT_VALUE)) 
	    	ELSE SUM(TO_DOUBLE(T0.OUTPUT_VALUE))  END AS OUTPUT_VALUE
		,SUM(T0.ALERT_NUM) AS ALERT_STATUS
	FROM :PLAN_RESULT T0
	INNER JOIN :LOCATION_ID_LIST T2 ON T2.ID = T0.LOCATION_ID
	LEFT JOIN ( -- TO GET THE AGGREGATE METHOD AS p_get_aggregate_execution_result_for_virtual_plan
		SELECT UCASE(T1.VALUE) AS VALUE
		FROM "sap.tm.trp.db.pipeline::t_pipeline_node_misc_info" T1
		INNER JOIN (
			SELECT TOP 1 T1.NODE_ID 
			FROM "sap.tm.trp.db.pipeline::t_pipeline_output_dataset" T1
			INNER JOIN (
				SELECT IFNULL(MAX(A.ID),-1) AS MAX_NEWEST_EXECUTION_ID
				FROM  "sap.tm.trp.db.pipeline::t_plan_execution" A
				INNER JOIN "sap.tm.trp.db.pipeline::t_virtual_plan_persisted_plan" B ON (A.PLAN_MODEL_ID = B.PERSISTED_PLAN_MODEL_ID)
				WHERE B.VIRTUAL_PLAN_MODEL_ID = :PLAN_MODEL_ID
				AND (:IN_PP_EXECUTION_ID <> 0 AND  A.ID <=:IN_PP_EXECUTION_ID) OR :IN_PP_EXECUTION_ID = 0
			) T2 ON T2.MAX_NEWEST_EXECUTION_ID = T1.PLAN_EXECUTION_ID
			INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T4 ON T1.NODE_ID = T4.ID
			WHERE T4.METADATA_NODE_ID = :NODE_NAME
		) T2 ON T2.NODE_ID = T1.NODE_ID
		WHERE UCASE(T1.KEY) = :ADDREGAT_METHOD_KEY
	) T4 ON 1 = 1
	WHERE T0.METADATA_NODE_ID = :NODE_NAME
	GROUP BY T0.LOCATION_ID, T0.LOCATION_NAME, T0.EQUIP_TYPE_ID, T0.EQUIP_NAME, T0.METADATA_NODE_ID, T0.OUTPUT_KEY, T0.SEQUENCE, 
		T0.START_TIME, T0.END_TIME, T0.TIME_INTERVAL, T4.VALUE,T0.DRILLDOWN_NODE_ID
;

SELECT DRILLDOWN_NODE_ID INTO DEFAULT_NODE_ID 
        FROM :output T2
        WHERE DRILLDOWN_OUTPUT_KEY = :NODE_NAME
        GROUP BY T2.DRILLDOWN_NODE_ID;

END;