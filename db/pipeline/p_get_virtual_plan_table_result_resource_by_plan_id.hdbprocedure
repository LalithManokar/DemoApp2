PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.pipeline::p_get_virtual_plan_table_result_resource_by_plan_id" (
	IN PLAN_MODEL_ID BIGINT,
	IN METADATA_NODE_ID VARCHAR(32),
	IN LOCATION_ID_LIST CLOB,
	IN IN_PP_EXECUTION_ID BIGINT,
	OUT OUTPUT "sap.tm.trp.db.pipeline::tt_get_virtual_plan_table_result_resource_by_plan_id_output",
	OUT NO_DATA_PLAN_LIST "sap.tm.trp.db.pipeline::tt_get_virtual_plan_table_result_no_data_plan_list",
	OUT PLAN_STATUS INTEGER
) 
LANGUAGE SQLSCRIPT
SQL SECURITY INVOKER 
DEFAULT SCHEMA "SAP_TM_TRP"
AS
BEGIN

DECLARE STATUS_VALID SMALLINT := 0;
DECLARE STATUS_SUSPEND SMALLINT := 1;
DECLARE STATUS_INVALID SMALLINT := 2;
DECLARE LOCATION_ID_LIST_P TABLE(
    "ID" VARCHAR(22)
    );
  
  CALL "sap.tm.trp.db.dashboard::sp_splitter_clob" (:LOCATION_ID_LIST,',',LOCATION_ID_LIST_STRING);
  LOCATION_ID_LIST_P = SELECT string as ID FROM :LOCATION_ID_LIST_STRING;


-- CHECK WHETHER THE PLAN IS VALID
SELECT IFNULL(MAX(STATUS),:STATUS_SUSPEND) INTO PLAN_STATUS FROM "sap.tm.trp.db.pipeline::t_plan_model" WHERE ID = :PLAN_MODEL_ID;

 IF PLAN_STATUS = :STATUS_INVALID THEN
	RETURN;
 ELSEIF PLAN_STATUS = :STATUS_SUSPEND THEN
     CALL "sap.tm.trp.db.pipeline::p_virtual_plan_valid_check" (:PLAN_MODEL_ID,PLAN_STATUS);
     IF :PLAN_STATUS = :STATUS_INVALID THEN
       RETURN;
     END IF;
 END IF;
 
CALL "sap.tm.trp.db.pipeline::p_get_aggregate_execution_result_for_virtual_plan"(:PLAN_MODEL_ID,:IN_PP_EXECUTION_ID,:LOCATION_ID_LIST_P,:METADATA_NODE_ID,PLAN_RESULT,NO_DATA_PLAN_LIST);
		 
OUTPUT =
	SELECT
		T0.EQUIP_TYPE_ID AS RESOURCE_TYPE_CODE
		,T0.EQUIP_NAME AS RESOURCE_TYPE_NAME
		,T0.SEQUENCE
		,T0.START_TIME
		,T0.END_TIME
		,T0.OUTPUT_KEY
		,SUM(T0.OUTPUT_VALUE) AS OUTPUT_VALUE
		,SUM(T0.ALERT_NUM) AS ALERT_STATUS
		,T0.OUT_NODE_NAME
		,T0.HAS_DRILLDOWN_FLAG
		,T0.TIME_INTERVAL
	FROM :PLAN_RESULT T0
	WHERE T0.METADATA_NODE_ID = :METADATA_NODE_ID
	GROUP BY T0.EQUIP_TYPE_ID,T0.EQUIP_NAME,T0.START_TIME,T0.END_TIME,T0.SEQUENCE,T0.OUTPUT_KEY,T0.OUT_NODE_NAME,T0.HAS_DRILLDOWN_FLAG,T0.TIME_INTERVAL
;

END;