PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.hrf.ruleManage::p_genRuleDataset_callRule_for_bubble_for_supplydemand_v1" (
IN  PLAN_EXECUTION_ID BIGINT,
OUT OUT_PLAN_MODEL_TYPE_ID INTEGER,
OUT OUT_REC_BUBBLE INTEGER
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	AS
BEGIN
   DECLARE PLAN_MODEL_ID BIGINT;
    DECLARE PLAN_MODEL_TYPE_ID_TMP INTEGER;
    DECLARE PIPELINE_MODEL_ID BIGINT;
    DECLARE FILTER_GROUP_ID BIGINT;
    DECLARE PLAN_MODEL_CATEGORY_ID BIGINT;
    DECLARE FILTER_TYPE INTEGER;
    DECLARE NODE_BINDING_RULE INTEGER;   
    DECLARE SP VARCHAR(500);
    DECLARE SCRIPT VARCHAR(5000);
    DECLARE EXECUTION_TIME TIMESTAMP;
    DECLARE GLOBAL_TEMPORARY_TABLE_EXIST INTEGER;
    
    DECLARE OUTPUT_KEY_SUPPLY VARCHAR(20) := 'SUPPLY';
    DECLARE OUTPUT_KEY_DEMAND VARCHAR(20) := 'DEMAND';
    DECLARE OUTPUT_KEY_STOCK VARCHAR(20) := 'STOCK';
    
    DECLARE OUTPUT_KEY_RATE VARCHAR(20) := 'RATE';  
    DECLARE OUTPUT_KEY_QUANTITY VARCHAR(20) := 'QUANTITY';   
    DECLARE OUTPUT_KEY_RESERV1 VARCHAR(20) := 'RESERV1';  
    DECLARE OUTPUT_KEY_RESERV2 VARCHAR(20) := 'RESERV2';
    DECLARE PLAN_BUBBLE_VIEW INTEGER := 1 ; 
    DECLARE RULE_SP VARCHAR(2000);
    DECLARE ALERT_SCORE_RANGE INTEGER;
    DECLARE ALERT_SCORE_MIN INTEGER;
  

    
    DECLARE SD_FLAG VARCHAR(8) := 'SD';
    DECLARE KPI_FLAG VARCHAR(8) := 'KPI';
    
    DECLARE TMP_NODE_ID BIGINT;
    DECLARE TMP_LOCATION_TYPE INTEGER;
    DECLARE TMP_EQUIP_TYPE INTEGER;
    
    DECLARE REC_BUBBLE_TOTAL INTEGER := 0;
    
    DECLARE NUM_AMOUNT_DECIMAL_POINT INTEGER := 2;
    
    DECLARE MIN_SAFETY_DEFAULT INTEGER :=0;
    DECLARE MAX_SAFETY_DEFAULT INTEGER := 999999;
    DECLARE MAX_CAPACITY_DEFAULT INTEGER :=999999;
    
    DECLARE MIN_SAFETY_KEY VARCHAR(20) := 'MIN_SAFETY_STOCK';
    DECLARE MAX_SAFETY_KEY VARCHAR(20) := 'MAX_SAFETY_STOCK';
    DECLARE MAX_CAPACITY_KEY VARCHAR(20) := 'MAX_CAPACITY';
    DECLARE DEFAULT_NODE_ID BIGINT;
    DECLARE DEFAULT_NODE_NAME VARCHAR(50);
    DECLARE METADATA_NODE_ID VARCHAR(50);
    DECLARE NODE_OUTPUT_KEYS VARCHAR(50);
    DECLARE DATA_OBJECT_ID BIGINT;
    DECLARE DATA_OBJECT_FORMAT VARCHAR(50);
    DECLARE RESULT_VISIBLE INTEGER;
    DECLARE I_COUNT INTEGER := 0;
    --Note: Following Variable should be the same as the value defined in bubble rule for supply and demand.Currently use r_dt_sd_kpi_bubble_cus.hprrule. 
    --If the xxx.hprrule changed and the OUTPUT_KEY's value changed, the value of following variable should also be changed accordingly.
   
    
    --01_01_distinct (NODE_ID,NAME,DATA_OBJECT_FORMAT, SP) for PLAN_EXECUTION_ID 
    -- get rule sp info for each plan_model node
    -- plan_model  <-----> alert_rule_group
    -- alert_rule_groups <------> alert rules
    -- alert rule type <-----------> data object
     
       --Get default node:            
       CALL "sap.tm.trp.db.pipeline::p_get_default_node_by_executionid" (:PLAN_EXECUTION_ID, DEFAULT_NODE_ID);
     
      EXE_RESULT =  SELECT T1.NODE_ID,T1.LOCATION_ID,T1.LOCATION_NAME,T1.LOCATION_FILTER_TYPE, 
                    T1.EQUIP_TYPE_ID, T1.EQUIP_TYPE_NAME,T1.EQUIP_FILTER_TYPE,
                    T30.ID AS TIME_INTERVAL_ID,T1.START_TIME,T1.END_TIME, T1.SEQUENCE,
                   T1.TIME_INTERVAL,T3.DESC AS TIME_FILTER_DESC,
                   T1.OUTPUT_KEY,T1.OUTPUT_VALUE,T1.UNIT,T4.NODE_OUTPUT_KEYS
                   FROM "sap.tm.trp.db.pipeline::t_pipeline_output_dataset"  T1
                   INNER JOIN "sap.tm.trp.db.filter::t_time_filter_interval" T30 ON (T1.TIME_INTERVAL_ID = T30.ID)
                   INNER JOIN  "sap.tm.trp.db.filter::t_time_filter" T3 ON (T30.TIME_FILTER_ID = T3.ID)
                   INNER JOIN ( SELECT NODE_ID, VALUE AS NODE_OUTPUT_KEYS
                                FROM "sap.tm.trp.db.pipeline::t_pipeline_node_layout" 
                                WHERE NODE_ID = :DEFAULT_NODE_ID AND KEY = 'outputKey'
                   )T4 ON (T1.NODE_ID = T4.NODE_ID)
                   WHERE PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID 
                   AND T1.NODE_ID = :DEFAULT_NODE_ID;
                   
       --Check if the default_node of the pipeline model of the plan is supply demand plan:
       --The default node should contain the SUPPLY OUTPUT KEY and the DEMAND output key as well.
	     SELECT SUM(HAS_THE_SUPPLYDEMAND_FLAG) INTO I_COUNT
	     FROM
	     (
	       SELECT MAP(MAX(NODE_ID),NULL,0,1) AS HAS_THE_SUPPLYDEMAND_FLAG
	       FROM :EXE_RESULT
	       WHERE  OUTPUT_KEY = 'SUPPLY'
	       UNION ALL
	       SELECT MAP(MAX(NODE_ID),NULL,0,1) AS HAS_THE_SUPPLYDEMAND_FLAG
	       FROM :EXE_RESULT
	       WHERE  OUTPUT_KEY = 'DEMAND'
	      );
	      
	      --do not contains both SUPPLY AND DEMAND THEN (invalid) return.
	      IF (I_COUNT < 2) THEN
	        RETURN;
	      END IF; 
                   
      SELECT COUNT(1) INTO NODE_BINDING_RULE FROM :EXE_RESULT;
      
      -- If no node has been assigned rule or no execution result, exit without further processing.
      IF :NODE_BINDING_RULE = 0 THEN 
        RETURN;
      END IF;   
                                   
      -- get plan_model_id, filter type, and other plan related information 
           -- get plan_model_id, filter type, and other plan related information 
       SELECT IFNULL(MAX(PLAN_MODEL_ID),-1), IFNULL(MAX(PLAN_MODEL_TYPE_ID),-1),IFNULL(MAX(EXECUTE_ON),CURRENT_UTCTIMESTAMP), IFNULL(MAX(FILTER_TYPE),-1), --LOCATION_TYPE, EQUI_TYPE, 
       IFNULL(MAX(PIPELINE_MODEL_ID),-1), IFNULL(MAX(FILTER_GROUP_ID),-1), IFNULL(MAX(PLAN_MODEL_CATEGORY_ID),-1)
      INTO PLAN_MODEL_ID, PLAN_MODEL_TYPE_ID_TMP, EXECUTION_TIME, FILTER_TYPE, 
      PIPELINE_MODEL_ID, FILTER_GROUP_ID, PLAN_MODEL_CATEGORY_ID	 
      FROM ( SELECT t2.ID AS PLAN_EXECUTION_ID, 
                         T2.PLAN_MODEL_ID, 
                         T2.EXECUTE_ON, 
                         T3.PLAN_MODEL_TYPE_ID, 
                         T3.PLAN_MODEL_TYPE_ID as PLAN_MODEL_CATEGORY_ID, 
                         T3.FILTER_GROUP_ID, 
                         T3.PIPELINE_MODEL_ID,
		                 CASE T7.LOCATION_TYPE || T7.EQUI_TYPE
		                  WHEN '11' THEN 1
		                  WHEN '31' THEN 2
		                  WHEN '51' THEN 3
		                  WHEN '21' THEN 4
		                  WHEN '41' THEN 5
		                  WHEN '61' THEN 6
		                  WHEN '12' THEN 7
		                  WHEN '32' THEN 8
		                  WHEN '52' THEN 9
		                  WHEN '22' THEN 10
		                  WHEN '42' THEN 11
		                  WHEN '62' THEN 12
		                 END AS FILTER_TYPE
      FROM "sap.tm.trp.db.pipeline::t_plan_execution" t2
      INNER JOIN "sap.tm.trp.db.hrf::v_plan_model" T3 ON (T3.EXECUTION_ID = T2.ID)
      INNER JOIN "sap.tm.trp.db.filter::v_filter_group_generic" AS T7 ON (T3.FILTER_GROUP_ID = T7.ID)
      WHERE t2.ID = :PLAN_EXECUTION_ID
      ); 
      
      IF  :FILTER_GROUP_ID = -1 THEN
        RETURN;
      END IF;
    
      --node related info:
      SELECT IFNULL(MAX(NAME),''),
      IFNULL(MAX(RESULT_VISIBLE),-1),
      IFNULL(MAX(METADATA_NODE_ID),'')
      INTO DEFAULT_NODE_NAME,
      RESULT_VISIBLE,
      METADATA_NODE_ID
      FROM "sap.tm.trp.db.pipeline::t_pipeline_node" WHERE ID = :DEFAULT_NODE_ID;
      
     --get data object info:
      SELECT IFNULL(MAX(DATA_OBJECT_ID),0),IFNULL(MAX(DATA_OBJECT_FORMAT),''),IFNULL(MAX(NODE_OUTPUT_KEYS),'')
      INTO DATA_OBJECT_ID,DATA_OBJECT_FORMAT,NODE_OUTPUT_KEYS
      FROM "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_dataObject_map_nodeOutputKeys_metaNodeID" 
      WHERE PIPELINE_MODEL_ID = :PIPELINE_MODEL_ID AND METADATA_NODE_ID = :METADATA_NODE_ID ;
   
      
     --Get the default MIN_SAFTY AND MX SAFTY INFO For the stock:
      SELECT IFNULL(MAX(T1.DEFAULT_VALUE),:MIN_SAFETY_DEFAULT) into MIN_SAFETY_DEFAULT
      FROM "sap.tm.trp.db.hrf.ruleManage::t_global_default_minMaxSafetyCapacity" T1
      WHERE T1.DEFAULT_KEY = :MIN_SAFETY_KEY;
    
      SELECT IFNULL(MAX(T1.DEFAULT_VALUE),:MAX_SAFETY_DEFAULT) into MAX_SAFETY_DEFAULT
      FROM "sap.tm.trp.db.hrf.ruleManage::t_global_default_minMaxSafetyCapacity" T1
      WHERE T1.DEFAULT_KEY = :MAX_SAFETY_KEY; 
    
	  SELECT IFNULL(MAX(T1.DEFAULT_VALUE),:MAX_CAPACITY_DEFAULT) into MAX_CAPACITY_DEFAULT
	  FROM "sap.tm.trp.db.hrf.ruleManage::t_global_default_minMaxSafetyCapacity" T1
	  WHERE T1.DEFAULT_KEY = :MAX_CAPACITY_KEY;
	  
	  RESOURCE_CATEGORY = SELECT T7.RESOURCE_CATEGORY
      	FROM "sap.tm.trp.db.pipeline::t_plan_execution" t2
      	INNER JOIN "sap.tm.trp.db.hrf::v_plan_model" T3 ON (T3.EXECUTION_ID = T2.ID)
      	INNER JOIN "sap.tm.trp.db.filter::v_filter_group_generic" AS T7 ON (T3.FILTER_GROUP_ID = T7.ID)
      	WHERE t2.ID = :PLAN_EXECUTION_ID;
	  
	  -- convert row to column for all the node data that need to generate alert
       OUTPUT_FOR_SD_RULE_TOTAL = 
               SELECT --DISTINCT NEED TO CHECK IF THIS DISTINCT IS NEEDED?
               T1.LOCATION_FILTER_TYPE AS LOCATION_TYPE,
               T1.LOCATION_NAME,
               T1.LOCATION_ID,

               T1.EQUIP_TYPE_ID,  
               T1.EQUIP_TYPE_NAME,
               T1.EQUIP_FILTER_TYPE AS EQUIP_TYPE_TYPE,
               
               T1.TIME_INTERVAL_ID,
               T1.TIME_INTERVAL AS TIME_STEP,
               T1.START_TIME, 
               T1.SEQUENCE,
               T1.TIME_FILTER_DESC,               
               
               T1.UNIT,
               IFNULL(T2.MAX_CAPACITY,:MAX_CAPACITY_DEFAULT) AS MAX_CAPACITY,
               IFNULL(T2.MAX_SAFETY,:MAX_SAFETY_DEFAULT) AS MAX_SAFETY_STOCK,
               IFNULL(T2.MIN_SAFETY,:MIN_SAFETY_DEFAULT) AS MIN_SAFETY_STOCK,
               (T1.STOCK + T1.SUPPLY - T1.DEMAND) AS BALANCE_STOCK_SUPPLY_DEMAND,
               (T1.SUPPLY - T1.DEMAND) AS BALANCE_SUPPLY_DEMAND,
               T1.DEMAND,
               T1.SUPPLY,
               T1.STOCK
              
               FROM 
               (
                   SELECT T0.LOCATION_ID,T0.LOCATION_NAME,T0.LOCATION_FILTER_TYPE,T0.EQUIP_TYPE_ID,T0.EQUIP_TYPE_NAME,T0.EQUIP_FILTER_TYPE,
                   T0.TIME_INTERVAL_ID,T0.START_TIME,T0.END_TIME,T0.SEQUENCE,T0.TIME_INTERVAL,T0.TIME_FILTER_DESC,T0.UNIT,
                   IFNULL(T1.SUPPLY,0) AS SUPPLY, IFNULL(T2.DEMAND,0) AS DEMAND, IFNULL(T3.STOCK,0) AS STOCK
                   FROM
                   (   SELECT DISTINCT 
                       LOCATION_ID,LOCATION_NAME,LOCATION_FILTER_TYPE,
	                   EQUIP_TYPE_ID, EQUIP_TYPE_NAME,EQUIP_FILTER_TYPE,
	                   TIME_INTERVAL_ID,START_TIME,END_TIME,SEQUENCE,TIME_INTERVAL,TIME_FILTER_DESC,UNIT
	                   FROM :EXE_RESULT
                   ) T0
                   LEFT OUTER JOIN  
                   (   SELECT
                       LOCATION_ID,
                       EQUIP_TYPE_ID,
                       TIME_INTERVAL_ID, 
                       TO_INTEGER(OUTPUT_VALUE) as SUPPLY
                       FROM :EXE_RESULT  
                       WHERE OUTPUT_KEY = 'SUPPLY'
                   ) T1 ON (
                        T0.LOCATION_ID = T1.LOCATION_ID
                        AND T0.EQUIP_TYPE_ID = T1.EQUIP_TYPE_ID
                        AND T0.TIME_INTERVAL_ID = T1.TIME_INTERVAL_ID)
                   LEFT OUTER JOIN 
                   (   SELECT
                       LOCATION_ID,
                       EQUIP_TYPE_ID,
                       TIME_INTERVAL_ID, 
                       TO_INTEGER(OUTPUT_VALUE) as DEMAND
                       FROM :EXE_RESULT   
                       WHERE OUTPUT_KEY = 'DEMAND'                    
                   ) T2 ON (
                        T0.LOCATION_ID = T2.LOCATION_ID
                        AND T0.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID
                        AND T0.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID)
                   LEFT OUTER JOIN 
                   (   SELECT
                       LOCATION_ID,
                       EQUIP_TYPE_ID,
                       TIME_INTERVAL_ID, 
                       TO_INTEGER(OUTPUT_VALUE) as STOCK
                       FROM :EXE_RESULT   
                       WHERE OUTPUT_KEY = 'STOCK'
                   ) T3 ON (
                        T0.LOCATION_ID = T3.LOCATION_ID
                        AND T0.EQUIP_TYPE_ID = T3.EQUIP_TYPE_ID
                        AND T0.TIME_INTERVAL_ID = T3.TIME_INTERVAL_ID)
               ) T1  
               LEFT OUTER JOIN ( 
                --  SELECT T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY,T1.LOCATION_ID,'N/A' AS EQUIP_CODE
                  SELECT T1.MIN_SAFETY,T1.MAX_SAFETY,T1.MAX_CAPACITY,T1.LOCATION_ID,EQUIP_CODE
                  FROM "sap.tm.trp.db.stock::t_stock_config" T1
                  INNER JOIN :RESOURCE_CATEGORY T2
                  ON T2.RESOURCE_CATEGORY = T1.RESOURCE_CATEGORY 
                  WHERE LOCATION_HEAD_FLAG = 1
               )T2 ON (T1.LOCATION_ID = T2.LOCATION_ID AND T1.EQUIP_TYPE_ID = T2.EQUIP_CODE
              );   
     
     
     
     -- bubble view input has no equip information, so need to sum up over the equip types  
     
     INPUT_FOR_SD_KPI_BUBBLE_RULE_LOC_HEAD =  
               SELECT --DISTINCT Here do not need distinct becuase it used group by and do not join any table
               :PLAN_EXECUTION_ID AS PLAN_EXECUTION_ID,
	           :PLAN_MODEL_ID AS PLAN_MODEL_ID,    
	           :PLAN_MODEL_TYPE_ID_TMP AS PLAN_MODEL_TYPE_ID,                   
	           :PLAN_MODEL_CATEGORY_ID AS PLAN_MODEL_CATEGORY_ID,                 
	           :FILTER_TYPE AS FILTER_TYPE,
	           :FILTER_GROUP_ID AS FILTER_GROUP_ID,
	           :PIPELINE_MODEL_ID AS PIPELINE_MODEL_ID,
	           :DEFAULT_NODE_ID AS NODE_ID,
	           :DEFAULT_NODE_NAME AS NODE_NAME,
	           :RESULT_VISIBLE AS  NODE_VISIBLE,
	           :NODE_OUTPUT_KEYS AS NODE_OUTPUT_KEYS,
	           :METADATA_NODE_ID AS METADATA_NODE_ID,
	           :DATA_OBJECT_FORMAT AS DATA_OBJECT_FORMAT,
	           
	           T11.LOCATION_ID,
	           T11.LOCATION_NAME,
			   T11.LOCATION_TYPE,
	           
	           'N/A'as EQUIP_TYPE_ID,
	           'N/A' as EQUIP_TYPE_NAME,
			   -1 as EQUIP_TYPE_TYPE,
	           
	           T11.TIME_INTERVAL_ID,
			   T11.TIME_FILTER_DESC,
	           T11.SEQUENCE,
	           T11.START_TIME,
	           T11.TIME_STEP,
	           
	           T11.STOCK,
		       T11.SUPPLY,	
			   T11.DEMAND,			     
			   T11.BALANCE_SUPPLY_DEMAND,
			   T11.BALANCE_STOCK_SUPPLY_DEMAND,
			   T11.MIN_SAFETY_STOCK,
			   T11.MAX_SAFETY_STOCK,
			   T11.MAX_CAPACITY,
			   0 as RATE,
			   0 as QUANTITY,
			   0 as RESERV1,
			   0 as RESERV2,
			   T11.UNIT,
			   :SD_FLAG AS SD_KPI_FLAG
               FROM	           
               (  SELECT-- T1.NODE_OUTPUT_KEYS,
	              T1.LOCATION_ID,
	              T1.LOCATION_NAME,
	              T1.LOCATION_TYPE,
	              T1.TIME_INTERVAL_ID,
	              T1.TIME_FILTER_DESC,
	              T1.SEQUENCE,
	              T1.START_TIME,
	              T1.TIME_STEP,
	              T1.UNIT,
	              T1.MIN_SAFETY_STOCK,
		          T1.MAX_SAFETY_STOCK,
		          T1.MAX_CAPACITY,
                  SUM(T1.STOCK) AS STOCK,
		          SUM(T1.SUPPLY) AS SUPPLY,	
		          SUM(T1.DEMAND) AS DEMAND,			     
		          SUM(T1.BALANCE_SUPPLY_DEMAND) AS BALANCE_SUPPLY_DEMAND,
		          SUM(T1.BALANCE_STOCK_SUPPLY_DEMAND) AS BALANCE_STOCK_SUPPLY_DEMAND
                  FROM :OUTPUT_FOR_SD_RULE_TOTAL T1
                  GROUP BY -- T1.NODE_OUTPUT_KEYS,
                            T1.LOCATION_ID,
				            T1.LOCATION_NAME,
				            T1.LOCATION_TYPE,
				            T1.TIME_INTERVAL_ID,
				            T1.TIME_FILTER_DESC,
				            T1.SEQUENCE,
				            T1.START_TIME,
				            T1.TIME_STEP,
				            T1.UNIT,
				            T1.MIN_SAFETY_STOCK,
					        T1.MAX_SAFETY_STOCK,
					        T1.MAX_CAPACITY
		       ) T11;
		       
		        
       INPUT_FOR_SD_KPI_BUBBLE_RULE_FOR_EACH_RESOURCE_TYPE =  
               SELECT --DISTINCT Here do not need distinct becuase it used group by and do not join any table
               :PLAN_EXECUTION_ID AS PLAN_EXECUTION_ID,
	           :PLAN_MODEL_ID AS PLAN_MODEL_ID,    
	           :PLAN_MODEL_TYPE_ID_TMP AS PLAN_MODEL_TYPE_ID,                   
	           :PLAN_MODEL_CATEGORY_ID AS PLAN_MODEL_CATEGORY_ID,                 
	           :FILTER_TYPE AS FILTER_TYPE,
	           :FILTER_GROUP_ID AS FILTER_GROUP_ID,
	           :PIPELINE_MODEL_ID AS PIPELINE_MODEL_ID,
	           :DEFAULT_NODE_ID AS NODE_ID,
	           :DEFAULT_NODE_NAME AS NODE_NAME,
	           :RESULT_VISIBLE AS  NODE_VISIBLE,
	           :NODE_OUTPUT_KEYS AS NODE_OUTPUT_KEYS,
	           :METADATA_NODE_ID AS METADATA_NODE_ID,
	           :DATA_OBJECT_FORMAT AS DATA_OBJECT_FORMAT,
	           
	           T11.LOCATION_ID,
	           T11.LOCATION_NAME,
			   T11.LOCATION_TYPE,
	           
	           --'N/A'as EQUIP_TYPE_ID,
	           T11.EQUIP_TYPE_ID,
	           --'N/A' as EQUIP_TYPE_NAME,
	           T11.EQUIP_TYPE_NAME,
			   ---1 as EQUIP_TYPE_TYPE,
	           T11.EQUIP_TYPE_TYPE,
	           T11.TIME_INTERVAL_ID,
			   T11.TIME_FILTER_DESC,
	           T11.SEQUENCE,
	           T11.START_TIME,
	           T11.TIME_STEP,
	           
	           T11.STOCK,
		       T11.SUPPLY,	
			   T11.DEMAND,			     
			   T11.BALANCE_SUPPLY_DEMAND,
			   T11.BALANCE_STOCK_SUPPLY_DEMAND,
			   T11.MIN_SAFETY_STOCK,
			   T11.MAX_SAFETY_STOCK,
			   T11.MAX_CAPACITY,
			   0 as RATE,
			   0 as QUANTITY,
			   0 as RESERV1,
			   0 as RESERV2,
			   T11.UNIT,
			   :SD_FLAG AS SD_KPI_FLAG
               FROM	           
               (  SELECT-- T1.NODE_OUTPUT_KEYS,
	              T1.LOCATION_ID,
	              T1.LOCATION_NAME,
	              T1.LOCATION_TYPE,
	              T1.EQUIP_TYPE_ID,
	              T1.EQUIP_TYPE_NAME,
	              T1.EQUIP_TYPE_TYPE,
	              T1.TIME_INTERVAL_ID,
	              T1.TIME_FILTER_DESC,
	              T1.SEQUENCE,
	              T1.START_TIME,
	              T1.TIME_STEP,
	              T1.UNIT,
	              T1.MIN_SAFETY_STOCK,
		          T1.MAX_SAFETY_STOCK,
		          T1.MAX_CAPACITY,
                  SUM(T1.STOCK) AS STOCK,
		          SUM(T1.SUPPLY) AS SUPPLY,	
		          SUM(T1.DEMAND) AS DEMAND,			     
		          SUM(T1.BALANCE_SUPPLY_DEMAND) AS BALANCE_SUPPLY_DEMAND,
		          SUM(T1.BALANCE_STOCK_SUPPLY_DEMAND) AS BALANCE_STOCK_SUPPLY_DEMAND
                  FROM :OUTPUT_FOR_SD_RULE_TOTAL T1
                  GROUP BY -- T1.NODE_OUTPUT_KEYS,
                            T1.LOCATION_ID,
				            T1.LOCATION_NAME,
				            T1.LOCATION_TYPE,
				            T1.EQUIP_TYPE_ID,
				            T1.EQUIP_TYPE_NAME,
				            T1.EQUIP_TYPE_TYPE,
				            T1.TIME_INTERVAL_ID,
				            T1.TIME_FILTER_DESC,
				            T1.SEQUENCE,
				            T1.START_TIME,
				            T1.TIME_STEP,
				            T1.UNIT,
				            T1.MIN_SAFETY_STOCK,
					        T1.MAX_SAFETY_STOCK,
					        T1.MAX_CAPACITY
		       ) T11;
		    
		    
		    INPUT_FOR_SD_KPI_BUBBLE_RULE =  
		    SELECT 
               T1.PLAN_EXECUTION_ID,
	           T1.PLAN_MODEL_ID,    
	           T1.PLAN_MODEL_TYPE_ID,                   
	           T1.PLAN_MODEL_CATEGORY_ID,                 
	           T1.FILTER_TYPE,
	           T1.FILTER_GROUP_ID,
	           T1.PIPELINE_MODEL_ID,
	           T1.NODE_ID,
	           T1.NODE_NAME,
	           T1.NODE_VISIBLE,
	           T1.NODE_OUTPUT_KEYS,
	           T1.METADATA_NODE_ID,
	           T1.DATA_OBJECT_FORMAT,
	           
	           T1.LOCATION_ID,
	           T1.LOCATION_NAME,
			   T1.LOCATION_TYPE,
	           
	           T1.EQUIP_TYPE_ID,
	           T1.EQUIP_TYPE_NAME,
			   T1.EQUIP_TYPE_TYPE,
	           
	           T1.TIME_INTERVAL_ID,
			   T1.TIME_FILTER_DESC,
	           T1.SEQUENCE,
	           T1.START_TIME,
	           T1.TIME_STEP,
	           
	           T1.STOCK,
		       T1.SUPPLY,	
			   T1.DEMAND,			     
			   T1.BALANCE_SUPPLY_DEMAND,
			   T1.BALANCE_STOCK_SUPPLY_DEMAND,
			   T1.MIN_SAFETY_STOCK,
			   T1.MAX_SAFETY_STOCK,
			   T1.MAX_CAPACITY,
			   T1.RATE,
			   T1.QUANTITY,
			   T1.RESERV1,
			   T1.RESERV2,
			   T1.UNIT,
			   T1.SD_KPI_FLAG
			   FROM :INPUT_FOR_SD_KPI_BUBBLE_RULE_FOR_EACH_RESOURCE_TYPE T1
			   UNION ALL
			   SELECT 
               T2.PLAN_EXECUTION_ID,
	           T2.PLAN_MODEL_ID,    
	           T2.PLAN_MODEL_TYPE_ID,                   
	           T2.PLAN_MODEL_CATEGORY_ID,                 
	           T2.FILTER_TYPE,
	           T2.FILTER_GROUP_ID,
	           T2.PIPELINE_MODEL_ID,
	           T2.NODE_ID,
	           T2.NODE_NAME,
	           T2.NODE_VISIBLE,
	           T2.NODE_OUTPUT_KEYS,
	           T2.METADATA_NODE_ID,
	           T2.DATA_OBJECT_FORMAT,
	           
	           T2.LOCATION_ID,
	           T2.LOCATION_NAME,
			   T2.LOCATION_TYPE,
	           
	           T2.EQUIP_TYPE_ID,
	           T2.EQUIP_TYPE_NAME,
			   T2.EQUIP_TYPE_TYPE,
	           
	           T2.TIME_INTERVAL_ID,
			   T2.TIME_FILTER_DESC,
	           T2.SEQUENCE,
	           T2.START_TIME,
	           T2.TIME_STEP,
	           
	           T2.STOCK,
		       T2.SUPPLY,	
			   T2.DEMAND,			     
			   T2.BALANCE_SUPPLY_DEMAND,
			   T2.BALANCE_STOCK_SUPPLY_DEMAND,
			   T2.MIN_SAFETY_STOCK,
			   T2.MAX_SAFETY_STOCK,
			   T2.MAX_CAPACITY,
			   T2.RATE,
			   T2.QUANTITY,
			   T2.RESERV1,
			   T2.RESERV2,
			   T2.UNIT,
			   T2.SD_KPI_FLAG
               FROM :INPUT_FOR_SD_KPI_BUBBLE_RULE_LOC_HEAD T2;
               
			  
        
         SELECT IFNULL(MAX(T1.SP),'') INTO RULE_SP
	     FROM "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_rule" T1
	     INNER JOIN  "sap.tm.trp.db.hrf.ruleManage::t_planBubbleView_assigned_rule" T2
	     ON T1.RULE_ID = T2.RULE_ID AND 
	     T2.PLAN_BUBBLE_VIEW_ID = :PLAN_BUBBLE_VIEW;
	     
	      IF (:RULE_SP = '') THEN
             RETURN;
          END IF;
	      
		 TRUNCATE TABLE "SAP_TM_TRP"."sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_cus_inputGlobalTemp";
		 TRUNCATE TABLE "SAP_TM_TRP"."sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_outputGlobalTemp";
		 
		 INSERT INTO "sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_cus_inputGlobalTemp"
	     (SELECT 
					 PLAN_EXECUTION_ID,
					 PLAN_MODEL_ID,
					 PLAN_MODEL_TYPE_ID,
					 PLAN_MODEL_CATEGORY_ID,
					 FILTER_TYPE,
					 FILTER_GROUP_ID,
					 PIPELINE_MODEL_ID,
					 NODE_ID,
					 NODE_NAME,
					 NODE_VISIBLE,
					 NODE_OUTPUT_KEYS,
					 METADATA_NODE_ID,
					 DATA_OBJECT_FORMAT,
					 
					 LOCATION_ID,
					 LOCATION_NAME,
					 LOCATION_TYPE,
					 EQUIP_TYPE_ID,
					 EQUIP_TYPE_NAME,
					 EQUIP_TYPE_TYPE,  
					   
					 TIME_INTERVAL_ID,
					 TIME_FILTER_DESC,
				     SEQUENCE,
				     START_TIME,	
					 TIME_STEP,	     	     
						
					 STOCK,
					 SUPPLY,	
					 DEMAND,			     
				     BALANCE_SUPPLY_DEMAND,
					 BALANCE_STOCK_SUPPLY_DEMAND,
					  		
					 MIN_SAFETY_STOCK,
					 MAX_SAFETY_STOCK,
					 MAX_CAPACITY,
					 
					 RATE,
					 QUANTITY,
					 RESERV1,
					 RESERV2,
					 
					 UNIT,
					 SD_KPI_FLAG     
	     FROM :INPUT_FOR_SD_KPI_BUBBLE_RULE);
	
	     SCRIPT := 'call '|| :RULE_SP ||'("sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_cus_inputGlobalTemp",
	                                      "sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_outputGlobalTemp",
	                                      "sap.tm.trp.db.hrf.ruleManage::t_hrf_actions_results") with overview'; 
	
	     EXECUTE IMMEDIATE(:SCRIPT); 
	     
	     -- get range values for normalizing 
	     SELECT MAX(ALERT_SCORE) - MIN(ALERT_SCORE) + 1, MIN(ALERT_SCORE) 
	     INTO ALERT_SCORE_RANGE, ALERT_SCORE_MIN
	     FROM 
	     (
	         SELECT ABS(SURPLUS_DEFICIT_NUM) AS ALERT_SCORE
	         FROM "sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_outputGlobalTemp" 
	     );  
	     
	  
	     
	    tmp_planBubbleView_ouput = 
	           SELECT  
	           PLAN_EXECUTION_ID,
	           NODE_ID,
	           LOCATION_ID,
	           LOCATION_TYPE,
	           EQUIP_TYPE_ID,
	           EQUIP_TYPE_TYPE,
	           SEQUENCE,
	           ROW_ID,
	           MESSAGE,
	           SURPLUS_DEFICIT_NUM,
	           THRESHOLD,
	           1 AS ALERT_NUM,
	           CASE WHEN (UPPER(MESSAGE) = 'SURPLUS' OR UPPER(MESSAGE)= 'DEFICIT')
	              THEN (ABS(SURPLUS_DEFICIT_NUM) - :ALERT_SCORE_MIN)/:ALERT_SCORE_RANGE * 99 + 1
	           ELSE 0
	           END AS ALERT_SCORE_NORMALIZED           
	           FROM "sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_outputGlobalTemp";
	           

	       
	     INSERT INTO "sap.tm.trp.db.hrf.planBubble::t_SD_KPI_cus_BubbleRule_output"
	     
	           SELECT  
					 T1.PLAN_EXECUTION_ID,
					 T1.PLAN_MODEL_ID,
					 T1.PLAN_MODEL_TYPE_ID,
					 T1.PLAN_MODEL_CATEGORY_ID,
					 T1.FILTER_TYPE,
					 T1.FILTER_GROUP_ID,
					 T1.PIPELINE_MODEL_ID,
					 T1.NODE_ID,
					 T1.NODE_NAME,
					 T1.NODE_VISIBLE,
					 T1.NODE_OUTPUT_KEYS,
					 T1.METADATA_NODE_ID,
					 T1.DATA_OBJECT_FORMAT,
					 
					 T1.LOCATION_ID,
					 T1.LOCATION_NAME,
					 T1.LOCATION_TYPE,
					 T1.EQUIP_TYPE_ID,
					 T1.EQUIP_TYPE_NAME,
					 T1.EQUIP_TYPE_TYPE,  
					   
					 T1.TIME_INTERVAL_ID,
					 T1.TIME_FILTER_DESC,
				     T1.SEQUENCE,
				     T1.START_TIME,	
					 T1.TIME_STEP,	     	     
						
					 T1.STOCK,
					 T1.SUPPLY,	
					 T1.DEMAND,			     
				     T1.BALANCE_SUPPLY_DEMAND,
					 T1.BALANCE_STOCK_SUPPLY_DEMAND,
					  		
					 T1.MIN_SAFETY_STOCK,
					 T1.MAX_SAFETY_STOCK,
					 T1.MAX_CAPACITY,
					 
					 T1.RATE,
					 T1.QUANTITY,
					 T1.RESERV1,
					 T1.RESERV2,
					 
					 T1.UNIT,
					 T1.SD_KPI_FLAG,
					 	 
	                 'SDKPIPlanBubble rule' as RULE_NAME,
	                 T2.ROW_ID,
	                 T2.MESSAGE,   
	                 T2.SURPLUS_DEFICIT_NUM,
	                 T2.THRESHOLD,
	                 CASE WHEN  SURPLUS_DEFICIT_NUM > 0
	                         THEN ROUND(SURPLUS_DEFICIT_NUM/(MAX_CAPACITY+1)*100,:NUM_AMOUNT_DECIMAL_POINT)
	                      WHEN SURPLUS_DEFICIT_NUM < 0 
	                         THEN ROUND(ABS(SURPLUS_DEFICIT_NUM)/(MIN_SAFETY_STOCK+1)*100,:NUM_AMOUNT_DECIMAL_POINT)
	                      ELSE 0
	                 END as SURPLUS_DEFICIT_PERCENT,
	                 T2.ALERT_SCORE_NORMALIZED,
	                 T2.ALERT_NUM,
	                 T2.ALERT_SCORE_NORMALIZED AS ALERT_AGGREGATED_SCORE
	          FROM :INPUT_FOR_SD_KPI_BUBBLE_RULE T1 
	          LEFT OUTER JOIN :tmp_planBubbleView_ouput T2
	          ON (T1.PLAN_EXECUTION_ID = T2.PLAN_EXECUTION_ID AND 
	              T1.NODE_ID = T2.NODE_ID and 
	              T1.LOCATION_ID = T2.LOCATION_ID and 
	              T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID and 
	              T1.SEQUENCE = T2.SEQUENCE) ;
	     
	    
	
        SELECT COUNT(1) INTO OUT_REC_BUBBLE 
	    FROM "sap.tm.trp.db.hrf.planBubble::t_SD_KPI_cus_BubbleRule_output" T1
	    WHERE T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID;
        
      
           
       OUT_PLAN_MODEL_TYPE_ID := :PLAN_MODEL_TYPE_ID_TMP;
	   
	   
    TRUNCATE TABLE "SAP_TM_TRP"."sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_cus_inputGlobalTemp";
    TRUNCATE TABLE "SAP_TM_TRP"."sap.tm.trp.db.hrf.planBubble::t_hrf_planBubbleView_outputGlobalTemp";
END;

