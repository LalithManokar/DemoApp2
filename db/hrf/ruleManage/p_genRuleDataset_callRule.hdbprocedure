PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.hrf.ruleManage::p_genRuleDataset_callRule" (
IN  PLAN_EXECUTION_ID BIGINT,
OUT OUT_PLAN_MODEL_TYPE_ID INTEGER,
OUT OUTPUT_RECORDS INTEGER,
OUT OUT_REC_BUBBLE INTEGER
) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA "SAP_TM_TRP"
	AS
BEGIN
    DECLARE PLAN_MODEL_ID BIGINT;
    DECLARE PLAN_MODEL_TYPE_ID_TMP INTEGER;
    DECLARE FILTER_TYPE INTEGER;
    DECLARE NODE_BINDING_RULE INTEGER;   
    DECLARE SP VARCHAR(500);
--    DECLARE SP_PARAM VARCHAR(500);
    DECLARE SCRIPT VARCHAR(5000);
    DECLARE EXECUTION_TIME TIMESTAMP;
    DECLARE GLOBAL_TEMPORARY_TABLE_EXIST INTEGER;
    
    DECLARE OUTPUT_KEY_SUPPLY VARCHAR(20) := 'SUPPLY';
    DECLARE OUTPUT_KEY_DEMAND VARCHAR(20) := 'DEMAND';
    DECLARE OUTPUT_KEY_STOCK VARCHAR(20) := 'STOCK';
    
 /*   DECLARE OUTPUT_KEY_IDLE_RATE VARCHAR(20) := 'IDLE_RATE';  
    DECLARE OUTPUT_KEY_STORAGE_COST VARCHAR(20) := 'STORAGE_COST';   
    DECLARE OUTPUT_KEY_DWELL_TIME VARCHAR(20) := 'DWELL_TIME';  
    DECLARE OUTPUT_KEY_IMPORT_EXPORT VARCHAR(20) := 'IMPORT_EXPORT_VOLUME';
    */
    DECLARE OUTPUT_KEY_RATE VARCHAR(20) := 'RATE';  
    DECLARE OUTPUT_KEY_QUANTITY VARCHAR(20) := 'QUANTITY';   
    DECLARE OUTPUT_KEY_RESERV1 VARCHAR(20) := 'RESERV1';  
    DECLARE OUTPUT_KEY_RESERV2 VARCHAR(20) := 'RESERV2';   

    
    DECLARE SD_FLAG VARCHAR(8) := 'SD';
    DECLARE KPI_FLAG VARCHAR(8) := 'KPI';
    
    DECLARE TMP_NODE_ID BIGINT;
    DECLARE TMP_LOCATION_TYPE INTEGER;
    
    DECLARE NUM_AMOUNT_DECIMAL_POINT INTEGER := 2;
    --01_01_distinct (NODE_ID,NAME,DATA_OBJECT_FORMAT, SP) for PLAN_EXECUTION_ID 
    -- get rule sp info for each plan_model node
    -- plan_model  <-----> alert_rule_group
    -- alert_rule_groups <------> alert rules
    -- alert rule type <-----------> data object
     
      DECLARE CURSOR DISTINCT_FILTER_NODE_RULE_CURSOR FOR
          SELECT DISTINCT T4.ID AS NODE_ID, 
                          T4.NAME AS NODE_NAME, 
                          T4.RESULT_VISIBLE AS NODE_VISIBLE,
                          T5.DATA_OBJECT_ID, 
                          T5.DATA_OBJECT_FORMAT, 
                          T5.METADATA_NODE_ID,
                          T5.NODE_OUTPUT_KEYS,
                          T6.SP
          FROM  "sap.tm.trp.db.pipeline::t_pipeline_output_dataset" T1 
          INNER JOIN "sap.tm.trp.db.pipeline::t_plan_execution" T2 
          ON (T1.PLAN_EXECUTION_ID = T2.ID and 
              T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID)
        --  INNER JOIN "sap.tm.trp.db.pipeline::t_plan_model" T3
        --  ON (T2.PLAN_MODEL_ID = T3.ID)
          INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T4 
          ON (T1.NODE_ID = T4.ID and
              T4.RESULT_VISIBLE = 1) 
        --  INNER JOIN "sap.tm.trp.db.alert.alert_rule_group::t_alert_ruleType_dataObject_map_nodeName" T5 
        --  ON (T4.NAME = T5.PIPELINE_NODE_NAME)
          INNER JOIN "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_dataObject_map_nodeOutputKeys_metaNodeID" T5
          ON (T4.METADATA_NODE_ID = T5.METADATA_NODE_ID and 
              T4.PIPELINE_MODEL_ID = T5.PIPELINE_MODEL_ID)
       --   INNER JOIN "sap.tm.trp.db.alert::v_pipeline_model_alert_rule_group_rule_dataObject" T6
          INNER JOIN "sap.tm.trp.db.hrf.ruleManage::v_pipeline_model_rule_group_rule_dataObject" T6
          ON (T2.ID = T6.EXECUTION_ID and 
             T5.DATA_OBJECT_ID = T6.DATA_OBJECT_ID); 
              
          insert into "sap.tm.trp.db.hrf.ruleManage::t_rule_dispatch_node_to_sp"
          ( SELECT DISTINCT :PLAN_EXECUTION_ID AS PLAN_EXECUTION_ID,
                          T4.ID AS NODE_ID, 
                          T4.NAME AS NODE_NAME,
                          T6.SP
          FROM  "sap.tm.trp.db.pipeline::t_pipeline_output_dataset" T1 
          INNER JOIN "sap.tm.trp.db.pipeline::t_plan_execution" T2 
          ON (T1.PLAN_EXECUTION_ID = T2.ID and 
              T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID)
       --   INNER JOIN "sap.tm.trp.db.pipeline::t_plan_model" T3
       --   ON (T2.PLAN_MODEL_ID = T3.ID)
          INNER JOIN "sap.tm.trp.db.pipeline::t_pipeline_node" T4 
          ON (T1.NODE_ID = T4.ID and
              T4.RESULT_VISIBLE = 1) 
       --   INNER JOIN "sap.tm.trp.db.alert.alert_rule_group::t_alert_ruleType_dataObject_map_nodeName" T5 
       --   ON (T4.NAME = T5.PIPELINE_NODE_NAME)
          INNER JOIN "sap.tm.trp.db.hrf.ruleManage.ruleGroup::t_ruleType_dataObject_map_nodeOutputKeys_metaNodeID" T5
          ON (T4.METADATA_NODE_ID = T5.METADATA_NODE_ID and 
              T4.PIPELINE_MODEL_ID = T5.PIPELINE_MODEL_ID)
       --   INNER JOIN "sap.tm.trp.db.alert::v_pipeline_model_alert_rule_group_rule_dataObject" T6
          INNER JOIN "sap.tm.trp.db.hrf.ruleManage::v_pipeline_model_rule_group_rule_dataObject" T6
          ON (T2.ID = T6.EXECUTION_ID and 
             T5.DATA_OBJECT_ID = T6.DATA_OBJECT_ID)
          );  
          

                  
     -- get plan_model_id, filter type, and interval info 
     PLAN_INFO =  SELECT t2.ID AS PLAN_EXECUTION_ID, 
                         T2.PLAN_MODEL_ID, 
                         EXECUTE_ON, 
                         PLAN_MODEL_TYPE_ID, 
                         PLAN_MODEL_TYPE_ID as PLAN_MODEL_CATEGORY_ID, 
                         FILTER_GROUP_ID, 
                         PIPELINE_MODEL_ID,
		                 CASE T7.LOCATION_TYPE || T7.EQUI_TYPE
		                  WHEN '11' THEN 1
		                  WHEN '31' THEN 2
		                  WHEN '51' THEN 3
		                  WHEN '21' THEN 4
		                  WHEN '41' THEN 5
		                  WHEN '61' THEN 6
		                  WHEN '12' THEN 7
		                  WHEN '32' THEN 8
		                  WHEN '52' THEN 9
		                  WHEN '22' THEN 10
		                  WHEN '42' THEN 11
		                  WHEN '62' THEN 12
		                 END AS FILTER_TYPE
      FROM "sap.tm.trp.db.pipeline::t_plan_execution" t2
      --INNER JOIN "sap.tm.trp.db.pipeline::t_plan_model" T3 ON (T2.PLAN_MODEL_ID = T3.ID)
      INNER JOIN "sap.tm.trp.db.hrf::v_plan_model" T3 ON (T2.ID = T3.EXECUTION_ID)
      INNER JOIN "sap.tm.trp.db.filter::v_filter_group" AS T7 ON (T3.FILTER_GROUP_ID = T7.ID)
      where t2.ID = :PLAN_EXECUTION_ID;


     -- get LOCATION_TYPE 
      SELECT T7.LOCATION_TYPE INTO TMP_LOCATION_TYPE
      FROM "sap.tm.trp.db.pipeline::t_plan_execution" t2
      INNER JOIN "sap.tm.trp.db.hrf::v_plan_model" T3 ON (T2.ID = T3.EXECUTION_ID)
      INNER JOIN "sap.tm.trp.db.filter::v_filter_group" AS T7 ON (T3.FILTER_GROUP_ID = T7.ID)
      where t2.ID = :PLAN_EXECUTION_ID;


      SELECT PLAN_MODEL_ID, PLAN_MODEL_TYPE_ID,EXECUTE_ON , FILTER_TYPE INTO PLAN_MODEL_ID, PLAN_MODEL_TYPE_ID_TMP, EXECUTION_TIME, FILTER_TYPE 
      FROM :PLAN_INFO;
    
    

                    
      INTERVAL_INFO = SELECT DISTINCT T1.TIME_INTERVAL_ID, 
                                      T3.DESC AS TIME_FILTER_DESC, 
                                      T1.SEQUENCE,
                                      T1.START_TIME, 
                                      T1.TIME_INTERVAL as TIME_STEP 
                      FROM "sap.tm.trp.db.pipeline::t_pipeline_output_dataset" T1
                      INNER JOIN "sap.tm.trp.db.filter::t_time_filter_interval" T2 ON (T1.TIME_INTERVAL_ID = T2.ID )
                      INNER JOIN "sap.tm.trp.db.filter::t_time_filter" T3 ON (T2.TIME_FILTER_ID = T3.ID) 
                      WHERE T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID;         
  
    --02_OUT_TBL(...LOCATION_NAME,...EQUIP_TYPE_NAME,..MIN_SAFETY_STOCK,MAX_SAFETY_STOCK) for PLAN_EXECUTION_ID from v_stock_minSafety_maxSafety_locName_eqName
   --call "sap.tm.trp.db.alert::p_get_locationEquip_name_minMaxSafety"(:PLAN_EXECUTION_ID,:FILTER_TYPE, OUT_TBL);
     call "sap.tm.trp.db.hrf.ruleManage::p_get_locationEquip_name_minMaxSafetyCapacity"(:PLAN_EXECUTION_ID,:FILTER_TYPE, OUT_TBL);
     
     call "sap.tm.trp.db.hrf.ruleManage::p_get_location_minMaxSafetyCapacity"(:PLAN_EXECUTION_ID,:TMP_LOCATION_TYPE, OUT_TBL_LOC);
     
   EXECUTION_TBL =  SELECT NODE_ID,
                           LOCATION_ID,
                           EQUIP_TYPE_ID,
                           T1.TIME_INTERVAL_ID,                  
                           OUTPUT_KEY,
                           ROUND(TO_DOUBLE(OUTPUT_VALUE),:NUM_AMOUNT_DECIMAL_POINT) as OUTPUT_VALUE,
                           UNIT
                    FROM "sap.tm.trp.db.pipeline::t_pipeline_output_dataset"   T1
                    inner join :INTERVAL_INFO T2
                    on T1.TIME_INTERVAL_ID = T2.TIME_INTERVAL_ID and            
                       T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID;
           
    --03_for each distinct (NODE_ID,NAME,DATA_OBJECT_FORMAT) 
    --   do 03_01_NODE_RULE_TABLE for (PLAN_MODEL_ID,FILTER_TYPE,NODE_ID,NAME,DATA_OBJECT_FORMAT) 
    --      03_02_compose SUPPLY_DEMAND_TABLE/SUPPLY_TABLE/DEMAND_TABLE/STOCK_TABLE according to NAME(SD/TOR_S,FS/TOR_D,FD/STOCK) and (mockup not exist culumns:STOCK/SUPPLY/DEMAND)
    --      03_03_get OUTPUT_FOR_DT(calcu culumns:BALANCE_SUPPLY_DEMAND,BALANCE_STOCK_SUPPLY_DEMAND)
    --      03_04_get SP from PLAN_MODEL_NODE_RULE_DATAOBJECT_TAB for (PLAN_MODEL_ID,FILTER_TYPE,NODE_ID,NAME,DATA_OBJECT_FORMAT)
    --      03_05_call DT_storage_procedure SP
    --      03_06_insert output of DT_SP into table  
    --end for   
    FOR NODE_RULE_GROUP as DISTINCT_FILTER_NODE_RULE_CURSOR DO
    --03_01_NODE_RULE_TABLE for (PLAN_MODEL_ID,FILTER_TYPE,NODE_ID,NAME,DATA_OBJECT_FORMAT) 
         NODE_BINDING_RULE := 0;
                
         NODE_RULE_TABLE = SELECT * 
                           FROM :EXECUTION_TBL
                           WHERE NODE_ID = NODE_RULE_GROUP.NODE_ID;      
                           
   
         
      --03_02_compose SUPPLY_DEMAND_TABLE/SUPPLY_TABLE/DEMAND_TABLE/STOCK_TABLE according to NAME(SD/TOR_S,FS/TOR_D,FD/STOCK) 
      IF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 5 )
      THEN
         NODE_BINDING_RULE := 1;
         DATA_TABLE =           
                  select T11.LOCATION_ID,
                         T11.EQUIP_TYPE_ID,
                         T11.TIME_INTERVAL_ID, 
                         0 AS STOCK,
                         --IFNULL(T11.SUPPLY,0) AS SUPPLY,
                         --IFNULL(T12.DEMAND,0) AS DEMAND
                         T11.SUPPLY,
                         T12.DEMAND,
                         T11.UNIT
                   from 
                   (select 
                           LOCATION_ID,
                           EQUIP_TYPE_ID,
                           TIME_INTERVAL_ID,                         
                           OUTPUT_VALUE as SUPPLY,
                           UNIT
                    from  :NODE_RULE_TABLE where OUTPUT_KEY = 'SUPPLY' ) as T11
                    inner join
                   (select LOCATION_ID,
                           EQUIP_TYPE_ID,
                           TIME_INTERVAL_ID,
                           OUTPUT_VALUE as DEMAND
                    from :NODE_RULE_TABLE where OUTPUT_KEY = 'DEMAND' ) as T12
                    on ( T11.LOCATION_ID = T12.LOCATION_ID and
                         T11.EQUIP_TYPE_ID = T12.EQUIP_TYPE_ID and 
                         T11.TIME_INTERVAL_ID = T12.TIME_INTERVAL_ID);

      --03_02_compose SUPPLY_DEMAND_TABLE/SUPPLY_TABLE/DEMAND_TABLE/STOCK_TABLE according to NAME(SD/TOR_S,FS/TOR_D,FD/STOCK) and (mockup not exist culumns:STOCK/SUPPLY/DEMAND)
        ELSEIF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 3 )
        THEN
            NODE_BINDING_RULE := 1;
            DATA_TABLE =           
                    select                          
                         LOCATION_ID,
                         EQUIP_TYPE_ID,
                         TIME_INTERVAL_ID,
                         0 AS STOCK,
                         --IFNULL(OUTPUT_VALUE,0) AS SUPPLY,
                         OUTPUT_VALUE AS SUPPLY,
                         0 AS DEMAND,
                         UNIT
                    from  :NODE_RULE_TABLE T1 
                    where T1.OUTPUT_KEY = 'SUPPLY' ;   
                     
      --03_02_compose SUPPLY_DEMAND_TABLE/SUPPLY_TABLE/DEMAND_TABLE/STOCK_TABLE according to NAME(SD/TOR_S,FS/TOR_D,FD/STOCK) and (mockup not exist culumns:STOCK/SUPPLY/DEMAND)     
       ELSEIF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 4 )
       THEN
        NODE_BINDING_RULE := 1;
        DATA_TABLE =   SELECT        
                         LOCATION_ID,
                         EQUIP_TYPE_ID,
                         TIME_INTERVAL_ID,
                         0 AS STOCK,
                         0 AS SUPPLY,
                         --IFNULL(OUTPUT_VALUE,0) AS DEMAND
                         OUTPUT_VALUE AS DEMAND,
                         UNIT
                    from  :NODE_RULE_TABLE T1 
                    where T1.OUTPUT_KEY = 'DEMAND' ;  

       --03_02_compose SUPPLY_DEMAND_TABLE/SUPPLY_TABLE/DEMAND_TABLE/STOCK_TABLE according to NAME(SD/TOR_S,FS/TOR_D,FD/STOCK) and (mockup not exist culumns:STOCK/SUPPLY/DEMAND)
      ELSEIF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 1 )
      THEN
      NODE_BINDING_RULE := 1;
      DATA_TABLE =  select
                         LOCATION_ID,                         
                         EQUIP_TYPE_ID,
                         TIME_INTERVAL_ID,
                         --IFNULL(OUTPUT_VALUE,0) AS STOCK,
                         OUTPUT_VALUE AS STOCK,
                         0 AS SUPPLY,
                         0 AS DEMAND,
                         UNIT
                    from  :NODE_RULE_TABLE T1 
                    where T1.OUTPUT_KEY = 'STOCK' ;

      --03_02_compose SUPPLY_DEMAND_TABLE/SUPPLY_TABLE/DEMAND_TABLE/STOCK_TABLE according to NAME(SD/TOR_S,FS/TOR_D,FD/STOCK) and (mockup not exist culumns:STOCK/SUPPLY/DEMAND)
      ELSEIF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 2 )
      THEN
      NODE_BINDING_RULE := 1;
         DATA_TABLE =           
                  select T11.LOCATION_ID,                         
                         T11.EQUIP_TYPE_ID,                      
                         T11.TIME_INTERVAL_ID, 
                         --IFNULL(T13.STOCK,0) AS STOCK,
                         --IFNULL(T11.SUPPLY,0) AS SUPPLY,
                         --IFNULL(T12.DEMAND,0) AS DEMAND
                         T13.STOCK,
                         T11.SUPPLY,
                         T12.DEMAND,
                         T11.UNIT
                   from 
                   (select LOCATION_ID,
                           EQUIP_TYPE_ID,
                           TIME_INTERVAL_ID,
                           OUTPUT_VALUE as SUPPLY,
                           UNIT
                    from  :NODE_RULE_TABLE where OUTPUT_KEY = 'SUPPLY' ) as T11
                    inner join
                   (select LOCATION_ID,
                           EQUIP_TYPE_ID,
                           TIME_INTERVAL_ID,
                           OUTPUT_VALUE as DEMAND
                    from :NODE_RULE_TABLE where OUTPUT_KEY = 'DEMAND' ) as T12
                    on (T11.LOCATION_ID = T12.LOCATION_ID and
                        T11.EQUIP_TYPE_ID = T12.EQUIP_TYPE_ID and 
                        T11.TIME_INTERVAL_ID = T12.TIME_INTERVAL_ID)
                    inner join
                   (select LOCATION_ID,                           
                           EQUIP_TYPE_ID,
                           TIME_INTERVAL_ID,
                           OUTPUT_VALUE as STOCK
                    from :NODE_RULE_TABLE  where OUTPUT_KEY = 'STOCK' ) as T13
                    on (T11.LOCATION_ID = T13.LOCATION_ID and
                        T11.EQUIP_TYPE_ID = T13.EQUIP_TYPE_ID and 
                        T11.TIME_INTERVAL_ID = T13.TIME_INTERVAL_ID);
      ELSEIF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 6 )
      THEN
      NODE_BINDING_RULE := 1;
      DATA_TABLE_KPI =  select
                         LOCATION_ID,                         
                         EQUIP_TYPE_ID,
                         TIME_INTERVAL_ID,
                         OUTPUT_VALUE AS RATE,
                         0 AS QUANTITY,
                         0 AS RESERV1,
                         0 AS RESERV2,
                         UNIT
                    from  :NODE_RULE_TABLE T1 
                    where T1.OUTPUT_KEY = :OUTPUT_KEY_RATE ;
      ELSEIF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 7 )
      THEN
      NODE_BINDING_RULE := 1;
      DATA_TABLE_KPI =  select
                         LOCATION_ID,                         
                         EQUIP_TYPE_ID,
                         TIME_INTERVAL_ID,
                         0 AS RATE,
                         OUTPUT_VALUE AS QUANTITY,
                         0 AS RESERV1,
                         0 AS RESERV2,
                         UNIT
                    from  :NODE_RULE_TABLE T1 
                    where T1.OUTPUT_KEY = :OUTPUT_KEY_QUANTITY ;
      ELSEIF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 12 )
      THEN
      NODE_BINDING_RULE := 1;
      DATA_TABLE_KPI =  select
                         LOCATION_ID,                         
                         EQUIP_TYPE_ID,
                         TIME_INTERVAL_ID,
                         0 AS RATE,
                         0 AS QUANTITY,
                         OUTPUT_VALUE AS RESERV1,
                         0 AS RESERV2,
                         UNIT
                    from  :NODE_RULE_TABLE T1 
                    where T1.OUTPUT_KEY = :OUTPUT_KEY_RESERV1 ;    
      ELSEIF ( NODE_RULE_GROUP.DATA_OBJECT_ID = 13 )
      THEN
      NODE_BINDING_RULE := 1;
      DATA_TABLE_KPI =  select
                         LOCATION_ID,                         
                         EQUIP_TYPE_ID,
                         TIME_INTERVAL_ID,
                         0 AS RATE,
                         0 AS QUANTITY,
                         0 AS RESERV1,
                         OUTPUT_VALUE AS RESERV2,
                         UNIT
                    from  :NODE_RULE_TABLE T1 
                    where T1.OUTPUT_KEY = :OUTPUT_KEY_RESERV2 ;                       
    END IF; --for DATA_OBJECT_ID 1-5
  
    IF ( NODE_BINDING_RULE = 1 and (PLAN_MODEL_TYPE_ID_TMP = 1 or PLAN_MODEL_TYPE_ID_TMP = 2 or PLAN_MODEL_TYPE_ID_TMP = 99) )  --persistent/temporary plan
    THEN      
      
        
       OUTPUT_FOR_SD_RULE = SELECT 
                         T1.TIME_INTERVAL_ID,
                         T2."EQUIP_TYPE_TYPE",   
                         T2."EQUIP_TYPE_NAME",    
                         T1."EQUIP_TYPE_ID",
                         T2."LOCATION_TYPE",
                         T2."LOCATION_NAME",
                         T1."LOCATION_ID",
                          
                         NODE_RULE_GROUP.DATA_OBJECT_FORMAT AS DATA_OBJECT_FORMAT,
                         NODE_RULE_GROUP.METADATA_NODE_ID AS METADATA_NODE_ID,
                         NODE_RULE_GROUP.NODE_OUTPUT_KEYS AS NODE_OUTPUT_KEYS,
                         NODE_RULE_GROUP.NODE_VISIBLE AS NODE_VISIBLE,
                         NODE_RULE_GROUP.NODE_NAME AS NODE_NAME,
                         NODE_RULE_GROUP.NODE_ID AS NODE_ID,
                         
                         T4."PIPELINE_MODEL_ID",      
                         T4."FILTER_GROUP_ID",         
                         T4."FILTER_TYPE",  
                               
                         T4.PLAN_EXECUTION_ID,
                         T4.PLAN_MODEL_ID,    
                         T4.PLAN_MODEL_TYPE_ID,  
                         T4.PLAN_MODEL_CATEGORY_ID, 
                                         
                         "UNIT",
                         T2.MAX_CAPACITY,
                         T2.MAX_SAFETY_STOCK,
                         T2.MIN_SAFETY_STOCK,
                         (STOCK + SUPPLY - DEMAND) AS BALANCE_STOCK_SUPPLY_DEMAND,
                         (SUPPLY - DEMAND) AS BALANCE_SUPPLY_DEMAND,
                         DEMAND,
                         SUPPLY,
                         STOCK,
                         
                         T3.TIME_STEP,  
                         T3.START_TIME,  
                         T3.SEQUENCE,                    
                         T3.TIME_FILTER_DESC
                     FROM :DATA_TABLE T1                     
                     INNER JOIN :OUT_TBL T2 ON (T1.LOCATION_ID = T2.LOCATION_ID and T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
                     INNER JOIN :INTERVAL_INFO T3 ON (T1.TIME_INTERVAL_ID = T3.TIME_INTERVAL_ID),
                     :PLAN_INFO T4;   
                                       
   /*  INPUT_FOR_SD_KPI_BUBBLE_RULE = 
          select
                 T1.PLAN_EXECUTION_ID,
				 T1.PLAN_MODEL_ID,
				 T1.PLAN_MODEL_TYPE_ID,
				 T1.PLAN_MODEL_CATEGORY_ID,
				 T1.FILTER_TYPE,
				 T1.FILTER_GROUP_ID, 
				 T1.PIPELINE_MODEL_ID,
				 T1.NODE_ID,
				 T1.NODE_NAME,
				 T1.NODE_VISIBLE,
				 T1.NODE_OUTPUT_KEYS,
				 T1.METADATA_NODE_ID,
				 T1.DATA_OBJECT_FORMAT,
				 
				 T1.LOCATION_ID,
				 T1.LOCATION_NAME,
				 T1.LOCATION_TYPE,
				 T1.EQUIP_TYPE_ID,
				 T1.EQUIP_TYPE_NAME,
				 T1.EQUIP_TYPE_TYPE,  
				   
				 T1.TIME_INTERVAL_ID,
				 T1.TIME_FILTER_DESC,
			     T1.SEQUENCE,
			     T1.START_TIME,	
				 T1.TIME_STEP,	     	     
					
				 T1.STOCK,
				 T1.SUPPLY,	
				 T1.DEMAND,			     
			     T1.BALANCE_SUPPLY_DEMAND,
				 T1.BALANCE_STOCK_SUPPLY_DEMAND,
				  		
				 T1.MIN_SAFETY_STOCK,
				 T1.MAX_SAFETY_STOCK,
				 T1.MAX_CAPACITY,
				 
				 0 as IDLE_RATE,
				 0 as STORAGE_COST,
				 0 as DWELL_TIME,
				 0 as IMPORT_EXPORT,
				 T1.UNIT,
				 :SD_FLAG as SD_KPI_FLAG
          from  :OUTPUT_FOR_SD_RULE T1;
          */
       INPUT_FOR_SD_KPI_BUBBLE_RULE =    
         select distinct
               T11.PLAN_EXECUTION_ID,
	           PLAN_MODEL_ID,    
	           PLAN_MODEL_TYPE_ID,                   
	           PLAN_MODEL_CATEGORY_ID,                 
	           T12.FILTER_TYPE,
	           FILTER_GROUP_ID,
	           PIPELINE_MODEL_ID,
	           T11.NODE_ID,
	           NODE_NAME,
	           NODE_VISIBLE,
	           NODE_OUTPUT_KEYS,
               METADATA_NODE_ID,
	           DATA_OBJECT_FORMAT,
	           
	           T11.LOCATION_ID,
	           T12.LOCATION_NAME,
			   T11.LOCATION_TYPE,
	           
	           'N/A'as EQUIP_TYPE_ID,
	           'N/A' as EQUIP_TYPE_NAME,
			   -1 as EQUIP_TYPE_TYPE,
	           
	           T11.TIME_INTERVAL_ID,
			   TIME_FILTER_DESC,
	           SEQUENCE,
	           START_TIME,
	           TIME_STEP,
	           
	             T11.STOCK,
				 T11.SUPPLY,	
				 T11.DEMAND,			     
			     T11.BALANCE_SUPPLY_DEMAND,
				 T11.BALANCE_STOCK_SUPPLY_DEMAND,
				 				  		
				 T13.MIN_SAFETY_STOCK,
				 T13.MAX_SAFETY_STOCK,
				 T13.MAX_CAPACITY,
				 
				 0 as RATE,
				 0 as QUANTITY,
				 0 as RESERV1,
				 0 as RESERV2,
				 UNIT,
				 :SD_FLAG as SD_KPI_FLAG
            from	           
           (select
	           T1.PLAN_EXECUTION_ID,
	           T1.NODE_ID,
	           T1.LOCATION_TYPE,
	           T1.LOCATION_ID,
	           T1.TIME_INTERVAL_ID,
				 sum(T1.STOCK) as STOCK,
				 sum(T1.SUPPLY) as SUPPLY,	
				 sum(T1.DEMAND) as DEMAND,			     
			     sum(T1.BALANCE_SUPPLY_DEMAND) as BALANCE_SUPPLY_DEMAND,
				 sum(T1.BALANCE_STOCK_SUPPLY_DEMAND) as BALANCE_STOCK_SUPPLY_DEMAND

          from :OUTPUT_FOR_SD_RULE T1
          group by T1.PLAN_EXECUTION_ID,
			         T1.NODE_ID,
			         T1.LOCATION_TYPE,
			         T1.LOCATION_ID,
			         T1.TIME_INTERVAL_ID
		  ) T11
         left outer join :OUTPUT_FOR_SD_RULE T12
		 on T11.PLAN_EXECUTION_ID = T12.PLAN_EXECUTION_ID
		         and T11.NODE_ID = T12.NODE_ID
		         and T11.LOCATION_TYPE = T12.LOCATION_TYPE
		         and T11.LOCATION_ID = T12.LOCATION_ID
		         and T11.TIME_INTERVAL_ID = T12.TIME_INTERVAL_ID
		 left outer join :OUT_TBL_LOC T13
		   on T11.LOCATION_TYPE = T13.LOCATION_TYPE
		  and T11.LOCATION_ID = T13.LOCATION_ID;
  
    --    03_03_get OUTPUT_FOR_DT(calcu culumns:BALANCE_SUPPLY_DEMAND,BALANCE_STOCK_SUPPLY_DEMAND)   
        --trucate GLOBAL_TEMPORARY_TABLE
          truncate table "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_inputGlobalTemp";   

          insert into "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_inputGlobalTemp"(select * from :OUTPUT_FOR_SD_RULE);
          
         -- insert into "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_input_test"(select * from :OUTPUT_FOR_SD_RULE);
          
          SELECT NODE_RULE_GROUP.SP--, NODE_RULE_GROUP.ALERT_RULE_PARAM_VALUE 
          INTO SP--, SP_PARAM 
          FROM DUMMY;
          
    --    03_05_call DT_storage_procedure SP  
        --trucate GLOBAL_TEMPORARY_TABLE
          truncate table "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_outputGlobalTemp";  

          SCRIPT := 'call '|| :SP ||'("sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_inputGlobalTemp" ,"sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_outputGlobalTemp","sap.tm.trp.db.hrf.ruleManage::t_hrf_actions_results") with overview'; 
          

          execute immediate(:SCRIPT);
          
     --   insert into "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_output_test"(select * from "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_outputGlobalTemp");

        select  NODE_RULE_GROUP.NODE_ID into TMP_NODE_ID from dummy;

    --    03_06_insert output of DT_SP into table 
		    insert into "sap.tm.trp.db.hrf.supplyDemand::t_trp_hrf_SD_output_DeltaFlag"
		    (
 select 	distinct
		     T1."PLAN_EXECUTION_ID",
		     "PLAN_MODEL_ID",
		     "PLAN_MODEL_TYPE_ID",
		     "PLAN_MODEL_CATEGORY_ID", 
		     
		     "FILTER_TYPE",      
		     "FILTER_GROUP_ID",  
		            
		     "PIPELINE_MODEL_ID",      
		     T1."NODE_ID",
		     "NODE_NAME",     
		     "NODE_VISIBLE",   
		     "NODE_OUTPUT_KEYS",
		     "METADATA_NODE_ID",               
		     "DATA_OBJECT_FORMAT",    
		     T1."LOCATION_TYPE",
		     T1."LOCATION_ID", 
		     "LOCATION_NAME",
		     T1."EQUIP_TYPE_TYPE",   
		     T1."EQUIP_TYPE_ID",
		     "EQUIP_TYPE_NAME",      
		
		     "TIME_FILTER_DESC",     
		     "TIME_INTERVAL_ID",     
		     "SEQUENCE",  
		      T1."START_TIME",
		      "TIME_STEP", 
		     
		      STOCK,
		      SUPPLY,
		      DEMAND,
		      BALANCE_SUPPLY_DEMAND,
		      BALANCE_STOCK_SUPPLY_DEMAND,
		      MIN_SAFETY_STOCK,
		      MAX_SAFETY_STOCK,
		      MAX_CAPACITY,
		     "UNIT",      
		     
		     T2."ROW_ID", 
		     T2."MESSAGE", 
		     T2."ALERT_REASON", 
		     T2."ALERT_SCORE_IMP", 
		     T2."ALERT_SCORE_EMER",
		     0 AS DELTA
	--	    from "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_input_test" T1
	--	    inner join "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_output_test" T2
		    from "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_inputGlobalTemp" T1
		    inner join "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_outputGlobalTemp" T2
		    on T1.PLAN_EXECUTION_ID = T2.PLAN_EXECUTION_ID and 
		       T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID and 
		       T1.NODE_ID = T2.NODE_ID and  
		       T1.NODE_ID = :TMP_NODE_ID and
		       T1.EQUIP_TYPE_TYPE = T2.EQUIP_TYPE_TYPE and 
		       T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID and 
		       T1.LOCATION_TYPE = T2.LOCATION_TYPE and 
		       T1.LOCATION_ID = T2.LOCATION_ID and 
		       T1.START_TIME = T2.START_TIME
		    );
		    
	
           
           OUT_PLAN_MODEL_TYPE_ID := PLAN_MODEL_TYPE_ID_TMP;
		   select COUNT(1) into OUTPUT_RECORDS from "sap.tm.trp.db.hrf.supplyDemand::t_trp_hrf_SD_output_DeltaFlag" T1
		   where T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID;
   

            --call bubble rule
            call "sap.tm.trp.db.hrf.planBubble::p_call_plan_bubbleView_cus_rule"(:PLAN_EXECUTION_ID,:INPUT_FOR_SD_KPI_BUBBLE_RULE,OUT_REC_BUBBLE);
           
		    
     ELSEIF ( NODE_BINDING_RULE = 1 and PLAN_MODEL_TYPE_ID_TMP = 4 )  --persistent KPI plan
     THEN              
       OUTPUT_FOR_DT = SELECT 
						 T4.PLAN_EXECUTION_ID,
						 T4.PLAN_MODEL_ID,						 
						 T4.PLAN_MODEL_TYPE_ID,	
						 T4.PLAN_MODEL_CATEGORY_ID,				
						 T4.FILTER_TYPE,				
						 T4.FILTER_GROUP_ID,						
						 T4.PIPELINE_MODEL_ID,					
						 NODE_RULE_GROUP.NODE_ID as NODE_ID,					
						 NODE_RULE_GROUP.NODE_NAME as NODE_NAME, 
						 NODE_RULE_GROUP.NODE_VISIBLE as NODE_VISIBLE,
						 NODE_RULE_GROUP.NODE_OUTPUT_KEYS as NODE_OUTPUT_KEYS,
						 NODE_RULE_GROUP.METADATA_NODE_ID as METADATA_NODE_ID,
						 NODE_RULE_GROUP.DATA_OBJECT_FORMAT as DATA_OBJECT_FORMAT,						
						 T1.LOCATION_ID,
						 T2.LOCATION_NAME,
						 T2.LOCATION_TYPE, 
						 T1.EQUIP_TYPE_ID,
						 T2.EQUIP_TYPE_NAME,
						 T2.EQUIP_TYPE_TYPE,
						 T1.TIME_INTERVAL_ID,
						 T3.TIME_FILTER_DESC,
						 T3.SEQUENCE,
						 T3.START_TIME,
						 T3.TIME_STEP,
						 RATE, 
						 QUANTITY,
						 RESERV1,
						 RESERV2,
						 UNIT 
                                 
                     FROM :DATA_TABLE_KPI T1                     
                     INNER JOIN :OUT_TBL T2 ON (T1.LOCATION_ID = T2.LOCATION_ID and T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID)
                     INNER JOIN :INTERVAL_INFO T3 ON (T1.TIME_INTERVAL_ID = T3.TIME_INTERVAL_ID),
                     :PLAN_INFO T4;    
                   
                   --0001
                   select * from :OUTPUT_FOR_DT;  
                     
     /*     INPUT_FOR_SD_KPI_BUBBLE_RULE_02 = 
          select
                 T1.PLAN_EXECUTION_ID,
				 T1.PLAN_MODEL_ID,
				 T1.PLAN_MODEL_TYPE_ID,
				 T1.PLAN_MODEL_CATEGORY_ID,
				 T1.FILTER_TYPE,
				 T1.FILTER_GROUP_ID, 
				 T1.PIPELINE_MODEL_ID,
				 T1.NODE_ID,
				 T1.NODE_NAME,
				 T1.NODE_VISIBLE,
				 T1.NODE_OUTPUT_KEYS,
				 T1.METADATA_NODE_ID,
				 T1.DATA_OBJECT_FORMAT,
				 
				 T1.LOCATION_ID,
				 T1.LOCATION_NAME,
				 T1.LOCATION_TYPE,
				 T1.EQUIP_TYPE_ID,
				 T1.EQUIP_TYPE_NAME,
				 T1.EQUIP_TYPE_TYPE,  
				   
				 T1.TIME_INTERVAL_ID,
				 T1.TIME_FILTER_DESC,
			     T1.SEQUENCE,
			     T1.START_TIME,	
				 T1.TIME_STEP,	     	     
					
				 0 as STOCK,
				 0 as SUPPLY,	
				 0 as DEMAND,			     
			     0 as BALANCE_SUPPLY_DEMAND,
				 0 as BALANCE_STOCK_SUPPLY_DEMAND,
				  		
				 0 as MIN_SAFETY_STOCK,
				 0 as MAX_SAFETY_STOCK,
				 0 as MAX_CAPACITY,
				 
				 T1.IDLE_RATE,
				 T1.STORAGE_COST,
				 T1.DWELL_TIME,
				 T1.IMPORT_EXPORT,
				 T1.UNIT,
				 :KPI_FLAG as SD_KPI_FLAG
          from  :OUTPUT_FOR_DT T1;*/
       
       INPUT_FOR_SD_KPI_BUBBLE_RULE_02 =    
        select distinct
               T11.PLAN_EXECUTION_ID,
	           PLAN_MODEL_ID,    
	           PLAN_MODEL_TYPE_ID,                   
	           PLAN_MODEL_CATEGORY_ID,                 
	           FILTER_TYPE,
	           FILTER_GROUP_ID,
	           PIPELINE_MODEL_ID,
	           T11.NODE_ID,
	           NODE_NAME,
	           NODE_VISIBLE,
	           NODE_OUTPUT_KEYS,
               METADATA_NODE_ID,
	           DATA_OBJECT_FORMAT,
	           
	           T11.LOCATION_ID,
	           LOCATION_NAME,
			   T11.LOCATION_TYPE,
	           
	           'N/A'as EQUIP_TYPE_ID,
	           'N/A' as EQUIP_TYPE_NAME,
			   -1 as EQUIP_TYPE_TYPE,
	           
	           T11.TIME_INTERVAL_ID,
			   TIME_FILTER_DESC,
	           SEQUENCE,
	           START_TIME,
	           TIME_STEP,
	           
	             0 as STOCK,
				 0 as SUPPLY,	
				 0 as DEMAND,			     
			     0 as BALANCE_SUPPLY_DEMAND,
				 0 as BALANCE_STOCK_SUPPLY_DEMAND,
				 0 as MIN_SAFETY_STOCK,
				 0 as MAX_SAFETY_STOCK,
				 0 as MAX_CAPACITY,
				 
				 T11.RATE,
				 T11.QUANTITY,
				 T11.RESERV1,
				 T11.RESERV2,
				 UNIT,
				 :KPI_FLAG as SD_KPI_FLAG
            from	           
           (select
	           T1.PLAN_EXECUTION_ID,
	           T1.NODE_ID,
	           
	           T1.LOCATION_TYPE,
	           T1.LOCATION_ID,
	           
	           T1.TIME_INTERVAL_ID,
	          
				 avg(T1.RATE) as RATE,
				 sum(T1.QUANTITY) as QUANTITY,	
				 sum(T1.RESERV1) as RESERV1,			     
			     sum(T1.RESERV2) as RESERV2

             from :OUTPUT_FOR_DT T1
             group by T1.PLAN_EXECUTION_ID,
			         T1.NODE_ID,
			         T1.LOCATION_TYPE,
			         T1.LOCATION_ID,
			         T1.TIME_INTERVAL_ID
		 ) T11
         left outer join :OUTPUT_FOR_DT T12
		 on T11.PLAN_EXECUTION_ID = T12.PLAN_EXECUTION_ID
		         and T11.NODE_ID = T12.NODE_ID
		         and T11.LOCATION_TYPE = T12.LOCATION_TYPE
		         and T11.LOCATION_ID = T12.LOCATION_ID
		         and T11.TIME_INTERVAL_ID = T12.TIME_INTERVAL_ID;
        
        --0002
        select * from :INPUT_FOR_SD_KPI_BUBBLE_RULE_02;
        
          truncate table "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_cus_inputGlobalTemp";   

          insert into "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_cus_inputGlobalTemp" (select * from :OUTPUT_FOR_DT);
         -- insert into "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_input_test" (select * from :OUTPUT_FOR_DT);
         -- select * from "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_input_test" T1;
          
          SELECT NODE_RULE_GROUP.SP--, NODE_RULE_GROUP.ALERT_RULE_PARAM_VALUE 
          INTO SP--, SP_PARAM 
          FROM DUMMY;
          
          --0003
          select NODE_RULE_GROUP.SP from dummy;
          
    --    03_05_call DT_storage_procedure SP  
        --trucate GLOBAL_TEMPORARY_TABLE
          truncate table "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_outputGlobalTemp";  

          SCRIPT := 'call '|| :SP ||'("sap.tm.trp.db.hrf.kpi::t_hrf_KPI_cus_inputGlobalTemp" ,"sap.tm.trp.db.hrf.kpi::t_hrf_KPI_outputGlobalTemp","sap.tm.trp.db.hrf.ruleManage::t_hrf_actions_results") with overview'; 
          execute immediate(:SCRIPT);

         --
      --   insert into "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_output_test"
       --  (select * from "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_outputGlobalTemp" );
         
                 --  select * from "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_output_test" T1;
--111
--select * from "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_cus_inputGlobalTemp";
--select * from "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_outputGlobalTemp";
    --    03_06_insert output of DT_SP into table 
         
          ---0004
 
		    select 	distinct
		     T1."PLAN_EXECUTION_ID",
		     "PLAN_MODEL_ID",
		     "PLAN_MODEL_TYPE_ID",
		     "PLAN_MODEL_CATEGORY_ID",
		     "FILTER_TYPE",    
		     "FILTER_GROUP_ID",
		     "PIPELINE_MODEL_ID",
		     T1."NODE_ID",
		     "NODE_NAME",
		     "NODE_VISIBLE",
		     "NODE_OUTPUT_KEYS",
		     "METADATA_NODE_ID",
		     "DATA_OBJECT_FORMAT",
		    
		     T1."LOCATION_ID",
		     "LOCATION_NAME",
		     T1."LOCATION_TYPE",
		    
		     T1."EQUIP_TYPE_ID",
		     "EQUIP_TYPE_NAME",
		     T1."EQUIP_TYPE_TYPE",
		    
		     "TIME_INTERVAL_ID",
		     "TIME_FILTER_DESC",
		     "SEQUENCE",
		    
		     T1."START_TIME",
		     "TIME_STEP",
		     
		     RATE,
		     QUANTITY,
		     RESERV1,
		     RESERV2,
		     "UNIT",
		     T2."ROW_ID", 
		     T2."MESSAGE", 
		     T2."ALERT_REASON", 
		     T2."ALERT_SCORE_IMP", 
		     T2."ALERT_SCORE_EMER"
		    from "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_cus_inputGlobalTemp" T1
		    inner join  "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_outputGlobalTemp" T2
		    on T1.PLAN_EXECUTION_ID = T2.PLAN_EXECUTION_ID and 
		       T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID and 
		       T1.NODE_ID = T2.NODE_ID and  
		       T1.EQUIP_TYPE_TYPE = T2.EQUIP_TYPE_TYPE and 
		       T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID and 
		       T1.LOCATION_TYPE = T2.LOCATION_TYPE and 
		       T1.LOCATION_ID = T2.LOCATION_ID and 
		       T1.START_TIME = T2.START_TIME  
		    ;
          
		    insert into "sap.tm.trp.db.hrf.kpi::t_trp_hrf_KPI_cus_output_withoutDelta"
		    (
		    select 	distinct
		     T1."PLAN_EXECUTION_ID",
		     "PLAN_MODEL_ID",
		     "PLAN_MODEL_TYPE_ID",
		     "PLAN_MODEL_CATEGORY_ID",
		     "FILTER_TYPE",    
		     "FILTER_GROUP_ID",
		     "PIPELINE_MODEL_ID",
		     T1."NODE_ID",
		     "NODE_NAME",
		     "NODE_VISIBLE",
		     "NODE_OUTPUT_KEYS",
		     "METADATA_NODE_ID",
		     "DATA_OBJECT_FORMAT",
		    
		     T1."LOCATION_ID",
		     "LOCATION_NAME",
		     T1."LOCATION_TYPE",
		    
		     T1."EQUIP_TYPE_ID",
		     "EQUIP_TYPE_NAME",
		     T1."EQUIP_TYPE_TYPE",
		    
		     "TIME_INTERVAL_ID",
		     "TIME_FILTER_DESC",
		     "SEQUENCE",
		    
		     T1."START_TIME",
		     "TIME_STEP",
		     
		     RATE,
		     QUANTITY,
		     RESERV1,
		     RESERV2,
		     "UNIT",
		     T2."ROW_ID", 
		     T2."MESSAGE", 
		     T2."ALERT_REASON", 
		     T2."ALERT_SCORE_IMP", 
		     T2."ALERT_SCORE_EMER"
		    from "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_outputGlobalTemp" T2
		    inner join "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_cus_inputGlobalTemp" T1
		   -- from "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_output_test" T2
		   -- inner join "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_input_test" T1
		
		    on T1.PLAN_EXECUTION_ID = T2.PLAN_EXECUTION_ID and 
		       T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID and 
		       T1.NODE_ID = T2.NODE_ID and  
		       T1.EQUIP_TYPE_TYPE = T2.EQUIP_TYPE_TYPE and 
		       T1.EQUIP_TYPE_ID = T2.EQUIP_TYPE_ID and 
		       T1.LOCATION_TYPE = T2.LOCATION_TYPE and 
		       T1.LOCATION_ID = T2.LOCATION_ID and 
		       T1.START_TIME = T2.START_TIME  
		    );
		    OUT_PLAN_MODEL_TYPE_ID := PLAN_MODEL_TYPE_ID_TMP;
		    
		    select 3 into OUTPUT_RECORDS from dummy;
	        select COUNT(1) into OUTPUT_RECORDS from "sap.tm.trp.db.hrf.kpi::t_trp_hrf_KPI_cus_output_withoutDelta" T1
            where T1.PLAN_EXECUTION_ID = :PLAN_EXECUTION_ID;
            --call bubble rule
            call "sap.tm.trp.db.hrf.planBubble::p_call_plan_bubbleView_cus_rule"(:PLAN_EXECUTION_ID,:INPUT_FOR_SD_KPI_BUBBLE_RULE_02,OUT_REC_BUBBLE);
    ELSE
            OUT_PLAN_MODEL_TYPE_ID := -1;
            OUTPUT_RECORDS := -1;
            OUT_REC_BUBBLE := -1;
            
    END IF;

    END FOR; 
    
  --trucate GLOBAL_TEMPORARY_TABLE
    truncate table "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_inputGlobalTemp";  
    truncate table "sap.tm.trp.db.hrf.supplyDemand::t_hrf_SD_outputGlobalTemp";  
    truncate table "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_cus_inputGlobalTemp";  
    truncate table "sap.tm.trp.db.hrf.kpi::t_hrf_KPI_outputGlobalTemp";  
END;