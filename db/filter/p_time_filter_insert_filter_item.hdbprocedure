PROCEDURE "SAP_TM_TRP"."sap.tm.trp.db.filter::p_time_filter_insert_filter_item" (
	IN TIME_FILTER_ID BIGINT,
    IN DIRECTION_FLAG INTEGER,
    IN ITEM_LIST "sap.tm.trp.db.filter::tt_time_filter_item_value"
    ) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER 
	DEFAULT SCHEMA SAP_TM_TRP
	--READS SQL DATA 
AS
TIME_FILTER_ITEM_ID BIGINT;
ITEM_SEQ INTEGER;
V_INDEX INTEGER;
SECONDS BIGINT;
BEGIN
 


DECLARE CURSOR ITEMS FOR
SELECT T1.ID AS TIME_DIMENSION_UNIT_ID, T0.VALUE AS TIME_INTERVAL, T0.REPEAT_TIME AS REPEAT_TIMES, T0.UNIT AS UNIT_CODE
FROM :ITEM_LIST T0
LEFT JOIN "sap.tm.trp.db.filter::t_time_dimension_unit" T1 ON T1.CODE = T0.UNIT
ORDER BY SEQUENCE
;

-- INSERT INTO TIME FILTER ITEM
ITEM_SEQ := 1; -- SET START VALUE
SECONDS := 0;
IF :DIRECTION_FLAG = 1 THEN		-- Past Time Filter
FOR CUR_ROW AS ITEMS DO
	-- GENERATE ITEM_ID
	SELECT "sap.tm.trp.db.filter::s_time_filter_item".NEXTVAL INTO TIME_FILTER_ITEM_ID FROM DUMMY;
	-- INSERT ITEMS
	INSERT INTO "sap.tm.trp.db.filter::t_time_filter_item"
	(ID,TIME_DIMENSION_UNIT_ID,TIME_INTERVAL,REPEAT_TIMES,TIME_FILTER_ID)
	VALUES (:TIME_FILTER_ITEM_ID,CUR_ROW.TIME_DIMENSION_UNIT_ID,CUR_ROW.TIME_INTERVAL,CUR_ROW.REPEAT_TIMES,:TIME_FILTER_ID)
	;
	-- INSERT ITEM INTERVAL
	FOR V_INDEX IN 1 .. CUR_ROW.REPEAT_TIMES DO
		INSERT INTO "sap.tm.trp.db.filter::t_time_filter_interval"
		(ID,TIME_FILTER_ID,TIME_FILTER_ITEM_ID,CODE,SEQUENCE,START_OFFSET,END_OFFSET)
		SELECT	"sap.tm.trp.db.filter::s_time_filter_interval".NEXTVAL,
				:TIME_FILTER_ID,
				:TIME_FILTER_ITEM_ID,
				NULL,
				:ITEM_SEQ,
				CASE WHEN CUR_ROW.UNIT_CODE = 'HOUR' THEN (:V_INDEX) * 60*60*CUR_ROW.TIME_INTERVAL *(-1) + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'DAY' THEN (:V_INDEX) * 24*60*60*CUR_ROW.TIME_INTERVAL *(-1) + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'WEEK' THEN (:V_INDEX) * 7*24*60*60*CUR_ROW.TIME_INTERVAL *(-1) + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'MONTH' THEN (:V_INDEX) * 30*24*60*60*CUR_ROW.TIME_INTERVAL *(-1) + :SECONDS
				END AS START_OFFSET,
				CASE WHEN CUR_ROW.UNIT_CODE = 'HOUR' THEN (:V_INDEX - 1) * 60*60*CUR_ROW.TIME_INTERVAL *(-1) + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'DAY' THEN (:V_INDEX - 1) * 24*60*60*CUR_ROW.TIME_INTERVAL *(-1) + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'WEEK' THEN (:V_INDEX - 1) * 7*24*60*60*CUR_ROW.TIME_INTERVAL *(-1) + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'MONTH' THEN (:V_INDEX - 1) * 30*24*60*60*CUR_ROW.TIME_INTERVAL *(-1) + :SECONDS
				END AS END_OFFSET
		FROM DUMMY
		;
		ITEM_SEQ := :ITEM_SEQ + 1;	-- ITEM_SEQ ++
	END FOR;
	-- ADD LAST ITEM INTERVAL TO SECONDS
	SELECT
		CASE WHEN CUR_ROW.UNIT_CODE = 'HOUR' THEN (CUR_ROW.TIME_INTERVAL * CUR_ROW.REPEAT_TIMES) * 60*60 *(-1) + :SECONDS
			 WHEN CUR_ROW.UNIT_CODE = 'DAY' THEN (CUR_ROW.TIME_INTERVAL * CUR_ROW.REPEAT_TIMES) * 24*60*60 *(-1) + :SECONDS
			 WHEN CUR_ROW.UNIT_CODE = 'WEEK' THEN (CUR_ROW.TIME_INTERVAL * CUR_ROW.REPEAT_TIMES) * 7*24*60*60 *(-1) + :SECONDS
			 WHEN CUR_ROW.UNIT_CODE = 'MONTH' THEN (CUR_ROW.TIME_INTERVAL * CUR_ROW.REPEAT_TIMES) * 30*24*60*60 *(-1) + :SECONDS
		END AS SECONDS INTO SECONDS
	FROM DUMMY;
END FOR;

ELSEIF :DIRECTION_FLAG = 2 THEN		-- Future Time Filter
FOR CUR_ROW AS ITEMS DO
	-- GENERATE ITEM_ID
	SELECT "sap.tm.trp.db.filter::s_time_filter_item".NEXTVAL INTO TIME_FILTER_ITEM_ID FROM DUMMY;
	-- INSERT ITEMS
	INSERT INTO "sap.tm.trp.db.filter::t_time_filter_item"
	(ID,TIME_DIMENSION_UNIT_ID,TIME_INTERVAL,REPEAT_TIMES,TIME_FILTER_ID)
	VALUES (:TIME_FILTER_ITEM_ID,CUR_ROW.TIME_DIMENSION_UNIT_ID,CUR_ROW.TIME_INTERVAL,CUR_ROW.REPEAT_TIMES,:TIME_FILTER_ID)
	;
	-- INSERT ITEM INTERVAL
	FOR V_INDEX IN 1 .. CUR_ROW.REPEAT_TIMES DO
		INSERT INTO "sap.tm.trp.db.filter::t_time_filter_interval"
		(ID,TIME_FILTER_ID,TIME_FILTER_ITEM_ID,CODE,SEQUENCE,START_OFFSET,END_OFFSET)
		SELECT	"sap.tm.trp.db.filter::s_time_filter_interval".NEXTVAL,
				:TIME_FILTER_ID,
				:TIME_FILTER_ITEM_ID,
				NULL,
				:ITEM_SEQ,
				CASE WHEN CUR_ROW.UNIT_CODE = 'HOUR' THEN (:V_INDEX - 1) * 60*60*CUR_ROW.TIME_INTERVAL + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'DAY' THEN (:V_INDEX - 1) * 24*60*60*CUR_ROW.TIME_INTERVAL + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'WEEK' THEN (:V_INDEX - 1) * 7*24*60*60*CUR_ROW.TIME_INTERVAL + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'MONTH' THEN (:V_INDEX - 1) * 30*24*60*60*CUR_ROW.TIME_INTERVAL + :SECONDS
				END AS START_OFFSET,
				CASE WHEN CUR_ROW.UNIT_CODE = 'HOUR' THEN (:V_INDEX) * 60*60*CUR_ROW.TIME_INTERVAL + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'DAY' THEN (:V_INDEX) * 24*60*60*CUR_ROW.TIME_INTERVAL + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'WEEK' THEN (:V_INDEX) * 7*24*60*60*CUR_ROW.TIME_INTERVAL + :SECONDS
					 WHEN CUR_ROW.UNIT_CODE = 'MONTH' THEN (:V_INDEX) * 30*24*60*60*CUR_ROW.TIME_INTERVAL + :SECONDS
				END AS END_OFFSET
		FROM DUMMY
		;
		ITEM_SEQ := :ITEM_SEQ + 1;	-- ITEM_SEQ ++
	END FOR;
		-- ADD LAST ITEM INTERVAL TO SECONDS
	SELECT
		CASE WHEN CUR_ROW.UNIT_CODE = 'HOUR' THEN (CUR_ROW.TIME_INTERVAL * CUR_ROW.REPEAT_TIMES) * 60*60 + :SECONDS
			 WHEN CUR_ROW.UNIT_CODE = 'DAY' THEN (CUR_ROW.TIME_INTERVAL * CUR_ROW.REPEAT_TIMES) * 24*60*60 + :SECONDS
			 WHEN CUR_ROW.UNIT_CODE = 'WEEK' THEN (CUR_ROW.TIME_INTERVAL * CUR_ROW.REPEAT_TIMES) * 7*24*60*60 + :SECONDS
			 WHEN CUR_ROW.UNIT_CODE = 'MONTH' THEN (CUR_ROW.TIME_INTERVAL * CUR_ROW.REPEAT_TIMES) * 30*24*60*60 + :SECONDS
		END AS SECONDS INTO SECONDS
	FROM DUMMY;
END FOR;

END IF;

END;