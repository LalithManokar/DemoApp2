<?xml version="1.0" encoding="UTF-8"?>
<Calculation:scenario xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:Calculation="http://www.sap.com/ndb/BiModelCalculation.ecore" schemaVersion="2.3" id="cv_time_filter_interval" applyPrivilegeType="ANALYTIC_PRIVILEGE" checkAnalyticPrivileges="true" defaultClient="crossClient" defaultLanguage="$$language$$" hierarchiesSQLEnabled="false" translationRelevant="true" visibility="reportingEnabled" calculationScenarioType="SCRIPT_BASED" dataCategory="CUBE" enforceSqlExecution="false" executionSemantic="UNDEFINED" scriptParametersCaseSensitive="true">
  <descriptions defaultDescription="cv_show_time_filter_interval"/>
  <defaultSchema schemaName="SAP_TM_TRP"/>
  <localVariables/>
  <variableMappings/>
  <informationModelLayout relativeWidthScenario="27"/>
  <dataSources/>
  <calculationViews>
    <calculationView xsi:type="Calculation:SqlScriptView" id="Script_View">
      <descriptions/>
      <viewAttributes>
        <viewAttribute datatype="BIGINT" id="ID"/>
        <viewAttribute datatype="INTEGER" id="SEQUENCE"/>
        <viewAttribute datatype="BIGINT" id="TIME_INTERVAL_ID"/>
        <viewAttribute datatype="TIMESTAMP" id="START_TIME"/>
        <viewAttribute datatype="TIMESTAMP" id="END_TIME"/>
        <viewAttribute datatype="INTEGER" id="INTERVAL"/>
        <viewAttribute datatype="TIMESTAMP" id="START_TIME_FIXED"/>
        <viewAttribute datatype="TIMESTAMP" id="END_TIME_FIXED"/>
      </viewAttributes>
      <calculatedViewAttributes/>
      <definition>
  
 /*******************************************************************
 calculate start time and end time of interval. 
 this CalculationView will used to calculate plan result.
 It is based on &quot;sap.tm.trp.db.filter::cv_time_filter_interval&quot;
 *******************************************************************/
 BEGIN 
    DECLARE HOUR_START INTEGER;
    DECLARE MINUTE_START INTEGER;
    DECLARE WEEK_START INTEGER;
    DECLARE MONTH_START INTEGER;
    DECLARE TIME_ZONE VARCHAR(50);
    DECLARE FLAG INTEGER;
    DECLARE OFFSET INTEGER;
    DECLARE ITEM_ID BIGINT; 
    DECLARE UNIT_ID BIGINT;-- 0:hour 1:day 2:week 3:month 4:year
    DECLARE UTC_START_FROM TIMESTAMP;
    DECLARE REPEAT INTEGER;
          
    
    sql0 = SELECT
                 B.ID AS TIME_FILTER_ID,
                 A.SEQUENCE,
                 A.ID AS TIME_INTERVAL_ID,
                 A.START_OFFSET,
                 A.END_OFFSET,               
                 B.UNIT_ID,
                 B.TIMEZONE_ID,
                 B.DIRECTION_FLAG,
                 B.OFFSET_FLAG,
                 B.UTC_START_TIMESTAMP
                 FROM &quot;sap.tm.trp.db.filter::t_time_filter_interval&quot; A
                 INNER JOIN &quot;sap.tm.trp.db.filter::cv_get_utc_start_time&quot; B
                 ON A.TIME_FILTER_ID = B.ID 
                 ORDER BY A.TIME_FILTER_ID, A.SEQUENCE;
                               
     -- no offset,history or unit type is hour
     TIME_INTERVAL_LIST1 = 
                 SELECT 
                       A.TIME_FILTER_ID AS ID,
                       (ROW_NUMBER() OVER (PARTITION BY A.TIME_FILTER_ID ORDER BY A.SEQUENCE DESC)) AS SEQUENCE,
                       A.TIME_INTERVAL_ID,                     
                       ADD_SECONDS(CURRENT_UTCTIMESTAMP,A.START_OFFSET) AS START_TIME,
                       ADD_SECONDS(CURRENT_UTCTIMESTAMP,A.END_OFFSET) AS END_TIME,
                       A.END_OFFSET - A.START_OFFSET AS INTERVAL
                       FROM :sql0 A 
                       WHERE (A.OFFSET_FLAG = 0 AND A.DIRECTION_FLAG = 1) -- offset = 0,history 
                 UNION
                SELECT 
                       A.TIME_FILTER_ID AS ID,
                       (ROW_NUMBER() OVER (PARTITION BY A.TIME_FILTER_ID ORDER BY A.SEQUENCE DESC)) AS SEQUENCE,   
                       A.TIME_INTERVAL_ID,          
                       ADD_SECONDS(CURRENT_UTCTIMESTAMP,A.START_OFFSET) AS START_TIME,
                       ADD_SECONDS(CURRENT_UTCTIMESTAMP,A.END_OFFSET) AS END_TIME,
                       A.END_OFFSET - A.START_OFFSET AS INTERVAL
                       FROM :sql0 A 
                       WHERE (A.OFFSET_FLAG = 1 AND  A.DIRECTION_FLAG = 1 AND A.UNIT_ID = 1);-- offset = 1,but unit type is hour,so ignore the offset,history
        
     -- no offset,future or unit type is hour
     TIME_INTERVAL_LIST2 = 
                 SELECT 
                       A.TIME_FILTER_ID AS ID,
                       A.SEQUENCE,
                       A.TIME_INTERVAL_ID,
                       ADD_SECONDS(CURRENT_UTCTIMESTAMP,A.START_OFFSET) AS START_TIME,
                       ADD_SECONDS(CURRENT_UTCTIMESTAMP,A.END_OFFSET) AS END_TIME,
                       A.END_OFFSET - A.START_OFFSET AS INTERVAL
                       FROM :sql0 A
                       WHERE (A.OFFSET_FLAG = 0 AND A.DIRECTION_FLAG = 2) -- offset = 0, future
                 UNION
                SELECT 
                       A.TIME_FILTER_ID AS ID,
                       A.SEQUENCE,
                       A.TIME_INTERVAL_ID,
                       ADD_SECONDS(CURRENT_UTCTIMESTAMP,A.START_OFFSET) AS START_TIME,
                       ADD_SECONDS(CURRENT_UTCTIMESTAMP,A.END_OFFSET) AS END_TIME,
                       A.END_OFFSET - A.START_OFFSET AS INTERVAL
                       FROM :sql0 A
                       WHERE (A.OFFSET_FLAG = 1 AND A.DIRECTION_FLAG = 2 AND A.UNIT_ID = 1); -- offset = 1,but unit type is hour,so ignore the offset,history
       
     --unit type is not hour, offset is active, history      

         sqlA1 = SELECT   
                       A.TIME_FILTER_ID,
                       A.SEQUENCE,
                       A.TIME_INTERVAL_ID,
                       A.UTC_START_TIMESTAMP AS START_TIME,
                       CURRENT_UTCTIMESTAMP AS END_TIME
                       FROM :sql0 A
                       WHERE A.OFFSET_FLAG = 1 AND A.DIRECTION_FLAG = 1 AND A.UNIT_ID != 1 AND A.SEQUENCE = 1;
                                                                                                                                 
         sqlA2 = SELECT 
                       A.TIME_FILTER_ID ,
                       A.SEQUENCE,     
                       A.TIME_INTERVAL_ID,             
                       ADD_SECONDS(A.UTC_START_TIMESTAMP,A.START_OFFSET - B.START_OFFSET) AS START_TIME,
                       ADD_SECONDS(A.UTC_START_TIMESTAMP,A.END_OFFSET - B.START_OFFSET) AS END_TIME
                       FROM :sql0 A 
                       INNER JOIN :sql0 B 
                       ON A.TIME_FILTER_ID = B.TIME_FILTER_ID 
                       AND B.SEQUENCE = 1
                       WHERE A.OFFSET_FLAG = 1 AND A.DIRECTION_FLAG = 1 AND A.UNIT_ID != 1 AND A.SEQUENCE != 1;
                       
         sqlA = SELECT * FROM
                       (
                         SELECT * FROM :sqlA1
                         UNION
                         SELECT * FROM :sqlA2
                       );
                                                                                      
         TIME_INTERVAL_LIST3 = SELECT 
                       A.TIME_FILTER_ID AS ID,
                       (ROW_NUMBER() OVER (PARTITION BY A.TIME_FILTER_ID ORDER BY A.START_TIME)) AS SEQUENCE,-- recount sequence
                       A.TIME_INTERVAL_ID,
                       A.START_TIME,
                       A.END_TIME,
                       SECONDS_BETWEEN(A.START_TIME,A.END_TIME) AS INTERVAL
                       FROM :sqlA A
                       ORDER BY A.START_TIME DESC;
                                                                                                                                          
    -- unit type is not hour, offset is active, future    
         sqlB1 = SELECT   
                       A.TIME_FILTER_ID,
                       A.SEQUENCE,
                       A.TIME_INTERVAL_ID,
                       CURRENT_UTCTIMESTAMP AS START_TIME,
                       A.UTC_START_TIMESTAMP AS END_TIME
                       FROM :sql0 A
                       WHERE A.OFFSET_FLAG = 1 AND A.DIRECTION_FLAG = 2 AND A.UNIT_ID != 1 AND A.SEQUENCE = 1;
                                                                                                                                 
         sqlB2 = SELECT 
                       A.TIME_FILTER_ID ,
                       A.SEQUENCE,     
                       A.TIME_INTERVAL_ID,             
                       ADD_SECONDS(A.UTC_START_TIMESTAMP,A.START_OFFSET - B.END_OFFSET) AS START_TIME,
                       ADD_SECONDS(A.UTC_START_TIMESTAMP,A.END_OFFSET - B.END_OFFSET) AS END_TIME
                       FROM :sql0 A 
                       INNER JOIN :sql0 B 
                       ON A.TIME_FILTER_ID = B.TIME_FILTER_ID 
                       AND B.SEQUENCE = 1
                       WHERE A.OFFSET_FLAG = 1 AND A.DIRECTION_FLAG = 2 AND A.UNIT_ID != 1 AND A.SEQUENCE != 1;
                       
         sqlB = SELECT * FROM
                       (
                         SELECT * FROM :sqlB1
                         UNION
                         SELECT * FROM :sqlB2
                       );
                                                                                           
         TIME_INTERVAL_LIST4 = SELECT 
                       A.TIME_FILTER_ID AS ID,
                       (ROW_NUMBER() OVER (PARTITION BY A.TIME_FILTER_ID ORDER BY A.START_TIME)) AS SEQUENCE,-- recount sequence
                       A.TIME_INTERVAL_ID,
                       A.START_TIME,
                       A.END_TIME,
                       SECONDS_BETWEEN(A.START_TIME, A.END_TIME) AS INTERVAL
                       FROM :sqlB A
                       ORDER BY A.START_TIME; 
                               
         OUT_PUT = SELECT * FROM 
                   (
                   SELECT * FROM :TIME_INTERVAL_LIST1 -- offset = 0, history or unit type is hour
                   UNION
                   SELECT * FROM :TIME_INTERVAL_LIST2 -- offset = 0, future or unit type is hour
                   UNION
                   SELECT * FROM :TIME_INTERVAL_LIST3 -- offset = 1 , history , unit type is not hour  
                   UNION
                   SELECT * FROM :TIME_INTERVAL_LIST4 -- offset = 1 , future , unit type is not hour
                   )A
                   ORDER BY A.ID, A.SEQUENCE;
                   
         var_out = SELECT T1.ID,T1.SEQUENCE,T1.TIME_INTERVAL_ID,T1.START_TIME,T1.END_TIME,T1.INTERVAL,
         UTCTOLOCAL(T1.START_TIME,T2.TIMEZONE_ID,'platform') AS START_TIME_FIXED,
 		 UTCTOLOCAL(T1.END_TIME,T2.TIMEZONE_ID,'platform') AS END_TIME_FIXED FROM :OUT_PUT T1
         INNER JOIN &quot;sap.tm.trp.db.filter::t_time_filter&quot; T2 ON T1.ID = T2.ID;
          
END </definition>
    </calculationView>
  </calculationViews>
  <logicalModel id="Script_View">
    <descriptions/>
    <attributes/>
    <calculatedAttributes/>
    <privateDataFoundation>
      <tableProxies/>
      <joins/>
      <layout>
        <shapes/>
      </layout>
    </privateDataFoundation>
    <baseMeasures>
      <measure id="ID" order="1" aggregationType="sum" measureType="simple">
        <descriptions defaultDescription="ID"/>
        <measureMapping columnObjectName="Script_View" columnName="ID"/>
      </measure>
      <measure id="SEQUENCE" order="2" aggregationType="sum" measureType="simple">
        <descriptions defaultDescription="SEQUENCE"/>
        <measureMapping columnObjectName="Script_View" columnName="SEQUENCE"/>
      </measure>
      <measure id="TIME_INTERVAL_ID" order="3" aggregationType="sum" measureType="simple">
        <descriptions defaultDescription="TIME_INTERVAL_ID"/>
        <measureMapping columnObjectName="Script_View" columnName="TIME_INTERVAL_ID"/>
      </measure>
      <measure id="START_TIME" order="4" aggregationType="min" measureType="simple">
        <descriptions defaultDescription="START_TIME"/>
        <measureMapping columnObjectName="Script_View" columnName="START_TIME"/>
      </measure>
      <measure id="END_TIME" order="5" aggregationType="min" measureType="simple">
        <descriptions defaultDescription="END_TIME"/>
        <measureMapping columnObjectName="Script_View" columnName="END_TIME"/>
      </measure>
      <measure id="INTERVAL" order="6" aggregationType="sum" measureType="simple">
        <descriptions defaultDescription="INTERVAL"/>
        <measureMapping columnObjectName="Script_View" columnName="INTERVAL"/>
      </measure>
      <measure id="START_TIME_FIXED" order="7" aggregationType="min" measureType="simple">
        <descriptions defaultDescription="START_TIME"/>
        <measureMapping columnObjectName="Script_View" columnName="START_TIME_FIXED"/>
      </measure>
      <measure id="END_TIME_FIXED" order="8" aggregationType="min" measureType="simple">
        <descriptions defaultDescription="START_TIME"/>
        <measureMapping columnObjectName="Script_View" columnName="END_TIME_FIXED"/>
      </measure>
    </baseMeasures>
    <calculatedMeasures/>
    <restrictedMeasures/>
    <localDimensions/>
  </logicalModel>
  <layout>
    <shapes>
      <shape modelObjectName="Output" modelObjectNameSpace="MeasureGroup">
        <upperLeftCorner x="40" y="85"/>
      </shape>
    </shapes>
  </layout>
</Calculation:scenario>