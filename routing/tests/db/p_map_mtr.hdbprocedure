PROCEDURE "SAP_TM_ROUTING_TEST"."sap.tm.trp.routing.tests.db::p_map_mtr" (
    IN id_mtr "sap.tm.trp.routing.tests.db::tt_mot_mtr",
    OUT return_code SMALLINT,
    OUT message TABLE (
        severity CHAR, 
        message NVARCHAR(255)
    ),
    OUT mapped_id_mtr TABLE (
        id NVARCHAR(50),
        mtr NVARCHAR(10)
    )
)
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_ROUTING_TEST"
    READS SQL DATA AS
BEGIN
    DECLARE count INTEGER;
    
    return_code = 0;
    
    ranked_mtr_map = SELECT mot, mtr, trp_mtr, 
    CASE WHEN mot = '' AND mtr = '' THEN 3
    WHEN mtr = '' THEN 2
    ELSE 1 END AS rule_rank
    FROM "sap.tm.trp.routing.tests.db::t_mtr_map";
    
    mapped_id_mtr = SELECT id, 
    FIRST_VALUE(trp_mtr ORDER BY rule_rank) AS mtr
    FROM :id_mtr AS o
    INNER JOIN :ranked_mtr_map AS m
    ON (
        (o.mot = m.mot AND o.mtr = m.mtr) OR
        (o.mot = m.mot AND m.mtr = '') OR
        (m.mot = '' AND m.mtr = '')
    ) GROUP BY o.id;
    
    invalid_mtr = SELECT DISTINCT mot, mtr
    FROM :id_mtr
    WHERE id NOT IN (SELECT id FROM :mapped_id_mtr);
    
    SELECT COUNT(*) INTO count FROM :invalid_mtr;
    
    IF :count > 0 THEN
        return_code = 1;
        
        msg_params = SELECT mot || mtr AS group_id, 0 AS placeholder, mot AS value
        FROM :invalid_mtr
        UNION ALL
        SELECT mot || mtr AS group_id, 1 AS placeholder, mtr AS value
        FROM :invalid_mtr;
        
	    CALL "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_MTR_MAP_NOT_FOUND', :msg_params, 'E', :message);
        RETURN;
    END IF;
END;