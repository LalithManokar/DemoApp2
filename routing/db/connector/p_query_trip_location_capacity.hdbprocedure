PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.connector::p_query_trip_location_capacity" (
    IN trip_ids TABLE (trip_id NVARCHAR(100)), 
    OUT trip_location_capacity table (
         TRIP_ID NVARCHAR(100),
         SEQUENCE INTEGER,
         CAPACITY DECIMAL(15,3),
         CAPACITY_UOM NVARCHAR(10)
    )
   ) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_ROUTING"
    READS SQL DATA AS
BEGIN
    DECLARE count INTEGER;
    
    departures = select distinct d.db_key, TO_NVARCHAR(d.db_key) AS trip_id 
    FROM "sap.tm.trp.db.semantic.schedule::v_departure" d
    INNER JOIN :trip_ids i
    ON d.db_key = i.trip_id;
    
    SELECT COUNT(*) INTO count FROM :departures;
    
    IF :count > 0 THEN
       
        trip_location_temp = select d.trip_id, l.loc_seq, c.maxload AS capacity, c.uom AS capacity_uom
        FROM :departures AS d
        INNER JOIN "sap.tm.trp.db.semantic.schedule::v_departure_location" AS l
        ON d.db_key = l.parent_key
        LEFT OUTER JOIN "sap.tm.trp.db.semantic.schedule::v_capacity" AS c
        ON l.DB_KEY = c.DB_KEY
        AND c.TR_CAPA_BASIS = 'VDP'
        ORDER BY trip_id, l.loc_seq;
        
        schedule_location_capacity = select trip_id, 
        row_number() over(partition by trip_id order by loc_seq asc) - 1 as "SEQUENCE", 
        capacity, capacity_uom
        from :trip_location_temp order by trip_id, loc_seq;
        
        ELSE
        schedule_location_capacity = select '' AS trip_id, 0 AS sequence, 0 AS capacity, NULL AS capacity_uom
        FROM DUMMY WHERE 1 <> 1;
    END IF;
    
    -- No capacity is supported for TOR yet
    --tor_location_capacity = select '' AS trip_id, 0 AS sequence, 0 AS capacity, NULL AS capacity_uom
    --FROM DUMMY WHERE 1 <> 1;
    
    trip_location_capacity = SELECT * FROM :schedule_location_capacity WHERE capacity_uom IS NOT NULL;
    
END;