PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.connector::p_query_trip_locations" (
    IN trip_ids TABLE (trip_id NVARCHAR(100)), 
    OUT trip_location table (
         TRIP_ID NVARCHAR(100),
         SEQUENCE INTEGER,
         LOCATION NVARCHAR(50),
         DISTANCE DOUBLE, 
         DEPART_TIME TIMESTAMP,
         ARRIVAL_TIME TIMESTAMP,
         vehicle_id NVARCHAR(50),
         cutoff_offset INTEGER,
         availability_offset INTEGER
    )
   ) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_ROUTING"
    READS SQL DATA AS
BEGIN

    DECLARE count INTEGER;
    
    departures = select distinct d.db_key, parent_key AS schedule_key,
    TO_NVARCHAR(d.db_key) AS trip_id 
    FROM "sap.tm.trp.db.semantic.schedule::v_departure" d
    INNER JOIN :trip_ids i
    ON d.db_key = i.trip_id;
    
    SELECT COUNT(*) INTO count FROM :departures;
    
    IF :count > 0 THEN
       
        trip_location_temp = select dep.trip_id, l.loc_seq, 
        l.departure_utc as depart_time, 
        l.arrival_utc as arrival_time,
        l.vessel AS vehicle_id,
        CASE WHEN l.cutoff_utc IS NULL OR l.cutoff_utc >= l.departure_utc THEN 0
        ELSE SECONDS_BETWEEN(l.cutoff_utc, l.departure_utc) END
        AS cutoff_offset,
        CASE WHEN l.availability_utc IS NULL OR l.availability_utc <= l.arrival_utc THEN 0
        ELSE SECONDS_BETWEEN(l.arrival_utc, l.availability_utc) END
        AS availability_offset
        FROM :departures AS dep
        INNER JOIN "sap.tm.trp.db.semantic.schedule::v_departure_location" AS l
        ON dep.db_key = l.parent_key
        ORDER BY trip_id, l.loc_seq; 
        
        -- Number schedule location and trip location
        -- Distance is saved in the first location in schedule for each segment
        -- We need it for the second location
        -- We also need location name with the same sequence
        -- Locations are renumbered to start from 0 as assumed in route
        schedule_location_temp = select distinct dep.trip_id, l.loc_seq, l.location_name as location, l.distance_km as distance
        from :departures as dep
        inner join "sap.tm.trp.db.semantic.schedule::v_schedule_location" as l
        on dep.schedule_key = l.parent_key
        order by l.loc_seq;
        
        schedule_location_numbered = select trip_id, row_number() over(partition by trip_id order by loc_seq asc) as "SEQUENCE",
        location, distance
        from :schedule_location_temp;
        
        trip_location_numbered = select trip_id, row_number() over(partition by trip_id order by loc_seq asc) as "SEQUENCE", 
        loc_seq, depart_time, arrival_time, vehicle_id, cutoff_offset, availability_offset
        from :trip_location_temp order by trip_id, loc_seq;
        
        -- Location starts from 0
        schedule_trip_location = select l.trip_id, l.sequence - 1 AS sequence, sl1.location,  
        case when sl2.distance is null then 0 else sl2.distance end as distance, 
        l.depart_time, l.arrival_time, vehicle_id, 
        cutoff_offset, availability_offset
        from :trip_location_numbered as l
        inner join :schedule_location_numbered as sl1
        on l.trip_id = sl1.trip_id and l.sequence = sl1.sequence
        left outer join :schedule_location_numbered as sl2
        on l.trip_id = sl2.trip_id and l.sequence = sl2.sequence + 1;
    
    ELSE
        
        schedule_trip_location = select '' AS trip_id, 0 AS sequence, '' AS location,  
        0 as distance, NULL AS depart_time,  NULL AS arrival_time, NULL AS vehicle_id,
        0 AS cutoff_offset, 0 AS availability_offset
        FROM DUMMY WHERE 1 <> 1;
    END IF;
    
    -- Build trip for TOR
    tor = SELECT t.db_key AS tor_key
    FROM "sap.tm.trp.db.semantic.order::v_freight_order" t 
    INNER JOIN :trip_ids i
    ON t.db_key = i.trip_id;
    
    SELECT COUNT(*) INTO count FROM :tor;
    
    IF :count > 0 THEN
        tor_stages = SELECT trip_id, RANK() OVER (PARTITION BY trip_id ORDER BY sequence) AS sequence, from_location,
        to_location, distance_km as distance, depart_time, arrival_time, vessel_id
        FROM (SELECT TO_NVARCHAR(t.tor_key) AS trip_id, 
        case s3.stop_seq_pos when 'L' then TO_INT(s2.sequence) + 1000 else TO_INT(s2.sequence) end AS sequence,  -- Bug in TM stage table
        s1.location_name AS from_location, s3.location_name AS to_location, s2.distance_km, 
        s1.sel_time AS depart_time, s3.sel_time AS arrival_time, s2.vessel AS vessel_id
        FROM :tor AS t
        INNER JOIN "sap.tm.trp.db.semantic.order::v_freight_order_stop" AS s1
        ON t.tor_key = s1.freight_order_key
        INNER JOIN "sap.tm.trp.db.semantic.order::v_freight_order_stage" AS s2
        ON s1.db_key = s2.from_stop_key
        INNER JOIN "sap.tm.trp.db.semantic.order::v_freight_order_stop" AS s3
        ON s2.to_stop_key = s3.db_key
        WHERE s1.stop_cat = 'O' ORDER BY sequence);
        
        tor_trip_location = SELECT s1.trip_id, s1.sequence, s1.to_location AS location, s1.distance, 
        s2.depart_time, s1.arrival_time, s1.vessel_id AS vehicle_id, 
        0 AS cutoff_offset, 0 AS availability_offset
        FROM :tor_stages AS s1
        LEFT OUTER JOIN :tor_stages AS s2
        ON s1.trip_id = s2.trip_id
        AND s1.sequence + 1 = s2.sequence
        UNION ALL
        SELECT TO_NVARCHAR(t.tor_key) AS trip_id, 0 AS sequence, l.location_name AS location, 0 AS distance, 
        l.sel_time AS depart_time, NULL AS arrival_time,
        NULL AS vehicle_id, 0 AS cutoff_offset, 0 AS availability_offset
        FROM :tor AS t
        INNER JOIN "sap.tm.trp.db.semantic.order::v_freight_order_stop" AS l 
        ON t.tor_key = l.freight_order_key
        WHERE l.stop_seq_pos = 'F';
        
    ELSE
        tor_trip_location = select '' AS trip_id, 0 AS sequence, '' AS location,  
        0 as distance, NULL AS depart_time,  NULL AS arrival_time, NULL AS vehicle_id, 
        0 AS cutoff_offset, 0 AS availability_offset
        FROM DUMMY WHERE 1 <> 1;
    
    END IF;
    
    trip_location = SELECT * FROM :schedule_trip_location
    UNION ALL
    SELECT * FROM :tor_trip_location;
    
END;