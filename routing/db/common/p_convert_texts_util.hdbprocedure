PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_convert_texts_util" ( 
    IN internal_message "sap.tm.trp.routing.db.common::tt_message_internal",
    OUT message "sap.tm.trp.routing.db.common::tt_message",
    OUT log_message "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   DECLARE CURSOR msg_csr FOR SELECT TOP 100 * FROM :internal_message; -- 100 message limit
   DECLARE ord INTEGER ARRAY;
   DECLARE para_arr VARCHAR(100) ARRAY;
   DECLARE is_log INTEGER;
   
   DECLARE severity VARCHAR(1);
   DECLARE msg_id VARCHAR(100);
   DECLARE msg_params TABLE(PLACEHOLDER INTEGER, VALUE VARCHAR(100));

   ord[1] = 0;
   ord[2] = 1;
   ord[3] = 2;
   ord[4] = 3;
   
   FOR int_msg AS msg_csr DO
    para_arr[1] = int_msg.var0;
    para_arr[2] = int_msg.var1;
    para_arr[3] = int_msg.var2;
    para_arr[4] = int_msg.var3;
    msg_params = UNNEST(:ord, :para_arr) AS ("PLACEHOLDER", "VALUE");
    
    msg_id = int_msg.message_id;
    severity = int_msg.severity;
    IF :severity = 'L' THEN
        severity = 'I';
        is_log = 1;
    ELSE
        is_log = 0;
    END IF;

    CALL "sap.tm.trp.routing.db.common::p_get_text"(:msg_id, :msg_params, :severity, msg_tmp);
    
    IF :is_log = 1 THEN
        log_message =
        SELECT * FROM :log_message
        UNION ALL
        SELECT * FROM :msg_tmp;
    ELSE
        message = 
        SELECT * FROM :message
        UNION ALL
        SELECT * FROM :msg_tmp;
        
        log_message =
        SELECT * FROM :log_message
        UNION ALL
        SELECT * FROM :msg_tmp;
    END IF;
   END FOR;
END