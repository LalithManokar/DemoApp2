PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_update_delta_dataset" (
    IN dataset_id BIGINT,
    IN connection_added "sap.tm.trp.routing.db.dataset::tt_connection",
    IN connection_carrier_added "sap.tm.trp.routing.db.dataset::tt_connection_carrier",
    IN path_added "sap.tm.trp.routing.db.dataset::tt_path",
    IN path_connection_added "sap.tm.trp.routing.db.dataset::tt_path_connection",
    IN connection_updated "sap.tm.trp.routing.db.dataset::tt_connection",
    IN connection_carrier_updated "sap.tm.trp.routing.db.dataset::tt_connection_carrier",
    IN path_updated "sap.tm.trp.routing.db.dataset::tt_path",
    IN path_connection_updated"sap.tm.trp.routing.db.dataset::tt_path_connection",
    IN connection_deleted "sap.tm.trp.routing.db.common::tt_id",
	IN path_deleted "sap.tm.trp.routing.db.common::tt_id",
    OUT return_code TINYINT
    --OUT connection_id_map "sap.tm.trp.routing.db.dataset::tt_id_map",
    --OUT path_id_map "sap.tm.trp.routing.db.dataset::tt_id_map",
    --OUT message "sap.tm.trp.routing.db.common::tt_message",
    --OUT log "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
    DECLARE dataset_code NVARCHAR(50);
	DECLARE msg_param TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
	
	-- Check whether the dataset exist or not
	DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299
    BEGIN
        return_code = 1;
        msg_params = SELECT 0 AS PLACEHOLDER, :dataset_id AS VALUE FROM DUMMY;
	    call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_DATASET_ID_NOT_EXIST', :msg_params, 'E', :message);
    END;
	
	return_code = 1;
	
	-- Check existence and lock the dataset
	SELECT code INTO dataset_code 
	FROM "sap.tm.trp.routing.db.dataset::t_dataset"
	WHERE id = :dataset_id FOR UPDATE; 
	
	-- Delete connection
    --CALL "sap.tm.trp.routing.db.dataset::p_remove_connection"(
    --    :dataset_id,
	--    :connection_deleted,
	--    :return_code,
	--    :connection_id_map,
	--    :message,
	--    :log
	--);
	
	IF return_code <> 0 THEN
	    RETURN;
	END IF;
	
	-- Add connection
	--CALL "sap.tm.trp.routing.db.dataset::p_add_connection" (
	--    :dataset_id,
	--    :connection_added,
	--    :connection_carrier_added,
	--    :return_code,
	--    :connection_id_map_tmp,
	---    :message_tmp,
	--    :log_tmp
	--);
	
	-- Discard success message generated before
	--IF return_code <> 0 THEN
	--    message = SELECT * FROM :message_tmp;
	--    log = SELECT * FROM :log_tmp;
	--    RETURN;
	--END IF;

    --message = SELECT * FROM :message_tmp
    --UNION ALL SELECT * FROM :message;
    
    --log = SELECT * FROM :log_tmp
    --UNION ALL SELECT * FROM :log;
    
    --connection_id_map = SELECT * FROM :connection_id_map
    --UNION ALL SELECT * FROM :connection_id_map_tmp;
    
    -- Update connection delta
    --CALL "sap.tm.trp.routing.db.dataset::p_update_connection" (
	--    :dataset_id,
	--   :connection_updated,
	--    :connection_carrier_updated,
	--    :return_code,
	--    :connection_id_map_tmp,
	--    :message_tmp,
	--    :log_tmp
	--);
	
	-- Discard success message generated before
	
    
    --connection_id_map = SELECT * FROM :connection_id_map
    --UNION ALL SELECT * FROM :connection_id_map_tmp;
    
    -- To-do: add, update and remove path
    --path_id_map = SELECT '' AS external_id, 0 AS id
    --FROM DUMMY WHERE 1 <> 1;
	
	-- Invalidate dataset
	-- Network model using the dataset will be invalidated
	-- The invalidation will be executed recursively
	--call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_invalidate_dataset"
    --(:dataset_id, :return_code, :message_tmp, :log_tmp);
    
    --IF return_code <> 0 THEN
    --    message = SELECT * FROM :message_tmp;
	--    log = SELECT * FROM :log_tmp;
	--    RETURN;
    --END IF;
    
    --message = SELECT * FROM :message_tmp
    --UNION ALL SELECT * FROM :message;
    
    --log = SELECT * FROM :log_tmp
    --UNION ALL SELECT * FROM :log;
	
	UPDATE "sap.tm.trp.routing.db.dataset::t_dataset"
	SET changed_by = SESSION_CONTEXT('APPLICATIONUSER'), changed_on = CURRENT_TIMESTAMP
	WHERE id = :dataset_id; 
	
    msg_params = SELECT 0 AS PLACEHOLDER, :dataset_code AS VALUE FROM DUMMY;
    call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
    ('MSG_DELTA_ADDED_SUCCESS', :msg_params, 'I', :message_tmp);
    
    -- message = SELECT * FROM :message_tmp
    -- UNION ALL SELECT * FROM :message;
	
	return_code = 0;
END