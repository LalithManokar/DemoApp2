PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_validate_path" (
    IN paths "sap.tm.trp.routing.db.dataset::tt_path",
    IN path_connection "sap.tm.trp.routing.db.dataset::tt_path_connection",
	OUT return_code TINYINT,
	OUT message "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA "SAP_TM_ROUTING"
   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	DECLARE count INTEGER = 0;
	DECLARE msg_param TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
	DECLARE msg_params TABLE(GROUP_ID NVARCHAR(100), PLACEHOLDER INTEGER, VALUE NVARCHAR(100));

	message = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1; 	
	return_code = 0;
    
    -- ID must be set
    -- Normally it is a programming error
    -- So quick fail
    SELECT COUNT(*) INTO count FROM :paths WHERE id IS NULL;
    
    IF count > 0 THEN
        return_code = 1;
        msg_param = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_PATH_ID_MISSING', :msg_param, 'E', :message);
        RETURN;
    END IF;
    
    SELECT COUNT(*) INTO count FROM :path_connection WHERE path_id IS NULL;
    
    IF count > 0 THEN
        return_code = 1;
        msg_param = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_PATH_CONNECTION_PATH_ID_MISSING', :msg_param, 'E', :message);
        RETURN;
    END IF;
    
    -- Check sequence
    path_id = SELECT DISTINCT path_id AS id FROM :path_connection
    WHERE sequence IS NULL;
    
    SELECT COUNT(*) INTO count FROM :path_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :path_id;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_SEQUENCE_MISSING', :msg_params, 'E', :message_tmp);
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
        
        RETURN;
    END IF;
    
    -- Check from location
    path_id = SELECT id FROM :paths
    WHERE from_location IS NULL OR from_location = '';
    
    SELECT COUNT(*) INTO count FROM :path_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :path_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_FROM_LOCATION_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    ELSE
        path_location = SELECT id, from_location AS location FROM :paths
        WHERE from_location NOT IN (SELECT name FROM "sap.tm.trp.db.semantic.location::v_all_location");
        
        SELECT COUNT(*) INTO count FROM :path_location;
    
        IF count > 0 THEN
            return_code = 1;
            msg_params = SELECT id AS group_id, 0 AS placeholder,
            id AS value FROM :path_location
            UNION ALL
            SELECT id AS group_id, 1 AS placeholder,
            location AS value FROM :path_location;
            
            call "sap.tm.trp.routing.db.common::p_get_text_batch"
            ('MSG_PATH_LOCATION_NOT_FOUND', :msg_params, 'E', :message_tmp);
            
            message = SELECT * FROM :message 
            UNION ALL SELECT * FROM :message_tmp;
        END IF;
        
    END IF;
    
    -- Check to location
    path_id = SELECT id FROM :paths
    WHERE to_location IS NULL OR to_location = '';
    
    SELECT COUNT(*) INTO count FROM :path_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :path_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_TO_LOCATION_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    ELSE
        path_location = SELECT id, to_location AS location FROM :paths
        WHERE to_location NOT IN (SELECT name FROM "sap.tm.trp.db.semantic.location::v_all_location");
        
        SELECT COUNT(*) INTO count FROM :path_location;
    
        IF count > 0 THEN
            return_code = 1;
            msg_params = SELECT id AS group_id, 0 AS placeholder,
            id AS value FROM :path_location
            UNION ALL
            SELECT id AS group_id, 1 AS placeholder,
            location AS value FROM :path_location;
            
            call "sap.tm.trp.routing.db.common::p_get_text_batch"
            ('MSG_PATH_LOCATION_NOT_FOUND', :msg_params, 'E', :message_tmp);
            
            message = SELECT * FROM :message 
            UNION ALL SELECT * FROM :message_tmp;
        END IF;
        
    END IF;
    
    -- Check MTR
    path_id = SELECT id FROM :paths
    WHERE mtr IS NULL OR mtr = '';
    
    SELECT COUNT(*) INTO count FROM :path_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :path_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_MTR_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check whether MTR is valid or not
    invalid_mtr = SELECT mtr FROM :paths
    WHERE mtr <> '' AND mtr NOT IN
    (SELECT code FROM "sap.tm.trp.db.semantic.common::v_transportation_means");
    
    SELECT COUNT(*) INTO count FROM :invalid_mtr;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT mtr AS group_id, 0 AS placeholder,
        mtr AS value FROM :invalid_mtr;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_MTR_INVALID', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check from location of path connection
    path_sequence = SELECT path_id, sequence FROM :path_connection
    WHERE from_location IS NULL OR from_location = '';
    
    SELECT COUNT(*) INTO count FROM :path_sequence;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_sequence
        UNION ALL
        SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
        TO_NVARCHAR(sequence) AS value FROM :path_sequence;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_FROM_LOCATION_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    ELSE
        path_sequence_location = SELECT path_id, sequence, from_location AS location FROM :path_connection
        WHERE from_location NOT IN (SELECT name FROM "sap.tm.trp.db.semantic.location::v_all_location");
        
        SELECT COUNT(*) INTO count FROM :path_sequence_location;
    
        IF count > 0 THEN
            return_code = 1;
            msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
            path_id AS value FROM :path_sequence_location
            UNION ALL
            SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
            TO_NVARCHAR(sequence) AS value FROM :path_sequence_location
            UNION ALL
            SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 2 AS placeholder,
            location AS value FROM :path_sequence_location;
            
            call "sap.tm.trp.routing.db.common::p_get_text_batch"
            ('MSG_PATH_CONNECTION_LOCATION_NOT_FOUND', :msg_params, 'E', :message_tmp);
            
            message = SELECT * FROM :message 
            UNION ALL SELECT * FROM :message_tmp;
        END IF;
        
    END IF;
    
    -- Check to location of path connection
    path_sequence = SELECT path_id, sequence FROM :path_connection
    WHERE to_location IS NULL OR to_location = '';
    
    SELECT COUNT(*) INTO count FROM :path_sequence;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_sequence
        UNION ALL
        SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
        TO_NVARCHAR(sequence) AS value FROM :path_sequence;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_TO_LOCATION_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    ELSE
        path_sequence_location = SELECT path_id, sequence, to_location AS location FROM :path_connection
        WHERE to_location NOT IN (SELECT name FROM "sap.tm.trp.db.semantic.location::v_all_location");
        
        SELECT COUNT(*) INTO count FROM :path_sequence_location;
    
        IF count > 0 THEN
            return_code = 1;
            msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
            path_id AS value FROM :path_sequence_location
            UNION ALL
            SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
            TO_NVARCHAR(sequence) AS value FROM :path_sequence_location
            UNION ALL
            SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 2 AS placeholder,
            location AS value FROM :path_sequence_location;
            
            call "sap.tm.trp.routing.db.common::p_get_text_batch"
            ('MSG_PATH_CONNECTION_LOCATION_NOT_FOUND', :msg_params, 'E', :message_tmp);
            
            message = SELECT * FROM :message 
            UNION ALL SELECT * FROM :message_tmp;
        END IF;
        
    END IF;
    
    
    path_sequence = SELECT path_id, sequence FROM :path_connection
    WHERE from_location IS NOT NULL AND from_location <> ''
    AND to_location IS NOT NULL AND to_location <> '';
    /* AND from_location = to_location;
    
    SELECT COUNT(*) INTO count FROM :path_sequence;

    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_sequence
        UNION ALL
        SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
        TO_NVARCHAR(sequence) AS value FROM :path_sequence;
        call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_IDENTICAL_SOURCE_DESTINATION', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF; */
    
    -- Check distance
    path_sequence = SELECT path_id, sequence FROM :path_connection
    WHERE distance IS NULL OR distance < 0;
    
    SELECT COUNT(*) INTO count FROM :path_sequence;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_sequence
        UNION ALL
        SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
        TO_NVARCHAR(sequence) AS value FROM :path_sequence;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_DISTANCE_INVALID', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check duration
    path_sequence = SELECT path_id, sequence FROM :path_connection
    WHERE duration IS NULL OR duration < 0;
    
    SELECT COUNT(*) INTO count FROM :path_sequence;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_sequence
        UNION ALL
        SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
        TO_NVARCHAR(sequence) AS value FROM :path_sequence;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_DURATION_INVALID', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check stay time
    path_sequence = SELECT path_id, sequence FROM :path_connection
    WHERE stay_time < 0;
    
    SELECT COUNT(*) INTO count FROM :path_sequence;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_sequence
        UNION ALL
        SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
        TO_NVARCHAR(sequence) AS value FROM :path_sequence;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_STAY_TIME_INVALID', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check validity of sequence
    path_sequence = SELECT path_id, sequence 
    FROM :path_connection
    WHERE sequence < 0;
    
    SELECT COUNT(*) INTO count FROM :path_sequence;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_sequence
        UNION ALL
        SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
        TO_NVARCHAR(sequence) AS value FROM :path_sequence;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_SEQUENCE_INVALID', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check duplicate sequence
    path_sequence = SELECT path_id, sequence 
    FROM :path_connection
    GROUP BY path_id, sequence
    HAVING count(*) > 1;
    
    SELECT COUNT(*) INTO count FROM :path_sequence;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_sequence
        UNION ALL
        SELECT path_id || TO_NVARCHAR(sequence) AS group_id, 1 AS placeholder,
        TO_NVARCHAR(sequence) AS value FROM :path_sequence;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_DUPLICATE_SEQUENCE', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    path_consequent_sequence = SELECT path_id, previous_sequence, next_sequence
        FROM (SELECT path_id, sequence AS previous_sequence, to_location AS previous_location, 
        LEAD (sequence, 1) OVER (PARTITION BY path_id ORDER BY sequence ASC) AS next_sequence, 
        LEAD (from_location, 1) OVER (PARTITION BY path_id ORDER BY sequence ASC) AS next_location 
        FROM :path_connection WHERE to_location IS NOT NULL AND to_location <> ''
    )
    WHERE previous_location <> next_location AND next_location IS NOT NULL AND next_location <> '';
    
    SELECT COUNT(*) INTO count FROM :path_consequent_sequence;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT path_id AS group_id, 0 AS placeholder,
        path_id AS value FROM :path_consequent_sequence
        UNION ALL
        SELECT path_id AS group_id, 1 AS placeholder,
        TO_NVARCHAR(previous_sequence) AS value FROM :path_consequent_sequence
        UNION ALL
        SELECT path_id AS group_id, 2 AS placeholder,
        TO_NVARCHAR(next_sequence) AS value FROM :path_consequent_sequence;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_CONNECTION_FROM_LOCATION_NOT_CONNECTED', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check from location and to location of path
    path_id = SELECT id 
    FROM (SELECT id, from_location, to_location FROM :paths
        WHERE from_location IS NOT NULL AND from_location <> '' 
        AND to_location IS NOT NULL AND to_location <> ''
    ) AS p
    LEFT OUTER JOIN (
        SELECT path_id, FIRST_VALUE(from_location ORDER BY sequence ASC)
        AS from_location,
        LAST_VALUE(to_location ORDER BY sequence ASC)
        AS to_location
        FROM :path_connection
        GROUP BY path_id
    ) AS c
    ON p.id = c.path_id
    WHERE c.from_location IS NOT NULL AND c.from_location <> '' 
    AND c.to_location IS NOT NULL AND c.to_location <> ''
    AND (p.from_location <> c.from_location OR p.to_location <> c.to_location);
    
    SELECT COUNT(*) INTO count FROM :path_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :path_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_FROM_TO_LOCATION_INCONSISTENT', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    path_id = SELECT id FROM :paths
    WHERE id NOT IN (SELECT DISTINCT path_id FROM :path_connection);
    
    
    SELECT COUNT(*) INTO count FROM :path_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :path_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_PATH_WITHOUT_CONNECTION', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
	
END;