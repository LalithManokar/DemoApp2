PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_update_path_global_capacity"(
    IN dataset_code NVARCHAR(50),
    IN path_id BIGINT,
    IN capacity DECIMAL(15, 3),
    IN capacity_uom NVARCHAR(10),
    OUT return_code TINYINT,
	OUT message "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA SAP_TM_ROUTING
   AS
BEGIN
    DECLARE count INTEGER;
    
    return_code = 0;
    
    SELECT COUNT(*) INTO count
    FROM "sap.tm.trp.routing.db.dataset::t_path"
    WHERE id = :path_id;
    
    IF :count = 0 THEN
        return_code = 1;
	    msg_param = SELECT 0 AS PLACEHOLDER, :path_id AS value FROM DUMMY;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_PATH_ID_NOT_FOUND', :msg_param, 'E', :message);
        RETURN;
	END IF; 
	
	IF :capacity < 0 THEN
	    return_code = 1;
	    msg_param = SELECT 0 AS PLACEHOLDER, :capacity AS value FROM DUMMY;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_CAPACITY_INVALID', :msg_param, 'E', :message);
        RETURN;
	END IF;
	
	trip_capacity = SELECT s.trip_id, sequence, :capacity AS capacity, :capacity_uom AS capacity_uom
	FROM "sap.tm.trp.routing.db.dataset::t_trip_sequence" s
	INNER JOIN "sap.tm.trp.routing.db.dataset::t_trip" t
	ON s.trip_id = t.id
	WHERE t.path_id = :path_id;
	
	CALL "sap.tm.trp.routing.db.dataset::p_update_trip_capacity"
	(:dataset_code, :trip_capacity, return_code, message);
END