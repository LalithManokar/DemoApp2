PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_concatenate_carrier" (
    IN connection_carrier "sap.tm.trp.routing.db.dataset::tt_connection_carrier",
	OUT concatenated_carrier TABLE(connection_id VARCHAR(50), carrier NVARCHAR(500))
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	DECLARE last_connection_id VARCHAR(50);
	DECLARE carrier_str NVARCHAR(5000);
	DECLARE SEPARATOR CHAR = ',';
	DECLARE CURSOR c_connection_carrier 
	FOR SELECT * FROM :connection_carrier AS c ORDER BY connection_id, carrier;
    
    last_connection_id = '';
    carrier_str = '';
    FOR row AS c_connection_carrier DO
        -- New connection starts
        IF row.connection_id <> last_connection_id THEN
            
            -- Save the concatenated carrier
            IF last_connection_id <> '' THEN
                concatenated_carrier = SELECT last_connection_id as connection_id, carrier_str AS carrier
                FROM DUMMY
                UNION ALL SELECT * FROM :concatenated_carrier;
            END IF;
             
            -- Clear string
            carrier_str = row.carrier;
            
        ELSE
            -- Concatenate from location of the connection
            SELECT :carrier_str || :SEPARATOR || row.carrier INTO carrier_str FROM DUMMY;
        END IF;
        last_connection_id = row.connection_id;
    END FOR;
    
    -- Empty input
    IF :carrier_str <> '' THEN
        -- Save the last connection
        concatenated_carrier = SELECT last_connection_id as connection_id, carrier_str AS carrier
        FROM DUMMY
        UNION ALL SELECT * FROM :concatenated_carrier;
    END IF;
	
END;
