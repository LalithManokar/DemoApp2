PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_check_trip" (
    IN trip "sap.tm.trp.routing.db.dataset::tt_trip",
    IN trip_location "sap.tm.trp.routing.db.dataset::tt_trip_location",
    OUT return_code TINYINT,
	OUT message "sap.tm.trp.routing.db.common::tt_message"
   ) 
    LANGUAGE SQLSCRIPT
    SQL SECURITY INVOKER
    DEFAULT SCHEMA "SAP_TM_ROUTING"
    READS SQL DATA AS
BEGIN

    DECLARE count INTEGER := 0;
	DECLARE msg_params TABLE(GROUP_ID NVARCHAR(100), PLACEHOLDER INTEGER, VALUE NVARCHAR(100));

	message = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1; 	
	return_code = 0;
    
    -- Id in trip header table is mandatory
    -- Normally this means programming error
    SELECT COUNT(*) INTO count FROM :trip WHERE id IS NULL OR id = '';
    IF count > 0 THEN
        return_code = 1;
        msg_param = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_TRIP_ID_MISSING', :msg_param, 'E', :message);
        RETURN;
    END IF;
    
    -- Normally this means programming error
    -- External id is mandatory and important to understand the exception message
    trip_id = SELECT id FROM :trip WHERE external_id IS NULL OR external_id = '';
    SELECT COUNT(*) INTO count FROM :trip_id;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :trip_id;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_EXTERNAL_ID_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- From location missing
    /*
    trip_name = SELECT external_id AS name FROM :trip WHERE from_location IS NULL OR from_location = '';
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_FROM_LOCATION_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- To location missing
    trip_name = SELECT external_id AS name FROM :trip WHERE to_location IS NULL OR to_location = '';
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_TO_LOCATION_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    */
    
    -- Departure time missing
    trip_name = SELECT external_id AS name FROM :trip WHERE depart_time IS NULL;
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_DEPARTURE_TIME_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Arrival time missing
    trip_name = SELECT external_id AS name FROM :trip WHERE arrival_time IS NULL;
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_ARRIVAL_TIME_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Arrival time invalid
    trip_name = SELECT external_id AS name FROM :trip WHERE arrival_time < depart_time;
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_ARRIVAL_TIME_INVALID', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Trip id of trip locations is mandatory
    -- Normally this means programming error
    SELECT COUNT(*) INTO count FROM :trip_location WHERE trip_id IS NULL OR trip_id = '';
    IF count > 0 THEN
        return_code = 1;
        msg_param = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_TRIP_LOCATION_ID_MISSING', :msg_param, 'E', :message);
        RETURN;
    END IF;
    
    -- Trip id in trip locations should exist in trip header table
    -- Normally this means programming error
    SELECT COUNT(*) INTO count FROM :trip_location
    WHERE trip_id NOT IN (SELECT id FROM :trip);
    IF count > 0 THEN
        return_code = 1;
        msg_param = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_TRIP_LOCATION_ID_NOT_FOUND', :msg_param, 'E', :message);
        RETURN;
    END IF;
    
    -- Sequence is missing
    trip_name = SELECT external_id AS name FROM :trip_location l
    INNER JOIN :trip t
    ON l.trip_id = t.id
    WHERE l.sequence IS NULL;
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
       return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_LOCATION_SEQUENCE_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Location of trip location is missing
    trip_sequence = SELECT external_id AS name, sequence FROM :trip_location l
    INNER JOIN :trip t
    ON l.trip_id = t.id
    WHERE l.location IS NULL;
    SELECT COUNT(*) INTO count FROM :trip_sequence;
    IF count > 0 THEN
       return_code = 1;
        msg_params = SELECT CONCAT(name, TO_VARCHAR(sequence)) AS group_id, 0 AS placeholder,
        name AS value FROM :trip_sequence
        UNION SELECT CONCAT(name,TO_VARCHAR(sequence)) AS group_id, 1 AS placeholder,
        TO_VARCHAR(sequence) AS value FROM :trip_sequence;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_LOCATION_LOCATION_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Check number of trip locations should be greater than 1
    trip_name = SELECT external_id AS name FROM :trip t
    LEFT OUTER JOIN (SELECT trip_id, COUNT(*) as count
    FROM :trip_location GROUP BY trip_id) l
    ON t.id = l.trip_id
    WHERE count IS NULL OR count < 2;
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_LOCATION_COUNT_INVALID', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    trip_sequence_min_max = SELECT trip_id, MIN(sequence) AS min_sequence, MAX(sequence) AS max_sequence
    FROM :trip_location
    GROUP BY trip_id;

    trip_location_flag = SELECT external_id AS name, l.*,
    CASE WHEN l.sequence = m.min_sequence THEN 1 ELSE 0 END AS is_first,
    CASE WHEN l.sequence = max_sequence THEN 1 ELSE 0 END AS is_last
    FROM :trip_location l
    INNER JOIN :trip_sequence_min_max m
    ON l.trip_id = m.trip_id
    INNER JOIN :trip t
    ON l.trip_id = t.id;
    
    -- Check distance of trip location
    -- It is not required for the first location
    trip_sequence = SELECT name, sequence
    FROM :trip_location_flag
    WHERE is_first <> 1 AND distance IS NULL or distance < 0;
    SELECT COUNT(*) INTO count FROM :trip_sequence;
    IF count > 0 THEN
       return_code = 1;
        msg_params = SELECT CONCAT(name, TO_VARCHAR(sequence)) AS group_id, 0 AS placeholder,
        name AS value FROM :trip_sequence
        UNION SELECT CONCAT(name, TO_VARCHAR(sequence)) AS group_id, 1 AS placeholder,
        TO_VARCHAR(sequence) AS value FROM :trip_sequence;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_LOCATION_DISTANCE_INVALID', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Check departure time of trip location
    -- It is not required for the last location
    trip_sequence = SELECT name, sequence
    FROM :trip_location_flag
    WHERE is_last <> 1 AND depart_time IS NULL;
    SELECT COUNT(*) INTO count FROM :trip_sequence;
    IF count > 0 THEN
       return_code = 1;
        msg_params = SELECT CONCAT(name, TO_VARCHAR(sequence)) AS group_id, 0 AS placeholder,
        name AS value FROM :trip_sequence
        UNION SELECT CONCAT(name, TO_VARCHAR(sequence)) AS group_id, 1 AS placeholder,
        TO_VARCHAR(sequence) AS value FROM :trip_sequence;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_LOCATION_DEPARTURE_TIME_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Check arrival time of trip location
    trip_sequence = SELECT name, sequence
    FROM :trip_location_flag
    WHERE is_first <> 1 AND arrival_time IS NULL;
    SELECT COUNT(*) INTO count FROM :trip_sequence;
    IF count > 0 THEN
       return_code = 1;
        msg_params = SELECT CONCAT(name, sequence) AS group_id, 0 AS placeholder,
        name AS value FROM :trip_sequence
        UNION SELECT CONCAT(name, sequence) AS group_id, 1 AS placeholder,
        TO_VARCHAR(sequence) AS value FROM :trip_sequence;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_LOCATION_ARRIVAL_TIME_MISSING', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Check arrival time of trip location
    -- It should be earlier than the departure time for the same location
    -- The check is not required for the first and last location
    trip_sequence = SELECT name, sequence
    FROM :trip_location_flag
    WHERE is_first <> 1 AND is_last <> 1 AND arrival_time > depart_time;
    SELECT COUNT(*) INTO count FROM :trip_sequence;
    IF count > 0 THEN
       return_code = 1;
        msg_params = SELECT CONCAT(name, sequence) AS group_id, 0 AS placeholder,
        name AS value FROM :trip_sequence
        UNION SELECT CONCAT(name, sequence) AS group_id, 1 AS placeholder,
        TO_VARCHAR(sequence) AS value FROM :trip_sequence;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_LOCATION_ARRIVAL_TIME_INVALID', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    trip_location_tmp = SELECT name, sequence, LAG(depart_time) OVER (PARTITION BY trip_id ORDER BY sequence) AS depart_time,
    arrival_time, is_first
    FROM :trip_location_flag;
    
    -- Check arrival time of trip location
    -- It should not be earlier than departure time of the previous location
    -- It is not requied for the first location
    trip_sequence = SELECT name, sequence
    FROM :trip_location_tmp
    WHERE is_first <> 1 AND arrival_time < depart_time;
    SELECT COUNT(*) INTO count FROM :trip_sequence;
    IF count > 0 THEN
       return_code = 1;
        msg_params = SELECT CONCAT(name, sequence) AS group_id, 0 AS placeholder,
        name AS value FROM :trip_sequence
        UNION SELECT CONCAT(name, sequence) AS group_id, 1 AS placeholder,
        TO_VARCHAR(sequence) AS value FROM :trip_sequence;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_SEQUENCE_ARRIVAL_TIME_INVALID', :msg_params, 'E', :message);
        RETURN;
    END IF;
   
    trip_location_aggregated = SELECT trip_id,
    FIRST_VALUE(location ORDER BY sequence) AS first_location,
    LAST_VALUE(location ORDER BY sequence) AS last_location,
    FIRST_VALUE(depart_time ORDER BY sequence) AS depart_time,
    LAST_VALUE(arrival_time ORDER BY sequence) AS arrival_time
    FROM :trip_location
    GROUP BY trip_id;
    
    -- Check from location of the trip
    -- It should be the same as the first location
    
    -- Currently from location and to location is empty. 
    -- It will be enhanced in the future
    /*
    trip_name = SELECT external_id AS name FROM :trip t
    INNER JOIN :trip_location_aggregated l
    ON t.id = l.trip_id
    WHERE t.from_location <> l.first_location;
    
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_FROM_LOCATION_INCONSISTENT', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Check to location of the trip
    -- It should be the same as the last location
    trip_name = SELECT external_id AS name FROM :trip t
    INNER JOIN :trip_location_aggregated l
    ON t.id = l.trip_id
    WHERE T.to_location <> l.last_location;
    
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_TO_LOCATION_INCONSISTENT', :msg_params, 'E', :message);
        RETURN;
    END IF;
    */
    -- Check departure time
    trip_name = SELECT external_id AS name FROM :trip t
    INNER JOIN :trip_location_aggregated l
    ON t.id = l.trip_id
    WHERE t.depart_time <> l.depart_time;
    
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_DEPARTURE_TIME_INCONSISTENT', :msg_params, 'E', :message);
        RETURN;
    END IF;
    
    -- Check arrival time
    trip_name = SELECT external_id AS name FROM :trip t
    INNER JOIN :trip_location_aggregated l
    ON t.id = l.trip_id
    WHERE T.arrival_time <> l.arrival_time;
    
    SELECT COUNT(*) INTO count FROM :trip_name;
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT name AS group_id, 0 AS placeholder,
        name AS value FROM :trip_name;
 
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_TRIP_ARRIVAL_TIME_INCONSISTENT', :msg_params, 'E', :message);
        RETURN;
    END IF;
END;