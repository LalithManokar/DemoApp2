PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_create_path" (
    IN dataset_id BIGINT,
    IN paths "sap.tm.trp.routing.db.dataset::tt_path",
    IN path_connection "sap.tm.trp.routing.db.dataset::tt_path_connection",
    OUT return_code TINYINT,
    OUT id_map "sap.tm.trp.routing.db.dataset::tt_id_map",
    OUT message "sap.tm.trp.routing.db.common::tt_message",
    OUT log "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN 
   /*************************************
       Write your procedure logic 
   *************************************/
    DECLARE dataset_code NVARCHAR(50);
	DECLARE msg_param TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
	DECLARE count INTEGER;
	DECLARE CURSOR c_path_hash(path "sap.tm.trp.routing.db.dataset::tt_path_hash")
	FOR SELECT path_id, hash, str FROM :path;
	DECLARE CURSOR c_id_map FOR SELECT * FROM :id_map;
	DECLARE ACTION_CREATE CHAR = 'C';
	DECLARE SOURCE_MANUAL CHAR = 'M';
	DECLARE SOURCE_SYSTEM CHAR = 'S';
	
	-- Check whether the dataset exist or not
	DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299
    BEGIN
        return_code = 1;
        msg_params = SELECT 0 AS PLACEHOLDER, TO_NVARCHAR(:dataset_id) AS VALUE FROM DUMMY;
	    call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_DATASET_ID_NOT_EXIST', :msg_params, 'E', :message);
    END;
	
	return_code = 0;
	    
    message = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1;
    log = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1;
	
	CALL "sap.tm.trp.routing.db.dataset::p_validate_path"(
	    :paths, :path_connection, :return_code, :message
	);
	
	IF :return_code <> 0 THEN
	    RETURN;
	END IF;
	
	SELECT count(*) INTO count FROM :paths;
	
	IF :count = 0 THEN
	    RETURN;
	END IF;
	
	-- Compuate connection hash
	CALL "sap.tm.trp.routing.db.dataset::p_calculate_path_hash"(
	    :paths, :path_connection, :path_hash
	);
	
	-- Check whether there is any duplicate in the input
	path_duplicated = SELECT 0 AS path_id, hash, str
	FROM (
	    select hash, str, count(*) as count
    	from :path_hash
    	group by hash, str
	) AS a
	WHERE count > 1;
	
	FOR row AS c_path_hash(:path_duplicated) DO
	    return_code = 1;
	    msg_param = SELECT 0 AS PLACEHOLDER, row.str AS value FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_PATH_UNIQUENESS_VIOLATED', :msg_param, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;
	
	IF return_code <> 0 THEN
	    RETURN;
	END IF;
	
	-- Check whether there is duplicate in the same layer
	-- Just manual path should be checked
	path_duplicated = SELECT p.id AS path_id, h.hash, str
	FROM :path_hash AS h
	INNER JOIN "sap.tm.trp.routing.db.dataset::t_path" AS p
	ON h.hash = p.hash
	WHERE p.dataset_id = :dataset_id AND p.SOURCE = :SOURCE_MANUAL;
	
	FOR row AS c_path_hash(:path_duplicated) DO
	    return_code = 1;
	    msg_param = SELECT 0 AS PLACEHOLDER, row.str AS value FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_PATH_UNIQUENESS_VIOLATED', :msg_param, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;
	
	IF return_code <> 0 THEN
	    RETURN;
	END IF;
	
	hash = SELECT hash FROM :path_hash;
	
	-- Check existence and lock the dataset
	SELECT code INTO dataset_code 
	FROM "sap.tm.trp.routing.db.dataset::t_dataset"
	WHERE id = :dataset_id FOR UPDATE;
	
	-- Get the path visible in current layer by filter
	-- Check whether there is duplicate in layer below
	CALL "sap.tm.trp.routing.db.dataset::p_get_path_by_hash"(
	    :dataset_id,
	    :hash,
	    :path_exist
	);
	
	-- We had checked manual paths before.
	-- So existing paths are either system paths or paths from layer below
	path_duplicated = SELECT p.path_id, h.hash, str
	FROM :path_hash AS h
	INNER JOIN :path_exist AS p
	ON h.hash = p.hash; 
	
	FOR row AS c_path_hash(:path_duplicated) DO
	    msg_param = SELECT 0 AS PLACEHOLDER, row.str AS value FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_PATH_VOID', :msg_param, 'W', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;

	--Add path delta
	id_map = SELECT id as external_id, "sap.tm.trp.routing.db.dataset::s_path".nextval AS id
	FROM :paths;
	
	-- For manully created paths, external ID is transient and will not be saved
	INSERT INTO "sap.tm.trp.routing.db.dataset::t_path"
	(id, dataset_id, from_location, to_location, mtr, carrier, action, 
	source, hash, created_by, created_on, changed_by, changed_on)
	SELECT A.id, :dataset_id as dataset_id, from_location, to_location, mtr, 
	carrier, :ACTION_CREATE, :SOURCE_MANUAL, h.hash, SESSION_CONTEXT('APPLICATIONUSER'),
	CURRENT_UTCTIMESTAMP, SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP
	FROM :id_map AS A INNER JOIN 
	:paths AS B ON A.external_id = B.id
	INNER JOIN :path_hash AS h
	ON B.id = h.path_id;

	INSERT INTO "sap.tm.trp.routing.db.dataset::t_path_connection" ( path_id, "SEQUENCE", 
	from_location, to_location, distance, duration, stay_time, cutoff_offset, availability_offset)
	SELECT id, sequence, from_location, to_location, distance, duration, stay_time, 
	0 AS cutoffset, 0 AS availability_offset
	FROM :id_map AS A INNER JOIN :path_connection AS B ON A.external_id = B.path_id;
	
	--Invalidate dataset
	-- Network model using the dataset will be invalidated
	-- The invalidation will be performed recursively
	UPDATE "sap.tm.trp.routing.db.dataset::t_dataset"
	SET changed_by = SESSION_CONTEXT('APPLICATIONUSER'), changed_on = CURRENT_UTCTIMESTAMP
	WHERE id = :dataset_id; 
	
	FOR row AS c_id_map DO
        msg_param = SELECT 0 AS PLACEHOLDER, TO_NVARCHAR(row.id) AS VALUE FROM DUMMY
        UNION ALL SELECT 1 AS PLACEHOLDER, :dataset_code AS VALUE FROM DUMMY;
        call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_BASIC_PATH_CREATED_SUCCESSFULLY', :msg_param, 'I', :message_tmp);
        
        message = SELECT * FROM :message_tmp
        UNION ALL SELECT * FROM :message;
    END FOR;
    
    CALL "sap.tm.trp.routing.db.path::p_invalidate_network_by_dataset" 
    (:dataset_id, 'X', :return_code, :message_tmp, :log_tmp);
    
    IF :return_code <> 0 THEN
        message = SELECT * FROM :message_tmp;
        log = SELECT * FROM :log_tmp;
        RETURN;
    END IF;
        
    message = SELECT * FROM :message 
    UNION ALL SELECT * FROM :message_tmp;
    log = SELECT * FROM :log 
    UNION ALL SELECT * FROM :log_tmp;
    
    return_code = 0;
END