PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_roll_forward_dataset_trip" (
	IN from_time TIMESTAMP,   -- from_time required in UTC time
	IN to_time TIMESTAMP,     -- to_time required in UTC time
	IN dataset_code NVARCHAR(50),
	OUT return_code INTEGER,
	OUT message "sap.tm.trp.routing.db.common::tt_message",
	OUT log "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA SAP_TM_ROUTING
   AS
BEGIN

    DECLARE SOURCE_MANUAL CHAR(1) = 'M';
	DECLARE CURSOR c_path_id FOR 
	SELECT DISTINCT p.id
	FROM "sap.tm.trp.routing.db.dataset::t_path" AS p
	INNER JOIN "sap.tm.trp.routing.db.dataset::t_dataset" AS d
	ON p.dataset_id = d.id
	WHERE d.code = :dataset_code AND p.source = :SOURCE_MANUAL;

    return_code = 0;

    -- Check time range
    IF from_time > to_time THEN
        msg_params = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
        CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_TIME_RANGE_INVALID', 
        :msg_params, 'E', :message);
        log = SELECT * FROM :message;
        return_code = 1;
        RETURN;
    END IF;
    
    message = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1;
    log = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1;
    
    -- To-do: check whether we need to lock dataset and update dataset timestamp
    
	-- For each path
	FOR row AS c_path_id DO 
		CALL "sap.tm.trp.routing.db.dataset::p_roll_forward_trip"
		(:from_time, :to_time, row.id, return_code, message_tmp, log_tmp);
		IF return_code != 0 THEN
		    message = SELECT * FROM :message_tmp;
		    log = SELECT * FROM :log_tmp;
		    RETURN;
		ELSE
		    message = SELECT * FROM :message_tmp
		    UNION ALL SELECT * FROM :message;
		    
		    log = SELECT * FROM :log_tmp
		    UNION ALL SELECT * FROM :log;
		END IF;
	END FOR;
END