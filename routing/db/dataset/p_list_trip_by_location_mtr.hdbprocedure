PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_list_trip_by_location_mtr" (
    in from_time timestamp,
    in to_time timestamp,
    in location_mtr_pair "sap.tm.trp.routing.db.common::tt_location_mtr_pair",
    out trip TABLE( 
         ID NVARCHAR(100), 
         EXTERNAL_ID NVARCHAR(100),
         BASIC_PATH_ID BIGINT,
         CARRIER NVARCHAR(100),
         RULE_ID SMALLINT,
         MTR NVARCHAR(10),
         FROM_LOCATION NVARCHAR(50),
         TO_LOCATION NVARCHAR(50),
         DEPART_TIME TIMESTAMP,
         ARRIVAL_TIME TIMESTAMP
    ),
    out trip_location table (
         TRIP_ID NVARCHAR(100),
         SEQUENCE INTEGER,
         LOCATION NVARCHAR(50),
         DISTANCE DOUBLE, 
         DURATION BIGINT,
         DEPART_TIME TIMESTAMP,
         ARRIVAL_TIME TIMESTAMP,
         VEHICLE_ID NVARCHAR(50),
         CUTOFF_OFFSET INTEGER,
         AVAILABILITY_OFFSET INTEGER
    )
   ) 
    language sqlscript
    sql security invoker
    default schema "SAP_TM_ROUTING"
    READS SQL DATA AS
begin

    CALL "sap.tm.trp.routing.db.connector::p_list_trip_by_location_mtr" 
    (:from_time, :to_time, :location_mtr_pair, system_trip, system_trip_location);
    
    manual_trip = SELECT DISTINCT TO_NVARCHAR(t.id) AS id, TO_NVARCHAR(t.id) AS external_id,  
    '' AS carrier, rule_number AS rule_id, path.id as basic_path_id, path.mtr, t.from_location, t.to_location, t.departure_time, t.arrival_time
    FROM "sap.tm.trp.routing.db.dataset::t_trip_sequence" AS l1
    INNER JOIN "sap.tm.trp.routing.db.dataset::t_trip" AS t
    ON l1.trip_id = t.id
    INNER JOIN "sap.tm.trp.routing.db.dataset::t_trip_sequence" AS l2
    ON l1.trip_id = l2.trip_id
    AND l1.sequence < l2.sequence
    INNER JOIN :location_mtr_pair AS p
    ON l1.location = p.from_location
    AND l2.location = p.to_location
    INNER JOIN "sap.tm.trp.routing.db.dataset::t_path" AS path
    ON t.path_id = path.id
    AND path.mtr = p.mtr
    WHERE t.departure_time <= :to_time and t.arrival_time >= :from_time;
    
    manual_trip_location = SELECT TO_NVARCHAR(trip_id) AS trip_id, l.sequence, location, IFNULL(distance, 0), 
    IFNULL(duration, 0) AS duration,
    l.departure_time AS depart_time, l.arrival_time, '' AS vehicle_id, 
    0 AS cutoff_offset, 0 AS availability_offset
    FROM "sap.tm.trp.routing.db.dataset::t_trip_sequence" AS l
    INNER JOIN :manual_trip AS t
    ON l.trip_id = t.id
    LEFT OUTER JOIN "sap.tm.trp.routing.db.dataset::t_path_connection" AS c
    ON t.basic_path_id = c.path_id
    AND l.sequence = c.sequence;
    
    trip = SELECT t.id, t.external_id, p.id AS basic_path_id, t.carrier, t.rule_id, t.mtr, t.from_location, t.to_location, t.depart_time, t.arrival_time
    FROM :system_trip AS t
    INNER JOIN "sap.tm.trp.routing.db.dataset::t_path" AS p
    ON t.basic_path_external_id = p.external_id
    UNION ALL SELECT id, external_id, basic_path_id, carrier, rule_id, mtr, from_location, to_location, departure_time, arrival_time
    FROM :manual_trip;
    
    trip_location = SELECT trip_id, sequence, location, distance, duration, depart_time, 
    arrival_time, vehicle_id, cutoff_offset, availability_offset
    FROM :system_trip_location
    UNION ALL SELECT * FROM :manual_trip_location;
    
END; 