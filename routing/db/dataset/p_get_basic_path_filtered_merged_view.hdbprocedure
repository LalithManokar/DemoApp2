PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_get_basic_path_filtered_merged_view" (
	IN dataset_id BIGINT,
	IN mtr_filter TABLE(mtr NVARCHAR(10)),
	OUT accumulate_path_id TABLE(id BIGINT),
	OUT accumulate_conflict_delta_id TABLE(id BIGINT)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA SAP_TM_ROUTING
   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	-- decl_list
	DECLARE dataset_chain TABLE(id BIGINT, level INTEGER);
	DECLARE chainid_arr BIGINT ARRAY;
	DECLARE chain_iter INTEGER;
	--DECLARE global_dataset_id CONSTANT BIGINT = 0;
	DECLARE manual_source CONSTANT CHAR = 'M';
	DECLARE system_source CONSTANT CHAR = 'S';
	DECLARE accumulate_path TABLE(id BIGINT, dataset_id BIGINT, hash VARBINARY(32));
	
	DECLARE mtr_filter_cnt INTEGER;
	-- exception_list
	-- stmt_list

	-- Get a list of dataset chain id consisting the inheritance relation
	dataset_chain = 
	SELECT 0 AS id, 0 AS level
	FROM DUMMY
	WHERE 1 != 1;
	
	accumulate_path =
	SELECT 0 AS id, 0 AS dataset_id, TO_VARBINARY('') AS hash
	FROM DUMMY
	WHERE 1 != 1;
	
	accumulate_conflict_delta = 
	SELECT 0 AS id, 0 AS dataset_id
	FROM DUMMY
	WHERE 1 != 1;
	
	CALL "sap.tm.trp.routing.db.dataset::p_get_dataset_chain"(:dataset_id, dataset_chain);

    SELECT COUNT(*) INTO mtr_filter_cnt
    FROM :mtr_filter;

	IF :mtr_filter_cnt = 0 THEN
    	path_data = 
    	SELECT id, dataset_id, action, source, hash
    	FROM "sap.tm.trp.routing.db.dataset::t_path"
    	WHERE dataset_id IN (SELECT id FROM :dataset_chain);
	ELSE
    	path_data = 
    	SELECT id, dataset_id, action, source, hash
    	FROM "sap.tm.trp.routing.db.dataset::t_path" AS A INNER JOIN :mtr_filter AS B
    	ON A.mtr = B.mtr
    	WHERE dataset_id IN (SELECT id FROM :dataset_chain);
	END IF;
	
    -- CALL "sap.tm.trp.routing.db.dataset::p_filter_path_by_from_to_loc_mtr"(:path_data_all, :from_location, :to_location, :mtr, path_data);
    
	chainid_arr = ARRAY_AGG(:dataset_chain.id);
	FOR chain_iter IN REVERSE 1..CARDINALITY(:chainid_arr) DO 
		DECLARE cur_dataset_id BIGINT = :chainid_arr[:chain_iter];
		DECLARE delta_cnt BIGINT;
		/*
		IF :cur_dataset_id = :global_dataset_id THEN 
			accumulate_path = 
			SELECT id, dataset_id, hash
			FROM "sap.tm.trp.routing.db.dataset::t_path"
			WHERE dataset_id = :global_dataset_id AND source = :system_source;

			CONTINUE;
		END IF;
		*/

        -- Always merge system path
        accumulate_path = 
		SELECT * FROM :accumulate_path
		UNION ALL
		SELECT id, dataset_id, hash
		FROM :path_data
		WHERE dataset_id = :cur_dataset_id AND source = :system_source;
        
		-- Fetch the delta data in current data set
		delta_path = 
		SELECT id, dataset_id, action, hash
		FROM :path_data
		WHERE dataset_id = :cur_dataset_id AND source = :manual_source;
        
		-- check whether delta exist, otherwise continue
		SELECT COUNT(*) INTO delta_cnt FROM :delta_path;
		IF :delta_cnt = 0 THEN
			CONTINUE;
		END IF;

		-- Apply the delta
		CALL "sap.tm.trp.routing.db.dataset::p_apply_delta" (:accumulate_path, :delta_path, accumulate_path, conflict_delta);
		-- Merge conflict delta
		accumulate_conflict_delta = 
		SELECT * FROM :accumulate_conflict_delta
		UNION ALL 
		SELECT * FROM :conflict_delta;
	END FOR;

	accumulate_path_id = 
	SELECT id 
	FROM :accumulate_path;

	accumulate_conflict_delta_id = 
	SELECT id
	FROM :accumulate_conflict_delta;
END