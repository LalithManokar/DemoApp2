PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_create_connection" (
    IN dataset_id BIGINT,
    IN connection "sap.tm.trp.routing.db.dataset::tt_connection",
    IN connection_carrier "sap.tm.trp.routing.db.dataset::tt_connection_carrier",
    OUT return_code TINYINT,
    OUT id_map "sap.tm.trp.routing.db.dataset::tt_id_map",
    OUT message "sap.tm.trp.routing.db.common::tt_message",
    OUT log "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN 
    /*************************************
       Write your procedure logic 
    *************************************/
    DECLARE dataset_code NVARCHAR(50);
	DECLARE msg_param TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
	DECLARE count INTEGER;
	DECLARE CURSOR c_connection(connection "sap.tm.trp.routing.db.dataset::tt_connection")
	FOR SELECT from_location, to_location, mtr FROM :connection;
	DECLARE CURSOR c_id_map FOR SELECT * FROM :id_map;
	DECLARE ACTION_CREATE CHAR = 'C';
	DECLARE ACTION_DELETE CHAR = 'D';
	DECLARE SOURCE_MANUAL CHAR = 'M';
	
	-- Check whether the dataset exist or not
	DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299
    BEGIN
        return_code = 1;
        msg_params = SELECT 0 AS PLACEHOLDER, :dataset_id AS VALUE FROM DUMMY;
	    call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_DATASET_ID_NOT_EXIST', :msg_params, 'E', :message);
    END;
	
	return_code = 0;
	message = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1;
	log = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1;
	
	-- Validate input
	CALL "sap.tm.trp.routing.db.dataset::p_validate_connection"(
	    :connection, :connection_carrier, :return_code, :message
	);
	
	IF :return_code <> 0 THEN
	    RETURN;
	END IF;
	
	SELECT count(*) INTO count FROM :connection;
	
	IF :count = 0 THEN
	    RETURN;
	END IF;
	
	-- Check whether there is any duplicate in the input
	connection_duplicated = SELECT '' AS id, from_location, to_location, mtr, 
	0 as distance, 0 as duration
	FROM (
	    select from_location, to_location, mtr, count(*) as count
    	from :connection 
    	group by from_location, to_location, mtr
	) AS a
	WHERE count > 1;
	
	FOR row AS c_connection(:connection_duplicated) DO
	    return_code = 1;
	    msg_param = SELECT 0 AS PLACEHOLDER, row.from_location AS VALUE FROM DUMMY
	    UNION ALL SELECT 1 AS PLACEHOLDER, row.to_location AS VALUE FROM DUMMY
	    UNION ALL SELECT 2 AS PLACEHOLDER, row.mtr AS VALUE FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_CONNECTION_UNIQUENESS_VIOLATED', :msg_param, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;
	
	IF return_code <> 0 THEN
	    RETURN;
	END IF;
	
	-- Check existence and lock the dataset
	SELECT code INTO dataset_code 
	FROM "sap.tm.trp.routing.db.dataset::t_dataset"
	WHERE id = :dataset_id FOR UPDATE; 
	
	-- Check whether there is any duplicate in current layer
	connection_duplicated = SELECT c1.id, c1.from_location, c1.to_location, c1.mtr, 
	c1.distance, c1.duration
	FROM :connection AS c1
	INNER JOIN "sap.tm.trp.routing.db.dataset::t_connection" AS c2
	ON c1.from_location = c2.from_location
	AND c1.to_location = c2.to_location
	AND c1.mtr = c2.mtr
	WHERE c2.dataset_id = :dataset_id AND c2.source = SOURCE_MANUAL;
	
	FOR row AS c_connection(:connection_duplicated) DO
	    return_code = 1;
	    msg_param = SELECT 0 AS PLACEHOLDER, row.from_location AS VALUE FROM DUMMY
	    UNION ALL SELECT 1 AS PLACEHOLDER, row.to_location AS VALUE FROM DUMMY
	    UNION ALL SELECT 2 AS PLACEHOLDER, row.mtr AS VALUE FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_CONNECTION_UNIQUENESS_VIOLATED', :msg_param, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;
	
	IF return_code <> 0 THEN
	    RETURN;
	END IF;
	
	-- Compute connection hash
	path_tmp = SELECT id, from_location, to_location, mtr, '' AS carrier
	FROM :connection;
	
	path_connection_tmp = SELECT id as path_id, 0 AS sequence, from_location, 
	to_location, distance, duration, 0 as stay_time, 0 AS cutoff_offset, 0 AS availability_offset
	FROM :connection;
	
	CALL "sap.tm.trp.routing.db.dataset::p_calculate_path_hash"(
	    :path_tmp, :path_connection_tmp, :path_hash
	);
	
	connection_hash = SELECT DISTINCT hash FROM :path_hash;
	
	-- Get the connection visible in current layer by filter
	CALL "sap.tm.trp.routing.db.dataset::p_get_connection_by_hash"(
	    :dataset_id,
	    :connection_hash,
	    :connection_exist
	);
	
	-- Raise warning if the connection is void due to conflict with the one in layer below
	FOR row AS c_connection(:connection_exist) DO
	    msg_param = SELECT 0 AS PLACEHOLDER, row.from_location AS VALUE FROM DUMMY
	    UNION ALL SELECT 1 AS PLACEHOLDER, row.to_location AS VALUE FROM DUMMY
	    UNION ALL SELECT 2 AS PLACEHOLDER, row.mtr AS VALUE FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_CONNECTION_VOID', :msg_param, 'W', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;
	
	-- Generate new id
	id_map = select id as external_id, "sap.tm.trp.routing.db.dataset::s_path".nextval as id
	from :connection;
	
	INSERT INTO "sap.tm.trp.routing.db.dataset::t_connection"
	(id, dataset_id, from_location, to_location, mtr, distance, duration, 
	action, source, hash, created_by, created_on, changed_by, changed_on)
	SELECT m.id, :dataset_id as dataset_id, from_location, to_location, mtr, 
	distance, duration, :ACTION_CREATE, SOURCE_MANUAL, hash, SESSION_CONTEXT('APPLICATIONUSER'), 
	CURRENT_UTCTIMESTAMP, SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP
	FROM :connection AS c
	INNER JOIN :id_map AS m
	ON c.id = m.external_id
	INNER JOIN :path_hash AS h
	ON c.id = h.path_id;
	
	INSERT INTO "sap.tm.trp.routing.db.dataset::t_connection_carrier" (connection_id, carrier)
	SELECT m.id, c.carrier
	FROM :connection_carrier AS c
	INNER JOIN :id_map AS m
	ON c.connection_id = m.external_id;
	
	--Invalidate dataset
	-- Network model using the dataset will be invalidated
	-- The invalidation will be performed recursively
	UPDATE "sap.tm.trp.routing.db.dataset::t_dataset"
	SET changed_by = SESSION_CONTEXT('APPLICATIONUSER'), changed_on = CURRENT_UTCTIMESTAMP
	WHERE id = :dataset_id; 
	
    FOR row AS c_id_map DO
        msg_param = SELECT 0 AS PLACEHOLDER, TO_NVARCHAR(row.id) AS VALUE FROM DUMMY
        UNION ALL SELECT 1 AS PLACEHOLDER, :dataset_code AS VALUE FROM DUMMY;
        call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_BASIC_CONNECTION_CREATED_SUCCESSFULLY', :msg_param, 'I', :message_tmp);
        
        message = SELECT * FROM :message_tmp
        UNION ALL SELECT * FROM :message;
    END FOR;
    
    CALL "sap.tm.trp.routing.db.path::p_invalidate_network_by_dataset" 
    (:dataset_id, 'X', :return_code, :message_tmp, :log_tmp);
    
    IF :return_code <> 0 THEN
        message = SELECT * FROM :message_tmp;
        log = SELECT * FROM :log_tmp;
        RETURN;
    END IF;
        
    message = SELECT * FROM :message 
    UNION ALL SELECT * FROM :message_tmp;
    log = SELECT * FROM :log 
    UNION ALL SELECT * FROM :log_tmp;
	
	return_code = 0;
END