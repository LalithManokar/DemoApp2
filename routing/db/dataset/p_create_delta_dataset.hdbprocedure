PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_create_delta_dataset" (
    IN dataset_code NVARCHAR(50),
    IN base_dataset_code NVARCHAR(50),
	OUT return_code TINYINT,
	OUT dataset_id BIGINT,
	OUT message "sap.tm.trp.routing.db.common::tt_message",
	OUT log "sap.tm.trp.routing.db.common::tt_message"
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN 
   /*************************************
       Write your procedure logic 
   *************************************/
    DECLARE base_dataset_id BIGINT;
    DECLARE count INTEGER;
    DECLARE msg_param TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
    
    -- Check whether the dataset code already exists
    -- Strange thing is that this exit handler must be declared before the second one
    -- Otherwise no value can be assiged to output parameters
	DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 301 -- Unique constraint violated
    BEGIN
        return_code = 1;
        dataset_id = -1;
        msg_param = SELECT 0 AS PLACEHOLDER, :dataset_code AS VALUE FROM DUMMY;
	    call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_DATASET_CODE_ALREADY_EXIST', :msg_param, 'E', message);
    END;
    
	-- Check whether the base dataset exist or not
	DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299
    BEGIN
        return_code = 1;
        dataset_id = -1;
        msg_param = SELECT 0 AS PLACEHOLDER, :base_dataset_code AS VALUE FROM DUMMY;
	    call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_DATASET_CODE_NOT_EXIST', :msg_param, 'E', message);
    END;
   
    return_code = 0;

    -- Check whether base dataset exists
    SELECT id INTO base_dataset_id 
    FROM "sap.tm.trp.routing.db.dataset::t_dataset"
    WHERE code = :base_dataset_code;
       
    -- Check whether dataset code is valid
	CALL "sap.tm.trp.routing.db.util::p_validate_code"(
	    :dataset_code,
	    :return_code,
	    :message
	);
	
	IF :return_code <> 0 THEN
        return;
	END IF;
	
	-- Check whether dataset code already used
    SELECT COUNT(*) INTO count FROM "sap.tm.trp.routing.db.dataset::t_dataset"
    WHERE code = :dataset_code;
    
    IF count > 0 THEN
        return_code = 1;
        msg_param = SELECT 0 AS PLACEHOLDER, :dataset_code AS VALUE FROM DUMMY;
	    call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_DATASET_CODE_ALREADY_EXIST', :msg_param, 'E', :message);
        RETURN;
    END IF;
   
	-- Get next id
	SELECT "sap.tm.trp.routing.db.dataset::s_dataset".nextval INTO dataset_id FROM DUMMY;
	
	INSERT INTO "sap.tm.trp.routing.db.dataset::t_dataset"
	(id, code, base_dataset_id, source, valid_from, valid_to, created_by, created_on, changed_by, changed_on )
	VALUES (:dataset_id, :dataset_code, :base_dataset_id, 'TM', current_date, to_date('9999-01-01'), 
	SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP, SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP);
	    
    msg_param = SELECT 0 AS PLACEHOLDER, :dataset_code AS VALUE FROM DUMMY;
    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_DATASET_CREATED_SUCCESS', :msg_param, 'I', :message);
	
	log = SELECT '' AS severity, '' AS message FROM dummy WHERE 1 <> 1;

END
;
