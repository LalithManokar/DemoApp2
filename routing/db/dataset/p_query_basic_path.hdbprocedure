PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_query_basic_path" (
	IN dataset_id BIGINT, 
	IN view_type CHAR(1), -- F means full view, D means delta view, M means merged view
	IN from_location NVARCHAR(50),
	IN to_location NVARCHAR(50),
	IN mtr NVARCHAR(10),
	OUT paths "sap.tm.trp.routing.db.dataset::tt_path_out", 
	OUT path_connection "sap.tm.trp.routing.db.dataset::tt_path_connection"
) 
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA SAP_TM_ROUTING
   READS SQL DATA AS
BEGIN 
	DECLARE manual_source CONSTANT CHAR = 'M';
	DECLARE system_source CONSTANT CHAR = 'S';
	DECLARE accumulate_path_id TABLE(id BIGINT);
	DECLARE accumulate_conflict_path_id TABLE(id BIGINT);
	DECLARE loc_pair_cnt, mtr_cnt INTEGER;
	
	DECLARE from_list TABLE(path_id BIGINT, sequence BIGINT , location NVARCHAR(50));
	DECLARE to_list TABLE(path_id BIGINT, sequence BIGINT , location NVARCHAR(50));
	DECLARE path_seq_start CONSTANT INTEGER = 0;
	
	accumulate_path_id = 
	SELECT 0 AS id
	FROM DUMMY
	WHERE 1 != 1;

	accumulate_conflict_path_id = 
	SELECT 0 AS id
	FROM DUMMY
	WHERE 1 != 1;

	IF :view_type = 'M' THEN
		CALL "sap.tm.trp.routing.db.dataset::p_get_basic_path_merged_view" (:dataset_id, :from_location, :to_location, :mtr, accumulate_path_id, accumulate_conflict_path_id);
	ELSEIF :view_type = 'D' THEN
    	path_data_all = 
    	SELECT id, dataset_id, from_location, to_location, mtr, carrier, action, source, hash
    	FROM "sap.tm.trp.routing.db.dataset::t_path"
		WHERE dataset_id = :dataset_id AND source = :manual_source;
    	
        CALL "sap.tm.trp.routing.db.dataset::p_filter_path_by_from_to_loc_mtr"(:path_data_all, :from_location, :to_location, :mtr, path_data);

		accumulate_path_id = 
		SELECT id
		FROM :path_data;
	ELSEIF :view_type = 'F' THEN
		CALL "sap.tm.trp.routing.db.dataset::p_get_basic_path_merged_view" (:dataset_id, :from_location, :to_location, :mtr, accumulate_path_id, accumulate_conflict_path_id);

    	path_data_all = 
    	SELECT id, dataset_id, from_location, to_location, mtr, carrier, action, source, hash
    	FROM "sap.tm.trp.routing.db.dataset::t_path"
		WHERE dataset_id = :dataset_id AND source = :manual_source;
    	
        CALL "sap.tm.trp.routing.db.dataset::p_filter_path_by_from_to_loc_mtr"(:path_data_all, :from_location, :to_location, :mtr, path_data);

		accumulate_path_id = 
		SELECT id
		FROM :accumulate_path_id
		UNION
		SELECT id
		FROM :path_data;
	END IF;

	-- Fetch merged path and path_connection data
	IF :view_type != 'F' THEN
    	paths = 
    	SELECT A.id, name, external_id, external_type, from_location, to_location, mtr, carrier, 
    	CASE WHEN A.dataset_id = :dataset_id AND a.source = :manual_source THEN action
    	ELSE NULL END AS action, 
    	source, '' AS conflict_flag, created_by, created_on, changed_by, changed_on
    	FROM "sap.tm.trp.routing.db.dataset::t_path" AS A INNER JOIN :accumulate_path_id AS B ON A.id = B.id;
    ELSE
        top_conflict_path_id = 
        SELECT A.id, 'X' AS conflict_flag
        FROM :path_data AS A INNER JOIN :accumulate_conflict_path_id AS B ON A.id = B.id;
        
    	paths = 
    	SELECT A.id, name, external_id, external_type, from_location, to_location, mtr, carrier, 
    	CASE WHEN A.dataset_id = :dataset_id AND a.source = :manual_source THEN action
    	ELSE NULL END AS action, 
    	source, IFNULL(conflict_flag, '') AS conflict_flag, created_by, created_on, changed_by, changed_on
    	FROM "sap.tm.trp.routing.db.dataset::t_path" AS A INNER JOIN :accumulate_path_id AS B ON A.id = B.id
    	LEFT OUTER JOIN :top_conflict_path_id AS C ON B.id = C.id;
    END IF;
	
	path_connection = 
	SELECT A.path_id, sequence, from_location, to_location, distance, duration, stay_time, 
	cutoff_offset, availability_offset
	FROM "sap.tm.trp.routing.db.dataset::t_path_connection" AS A INNER JOIN :accumulate_path_id AS B ON A.path_id = B.id;
	
	--conflict_path = 
	--SELECT A.id, dataset_id
	--FROM "sap.tm.trp.routing.db.dataset::t_path" AS A INNER JOIN :accumulate_conflict_path_id AS B ON A.id = B.id;
END