PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_delete_path" (
    IN dataset_id BIGINT,
    IN path_id "sap.tm.trp.routing.db.common::tt_id",
    OUT return_code TINYINT,
    OUT id_map "sap.tm.trp.routing.db.dataset::tt_id_map",
    OUT message "sap.tm.trp.routing.db.common::tt_message",
    OUT log "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN 
   /*************************************
       Write your procedure logic 
   *************************************/
	DECLARE msg_param TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
	DECLARE dataset_code NVARCHAR(50);
	DECLARE count INTEGER;
	DECLARE CURSOR c_path_id(path_id "sap.tm.trp.routing.db.common::tt_id")
	FOR SELECT * FROM :path_id;
	DECLARE CURSOR c_path_hash(path_hash "sap.tm.trp.routing.db.dataset::tt_path_hash")
	FOR SELECT path_id, hash, str FROM :path_hash;
	DECLARE CURSOR c_id_map FOR SELECT * FROM :id_map;
	DECLARE ACTION_CREATE CHAR = 'C';
	DECLARE ACTION_DELETE CHAR = 'D';
	DECLARE SOURCE_MANUAL CHAR = 'M';
	DECLARE SOURCE_SYSTEM CHAR = 'S';
	
	-- Check whether the dataset exist or not
	DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299
    BEGIN
        return_code = 1;
        msg_params = SELECT 0 AS PLACEHOLDER, TO_NVARCHAR(:dataset_id) AS VALUE FROM DUMMY;
	    call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_DATASET_ID_NOT_EXIST', :msg_params, 'E', :message);
    END;
	
	return_code = 0;
	log = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1;
	
	SELECT count(*) INTO count FROM :path_id;
	
	IF :count = 0 THEN
	    RETURN;
	END IF;
	
	-- Check existence and lock the dataset
	SELECT code INTO dataset_code 
	FROM "sap.tm.trp.routing.db.dataset::t_dataset"
	WHERE id = :dataset_id FOR UPDATE;
	
	-- Get all the path from layer below
	path_lower = SELECT p.id, from_location, to_location, mtr, carrier, hash
	FROM :path_id AS i
	INNER JOIN "sap.tm.trp.routing.db.dataset::t_path" as p
	ON i.id = p.id
	WHERE p.dataset_id <> :dataset_id OR p.source = :SOURCE_SYSTEM;
	
	hash = SELECT DISTINCT hash FROM :path_lower;
	
	-- Get the path visible in current layer by hash
	CALL "sap.tm.trp.routing.db.dataset::p_get_path_by_hash"(
	    :dataset_id,
	    :hash,
	    :path_exist
	);
	
	path_id_not_visible = SELECT id
	FROM :path_lower AS p
	WHERE id NOT IN (SELECT path_id FROM :path_exist);
	
	-- The path identified by the id cannot be deleted when
	-- it is not visible in this layer
	FOR row AS c_path_id(:path_id_not_visible) DO
        return_code = 1;
	    msg_param = SELECT 0 AS PLACEHOLDER, TO_NVARCHAR(row.id) AS value FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_PATH_ID_NOT_FOUND', :msg_param, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;
	
	IF return_code <> 0 THEN
	    RETURN;
	END IF;
	
	-- Get path in current layer
	-- Delete path in current layer
	path_id_cur = SELECT p.id
	FROM "sap.tm.trp.routing.db.dataset::t_path" AS p
	INNER JOIN :path_id AS i
	ON p.id = i.id
	WHERE p.dataset_id = :dataset_id AND p.source = :SOURCE_MANUAL;
	
	trip_id = 
	SELECT id
	FROM "sap.tm.trp.routing.db.dataset::t_trip" AS t
	WHERE path_id IN (SELECT id FROM :path_id_cur);

	DELETE FROM "sap.tm.trp.routing.db.dataset::t_trip_sequence"
	WHERE trip_id IN (SELECT id FROM :trip_id);
	
    DELETE FROM "sap.tm.trp.routing.db.dataset::t_path_departure_rule"
	WHERE path_id IN (SELECT id FROM :path_id_cur);
	
	DELETE FROM "sap.tm.trp.routing.db.dataset::t_trip"
	WHERE id IN (SELECT id FROM :trip_id);
	
	DELETE FROM "sap.tm.trp.routing.db.dataset::t_path_connection"
	WHERE path_id IN (SELECT id FROM :path_id_cur);
	
	DELETE FROM "sap.tm.trp.routing.db.dataset::t_path" AS c
	WHERE id IN (SELECT id FROM :path_id_cur);
	
	-- Check whether there is duplicate in the same layer
	path_duplicated = SELECT p2.id,p2.from_location,p2.to_location,p2.mtr,p2.carrier
	FROM "sap.tm.trp.routing.db.dataset::t_path" AS p1
	INNER JOIN :path_lower AS p2
	ON p1.hash = p2.hash
	WHERE p1.dataset_id = :dataset_id AND p1.source = :SOURCE_MANUAL;
	
	path_connection_duplicated = SELECT c.*
	FROM "sap.tm.trp.routing.db.dataset::t_path_connection" AS c
	INNER JOIN :path_duplicated AS p
	ON c.path_id = p.id;
	
	-- Compuate path hash
	CALL "sap.tm.trp.routing.db.dataset::p_calculate_path_hash"(
	    :path_duplicated, :path_connection_duplicated, :path_hash
	);
	
	FOR row AS c_path_hash(:path_hash) DO
	    return_code = 1;
	    msg_param = SELECT 0 AS PLACEHOLDER, row.str AS value FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_PATH_UNIQUENESS_VIOLATED', :msg_param, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;
	
	IF return_code <> 0 THEN
	    RETURN; 
	END IF;
	
	path_connection = SELECT c.*
	FROM "sap.tm.trp.routing.db.dataset::t_path_connection" AS c
	INNER JOIN :path_lower AS p
	ON c.path_id = p.id; 
	
	-- Create deletion delta in current layer
	id_map = select id as external_id, "sap.tm.trp.routing.db.dataset::s_path".nextval as id
	from :path_lower;
	
	INSERT INTO "sap.tm.trp.routing.db.dataset::t_path" (id, dataset_id, 
	from_location, to_location, mtr, carrier, action, source, hash,
	created_by, created_on, changed_by, changed_on)
	SELECT m.id, :dataset_id as dataset_id, from_location, to_location, mtr, carrier,
	:ACTION_DELETE, :SOURCE_MANUAL, hash, SESSION_CONTEXT('APPLICATIONUSER'), 
	CURRENT_UTCTIMESTAMP,SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP
	FROM :path_lower AS p
	INNER JOIN :id_map AS m
	ON p.id = m.external_id;
	
	INSERT INTO "sap.tm.trp.routing.db.dataset::t_path_connection" (path_id, "SEQUENCE", 
	from_location, to_location, distance, duration, stay_time, cutoff_offset, availability_offset )
	SELECT m.id, sequence, from_location, to_location, distance, duration, stay_time, 
	c.cutoff_offset, c.availability_offset
	FROM :path_connection AS c
	INNER JOIN :id_map AS m ON m.external_id = c.path_id;
	
	--Invalidate dataset
	-- Network model using the dataset will be invalidated
	-- The invalidation will be executed recursively

	UPDATE "sap.tm.trp.routing.db.dataset::t_dataset"
	SET changed_by = SESSION_CONTEXT('APPLICATIONUSER'), changed_on = CURRENT_UTCTIMESTAMP
	WHERE id = :dataset_id; 
	
    -- Check whether the hash has been changed for connection from layer below
	FOR row AS c_path_id(:path_id_cur) DO
	    msg_param = SELECT 0 AS PLACEHOLDER, TO_NVARCHAR(row.id) AS VALUE FROM DUMMY
	    UNION ALL SELECT 1 AS PLACEHOLDER, :dataset_code AS VALUE FROM DUMMY;
	    
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_BASIC_PATH_DELETED_SUCCESSFULLY', :msg_param, 'I', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
	END FOR;
	
	FOR row AS c_id_map DO
        msg_param = SELECT 0 AS PLACEHOLDER, TO_NVARCHAR(row.external_id) AS VALUE FROM DUMMY
        UNION ALL SELECT 1 AS PLACEHOLDER, TO_NVARCHAR(row.id) AS VALUE FROM DUMMY
        UNION ALL SELECT 2 AS PLACEHOLDER, :dataset_code AS VALUE FROM DUMMY;
        call "SAP_TM_ROUTING"."sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_BASIC_PATH_DELETED_WITH_SUCCESSFULLY', :msg_param, 'I', :message_tmp);
        
        message = SELECT * FROM :message_tmp
        UNION ALL SELECT * FROM :message;
    END FOR;
    
    CALL "sap.tm.trp.routing.db.path::p_invalidate_network_by_dataset" 
    (:dataset_id, 'X', :return_code, :message_tmp, :log_tmp);
    
    IF :return_code <> 0 THEN
        message = SELECT * FROM :message_tmp;
        log = SELECT * FROM :log_tmp;
        RETURN;
    END IF;
        
    message = SELECT * FROM :message 
    UNION ALL SELECT * FROM :message_tmp;
    log = SELECT * FROM :log 
    UNION ALL SELECT * FROM :log_tmp;
	
	return_code = 0;
END