PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.dataset::p_validate_connection" (
    IN connection_list "sap.tm.trp.routing.db.dataset::tt_connection",
    IN connection_carrier "sap.tm.trp.routing.db.dataset::tt_connection_carrier",
	OUT return_code TINYINT,
	OUT message "sap.tm.trp.routing.db.common::tt_message"
	)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   --DEFAULT SCHEMA "SAP_TM_ROUTING"
   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	DECLARE count INTEGER = 0;
	DECLARE msg_param TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
	DECLARE msg_params TABLE(GROUP_ID NVARCHAR(100), PLACEHOLDER INTEGER, VALUE NVARCHAR(100));

	message = SELECT '' AS severity, '' AS message FROM DUMMY WHERE 1 <> 1;
	return_code = 0;
	
	-- ID must be set
    -- Normally it is a programming error
    -- So quick fail
    SELECT COUNT(*) INTO count FROM :connection_list WHERE id IS NULL;
    
    IF count > 0 THEN
        return_code = 1;
        msg_param = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_CONNECTION_EXTERNAL_ID_MISSING', :msg_param, 'E', :message);
        RETURN;
    END IF;
    
    SELECT COUNT(*) INTO count FROM :connection_carrier WHERE connection_id IS NULL;
    
    IF count > 0 THEN
        return_code = 1;
        msg_param = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    call "sap.tm.trp.routing.db.common::p_get_text"
        ('MSG_CONNECTION_CARRIER_CONNECTION_ID_MISSING', :msg_param, 'E', :message);
        RETURN;
    END IF;
    
    -- Check from location
    connection_id = SELECT id FROM :connection_list
    WHERE from_location IS NULL OR from_location = '';
    
    SELECT COUNT(*) INTO count FROM :connection_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :connection_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_CONNECTION_FROM_LOCATION_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    ELSE
        connection_location = SELECT id, from_location AS location FROM :connection_list
        WHERE from_location NOT IN (SELECT name FROM "sap.tm.trp.db.semantic.location::v_all_location");
        
        SELECT COUNT(*) INTO count FROM :connection_location;
    
        IF count > 0 THEN
            return_code = 1;
            msg_params = SELECT id AS group_id, 0 AS placeholder,
            location AS value FROM :connection_location;
            
            call "sap.tm.trp.routing.db.common::p_get_text_batch"
            ('MSG_CONNECTION_LOCATION_NOT_FOUND', :msg_params, 'E', :message_tmp);
            
            message = SELECT * FROM :message 
            UNION ALL SELECT * FROM :message_tmp;
        END IF;
        
    END IF;
    
    -- Check to location
    connection_id = SELECT id FROM :connection_list
    WHERE to_location IS NULL OR to_location = '';
    
    SELECT COUNT(*) INTO count FROM :connection_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :connection_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_CONNECTION_TO_LOCATION_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    ELSE
        connection_location = SELECT id, to_location AS location FROM :connection_list
        WHERE to_location NOT IN (SELECT name FROM "sap.tm.trp.db.semantic.location::v_all_location");
        
        SELECT COUNT(*) INTO count FROM :connection_location;
    
        IF count > 0 THEN
            return_code = 1;
            msg_params = SELECT id AS group_id, 0 AS placeholder,
            location AS value FROM :connection_location;
            
            call "sap.tm.trp.routing.db.common::p_get_text_batch"
            ('MSG_CONNECTION_LOCATION_NOT_FOUND', :msg_params, 'E', :message_tmp);
            
            message = SELECT * FROM :message 
            UNION ALL SELECT * FROM :message_tmp;
        END IF;
    END IF;
    

    connection_id = SELECT id FROM :connection_list
    WHERE from_location IS NOT NULL AND from_location <> '' 
    AND to_location IS NOT NULL AND to_location <> '';
    /* AND from_location = to_location;
    
    SELECT COUNT(*) INTO count FROM :connection_id;

    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :connection_id;
        
        call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_CONNECTION_IDENTICAL_SOURCE_DESTINATION', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF; */
    
    -- Check MTR
    connection_id = SELECT id FROM :connection_list
    WHERE mtr IS NULL OR mtr = '';
    
    SELECT COUNT(*) INTO count FROM :connection_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :connection_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_CONNECTION_MTR_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check whether MTR is valid or not
    invalid_mtr = SELECT mtr FROM :connection_list
    WHERE mtr <> '' AND mtr NOT IN
    (SELECT code FROM "sap.tm.trp.db.semantic.common::v_transportation_means");
    
    SELECT COUNT(*) INTO count FROM :invalid_mtr;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT mtr AS group_id, 0 AS placeholder,
        mtr AS value FROM :invalid_mtr;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_MTR_INVALID', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check distance
    connection_id = SELECT id FROM :connection_list
    WHERE distance IS NULL OR distance < 0;
    
    SELECT COUNT(*) INTO count FROM :connection_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :connection_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_CONNECTION_DISTANCE_INVALID', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    -- Check duration
    connection_id = SELECT id FROM :connection_list
    WHERE duration IS NULL OR duration < 0;
    
    SELECT COUNT(*) INTO count FROM :connection_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :connection_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_CONNECTION_DURATION_INVALID', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
    
    connection_id = SELECT connection_id AS id FROM :connection_carrier
    WHERE carrier IS NULL OR carrier = '';
    
    SELECT COUNT(*) INTO count FROM :connection_id;
    
    IF count > 0 THEN
        return_code = 1;
        msg_params = SELECT id AS group_id, 0 AS placeholder,
        id AS value FROM :connection_id;
	    call "sap.tm.trp.routing.db.common::p_get_text_batch"
        ('MSG_CONNECTION_CARRIER_CARRIER_MISSING', :msg_params, 'E', :message_tmp);
        
        message = SELECT * FROM :message 
        UNION ALL SELECT * FROM :message_tmp;
    END IF;
	
END