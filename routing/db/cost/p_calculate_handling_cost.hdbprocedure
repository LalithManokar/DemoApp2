PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.cost::p_calculate_handling_cost" (
    IN handling_cost_rate TABLE (priority INTEGER, location_name NVARCHAR(200), handling_type VARCHAR(50), 
    from_mot VARCHAR(22), to_mot VARCHAR(22), resource_type NVARCHAR(20), uom_code VARCHAR(20), 
    cost DECIMAL(13, 3), wild_star_count INTEGER),
    IN handling_location TABLE (id NVARCHAR(50), sequence INTEGER, location NVARCHAR(50), from_mtr NVARCHAR(10), to_mtr NVARCHAR(10), resource_type NVARCHAR(20)), 
    OUT cost TABLE(id BIGINT, sequence INTEGER, handling_type NVARCHAR(10), cost DOUBLE)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   READS SQL DATA AS
BEGIN
    /******************************************************
    For a sequence of locations which belong to the same id, 
    the handling type for the first location will be LOAD(LOD)
    the handling type for the last location will be UNLOAD(ULD)
    the handling type for the remaining locations will be TRANSLOAD(TRN)
    ******************************************************/
    lod_uld_seq = 
    SELECT id, MIN(sequence) AS first_seq, MAX(sequence) AS last_seq
    FROM :handling_location
    GROUP BY id;
    
	transload_costs = 
	SELECT id, sequence, IFNULL(SUM(cost), 0) AS cost
	FROM (
		SELECT A.id, sequence, 
			B.cost AS cost, RANK() OVER (PARTITION BY A.id, sequence ORDER BY B.priority, B.wild_star_count) AS priority
		FROM :handling_location AS A INNER JOIN :lod_uld_seq AS C
		ON A.id = C.id AND A.sequence > C.first_seq AND A.sequence < C.last_seq
		LEFT OUTER JOIN :handling_cost_rate AS B 
		ON B.from_mot != '' AND B.to_mot != '' 
		AND (B.location_name = '*' OR A.location = B.location_name) 
		AND (B.from_mot = '*' OR A.from_mtr = B.from_mot) 
		AND (B.to_mot = '*' OR A.to_mtr = B.to_mot)
	)
	WHERE priority = 1
	GROUP BY id, sequence;

	-- Compute load and unload cost
	load_costs = 
	SELECT id, sequence, IFNULL(SUM(cost), 0) AS cost
	FROM (
		SELECT A.id, A.sequence, B.cost AS cost, RANK() OVER (PARTITION BY A.id ORDER BY B.priority, B.wild_star_count) AS priority
		FROM :handling_location AS A INNER JOIN :lod_uld_seq AS C
		ON A.id = C.id AND A.sequence = C.first_seq
		LEFT OUTER JOIN :handling_cost_rate AS B
		ON B.from_mot = '' AND B.to_mot != ''
		AND (B.location_name = '*' OR A.location = B.location_name) 
		AND (B.to_mot = '*' OR A.to_mtr = B.to_mot)
		AND (B.resource_type = '*' OR A.resource_type = B.resource_type)
	)
	WHERE priority = 1
	GROUP BY id, sequence;

	unload_costs = 
	SELECT id, sequence, IFNULL(SUM(cost), 0) AS cost
	FROM (
		SELECT A.id, sequence, B.cost AS cost, RANK() OVER (PARTITION BY A.id, sequence ORDER BY B.priority, B.wild_star_count) AS priority 
		FROM :handling_location AS A INNER JOIN :lod_uld_seq AS C
		ON A.id = C.id AND A.sequence = C.last_seq
		LEFT OUTER JOIN :handling_cost_rate AS B
		ON B.from_mot != '' AND B.to_mot = ''
		AND (B.location_name = '*' OR A.location = B.location_name) 
		AND (B.from_mot = '*' OR A.from_mtr = B.from_mot)
	)
	WHERE priority = 1
	GROUP BY id, sequence;
	
	cost = 
	SELECT id, sequence, 'LOD' AS handling_type, cost
	FROM :load_costs
	UNION ALL
	SELECT id, sequence, 'ULD' AS handling_type, cost
	FROM :unload_costs
	UNION ALL
	SELECT id, sequence, 'TRN' AS handling_type, cost
	FROM :transload_costs;
END