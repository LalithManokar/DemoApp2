PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.cost::p_calculate_location_handling_cost" (
    IN cost_model_id BIGINT,
    IN handling_location TABLE (location NVARCHAR(50), from_mtr NVARCHAR(10), to_mtr NVARCHAR(10), resource_type NVARCHAR(20)),
    OUT cost TABLE(location NVARCHAR(50), from_mtr NVARCHAR(10), to_mtr NVARCHAR(10), resource_type NVARCHAR(20), cost DOUBLE)
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   READS SQL DATA AS
BEGIN

    DECLARE UOM_CODE_TEU VARCHAR(10) := 'TEU';

    CALL "sap.tm.trp.db.costmodel::sp_get_handling_based_cost_info"(:cost_model_id, handling_cost_info);

   RESOURCE_TYPES = SELECT DISTINCT T1.RESOURCE_TYPE_CODE,T3.TEU_COUNT
                     FROM "sap.tm.trp.db.semantic.resource::v_resource_type_with_category" T1
                     INNER JOIN "sap.tm.trp.db.costmodel::v_cost_model" T2
                     ON (T1.RESOURCE_CATEGORY = T2.RESOURCE_CATEGORY)
                     INNER JOIN "sap.tm.trp.db.semantic.resource::v_resource_type" T3
                     ON (T1.RESOURCE_TYPE_CODE = T3.RESOURCE_TYPE_CODE and T1.EQUI_TYPE = T3.EQUI_TYPE)
                     WHERE T2.ID = :COST_MODEL_ID;
	-- Compute load and unload cost
	load_costs =
	SELECT location, from_mtr, to_mtr, resource_type, SUM(IFNULL(cost, 0)) AS cost
	FROM (
		SELECT A.location, A.from_mtr, A.to_mtr, A.resource_type,
		CASE B.uom_code WHEN :UOM_CODE_TEU
        THEN B.cost * E.teu_count
        ELSE B.cost END AS cost,
		RANK() OVER
		(PARTITION BY A.location, A.from_mtr, A.to_mtr, A.resource_type
		ORDER BY B.priority, B.wild_star_count) AS priority
		FROM (SELECT * FROM :handling_location WHERE from_mtr = '' AND  to_mtr != '') AS A
		INNER JOIN :RESOURCE_TYPES AS E
        ON A.resource_type = E.resource_type_code
		LEFT OUTER JOIN
		(SELECT * FROM :handling_cost_info WHERE from_mot = '*' AND to_mot != '' )AS B
		ON (B.location_name = '*' OR A.location = B.location_name)
		AND (B.to_mot = '*' OR A.to_mtr = B.to_mot)
		AND (B.resource_type = '*' OR A.resource_type = B.resource_type)
	)
	WHERE priority = 1
	GROUP BY location, from_mtr, to_mtr, resource_type;

	unload_costs =
	SELECT location, from_mtr, to_mtr, resource_type, SUM(IFNULL(cost, 0)) AS cost
	FROM (
		SELECT A.location, A.from_mtr, A.to_mtr, A.resource_type,
		CASE B.uom_code WHEN :UOM_CODE_TEU
        THEN B.cost * E.teu_count
        ELSE B.cost END AS cost,
        RANK() OVER
		(PARTITION BY A.location, A.from_mtr, A.to_mtr, A.resource_type
		ORDER BY B.priority, B.wild_star_count) AS priority
		FROM (SELECT * FROM :handling_location WHERE from_mtr != '' AND  to_mtr = '') AS A
		INNER JOIN :RESOURCE_TYPES AS E
        ON A.resource_type = E.resource_type_code
		LEFT OUTER JOIN
		(SELECT * FROM :handling_cost_info WHERE from_mot != '' AND to_mot = '*' )AS B
		ON (B.location_name = '*' OR A.location = B.location_name)
		AND (B.from_mot = '*' OR A.from_mtr = B.from_mot)
		AND (B.resource_type = '*' OR A.resource_type = B.resource_type)
	)
	WHERE priority = 1
	GROUP BY location, from_mtr, to_mtr, resource_type;


	cost =
	SELECT * FROM :load_costs
	UNION ALL
	SELECT * FROM :unload_costs;
END
