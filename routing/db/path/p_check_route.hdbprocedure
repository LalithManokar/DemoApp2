PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.path::p_check_route"(
	IN network_code NVARCHAR(50),
	IN route_id "sap.tm.trp.routing.db.common::tt_id",
	OUT validity TABLE (
	    route_id BIGINT,
        valid TINYINT )
    )
	LANGUAGE SQLSCRIPT
	SQL SECURITY INVOKER
	DEFAULT SCHEMA "SAP_TM_ROUTING"
	READS SQL DATA
AS
BEGIN
    DECLARE PATH_TYPE_PATH CHAR := 'P';
    DECLARE PATH_TYPE_CONNECTION CHAR := 'C';
    
    DECLARE network_id BIGINT;
    DECLARE dataset_id BIGINT;
    DECLARE count INTEGER;
     
    DECLARE EXIT HANDLER FOR SQL_ERROR_CODE 1299
    BEGIN
        validity = SELECT id AS route_id, 0 AS valid FROM :route_id;
    END;
    
    SELECT id, dataset_id INTO network_id, dataset_id FROM "sap.tm.trp.routing.db.path::t_network_model"
	WHERE code = :network_code;
    
    -- Find those composite path in merged view
    -- Composite paths that are logically deleted will not be considered
	CALL "sap.tm.trp.routing.db.path::p_get_composite_path_merged_view" (:network_id, '', '', '', accumulate_path_id, accumulate_conflict_path_id);
	
    route_existing = SELECT 
    id, from_location, to_location, departure_time, arrival_time
    FROM "sap.tm.trp.routing.db.path::t_route"
    WHERE composite_path_id IN (SELECT id from :accumulate_path_id) and id IN (SELECT id from :route_id);
    
    -- Not found route
    validity = SELECT id AS route_id, 0 AS valid FROM :route_id
    WHERE id NOT IN (SELECT id FROM :route_existing);
    
    SELECT COUNT(*) INTO count FROM :route_existing;
    
    IF :count > 0 THEN
    
        route_sequence = SELECT route_id, sequence, location, pre_trip_sequence, next_trip_sequence,
        basic_path_id, path_type, trip_id
        FROM "sap.tm.trp.routing.db.path::t_route_sequence" AS s
        INNER JOIN :route_existing AS r
        ON s.route_id = r.id;
        
        -- Some path might has already been deleted physically or deleted in upper layer
        hash_tab = SELECT p.hash
        FROM "sap.tm.trp.routing.db.dataset::t_path" p
        INNER JOIN (SELECT DISTINCT basic_path_id FROM :route_sequence WHERE path_type = :PATH_TYPE_PATH) r
        ON p.id = r.basic_path_id;
        
        SELECT COUNT(*) INTO count FROM :hash_tab;
    
        IF :count > 0 THEN
            CALL "sap.tm.trp.routing.db.dataset::p_get_path_by_hash"
            (
                :dataset_id,
                :hash_tab,
                :paths
            );
            path_id = SELECT path_id AS id FROM :paths;
        ELSE
           path_id = SELECT 0 AS id FROM DUMMY WHERE 1 <> 1;
        END IF;
        
        hash_tab = SELECT c.hash
        FROM "sap.tm.trp.routing.db.dataset::t_connection" c
        INNER JOIN (SELECT DISTINCT basic_path_id FROM :route_sequence WHERE path_type = :PATH_TYPE_CONNECTION) r
        ON c.id = r.basic_path_id;
        
        SELECT COUNT(*) INTO count FROM :hash_tab;
    
        IF :count > 0 THEN
        
            CALL "sap.tm.trp.routing.db.dataset::p_get_connection_by_hash"
            (
                :dataset_id,
                :hash_tab,
                :connection
            );
            connection_id = SELECT id FROM :connection;
        ELSE
            connection_id = SELECT 0 AS id FROM DUMMY WHERE 1 <> 1;
        END IF;
        
        -- Some basic path or basic connection not found
        validity = SELECT DISTINCT route_id, 0 AS valid FROM :route_sequence
        WHERE basic_path_id IS NOT NULL
        AND basic_path_id NOT IN (SELECT id FROM :path_id UNION ALL SELECT id FROM :connection_id)
        UNION ALL
        SELECT * FROM :validity;
        
        trip_ids = 
        SELECT trip_id FROM :route_sequence r
        WHERE route_id NOT IN (SELECT route_id FROM :validity) AND path_type = :PATH_TYPE_PATH;
        
        SELECT COUNT(*) INTO count FROM :trip_ids;
    
        IF :count > 0 THEN
        
            "sap.tm.trp.routing.db.dataset::p_query_trip_locations"(
                :trip_ids, 
                trip_locations
            );
            
            validity = SELECT DISTINCT route_id, 0 AS valid FROM :route_sequence
            WHERE trip_id NOT IN (SELECT DISTINCT trip_id FROM :trip_locations) AND path_type = :PATH_TYPE_PATH
            UNION
            SELECT * FROM :validity;
        
        END IF;
        
        validity = SELECT id AS route_id, 1 AS valid FROM :route_id
        WHERE id NOT IN (SELECT route_id FROM :validity)
        UNION ALL
        SELECT * FROM :validity;
    
    END IF;
	
END;