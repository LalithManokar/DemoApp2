PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.path::p_delete_network" (
    IN network_code NVARCHAR(50),
    OUT return_code INTEGER,
	OUT message "sap.tm.trp.routing.db.common::tt_message",
	OUT log "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	DECLARE path_id_tab TABLE(path_id BIGINT);
	
	DECLARE network_id BIGINT;
	DECLARE network_exist INTEGER;
	DECLARE base_network_id BIGINT;
	
	-- Determine the set of path_id related to network_id
	select COUNT(*) INTO network_exist FROM "sap.tm.trp.routing.db.path::t_network_model" WHERE code = :network_code;
	IF :network_exist = 0 THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, :network_id AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_ID_NOT_EXIST', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 1;
	    RETURN;
	END IF;
	
	SELECT id, base_network_id INTO network_id, base_network_id
	FROM "sap.tm.trp.routing.db.path::t_network_model"
	WHERE code = :network_code;
	
	-- if delete the base network, check whether there is delta network exist
	IF :base_network_id IS NULL THEN
	    SELECT COUNT(id) INTO network_exist
	    FROM "sap.tm.trp.routing.db.path::t_network_model"
	    WHERE base_network_id = :network_id;
	    
	    IF :network_exist > 0 THEN
    	    msg_params = SELECT 0 AS PLACEHOLDER, :network_id AS VALUE FROM DUMMY;
    	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_ID_DELTA_EXIST', :msg_params, 'E', message);
    	    log = SELECT * FROM :message;
    	    return_code = 2;
    	    RETURN;
	    END IF;
	END IF;
	
	route_id_tab = SELECT id AS route_id FROM "sap.tm.trp.routing.db.path::t_route"
	WHERE network_model_id = :network_id;
	
	DELETE FROM "sap.tm.trp.routing.db.path::t_route_sequence_capacity"
	WHERE route_id in ( SELECT route_id FROM :route_id_tab);
	
	-- Delete all related path_id from t_path_sequence
	DELETE FROM "sap.tm.trp.routing.db.path::t_route_sequence" AS B
	WHERE route_id in ( SELECT route_id FROM :route_id_tab);
	-- Delete all related path_id from t_path
	DELETE FROM "sap.tm.trp.routing.db.path::t_route"
	WHERE network_model_id = :network_id;
	
    path_id_tab = SELECT id AS path_id FROM "sap.tm.trp.routing.db.path::t_path" WHERE network_model_id = :network_id;
	-- Delete all related path_id from t_path_sequence
	DELETE FROM "sap.tm.trp.routing.db.path::t_path_sequence" AS B
	WHERE EXISTS ( SELECT path_id FROM :path_id_tab AS A WHERE A.path_id = B.path_id );
	-- Delete all related path_id from t_path
	DELETE FROM "sap.tm.trp.routing.db.path::t_path"
	WHERE network_model_id = :network_id;
	-- Delete all related configuration from t_network_model_conf
	--DELETE FROM "sap.tm.trp.routing.db.path::t_network_model_conf"
	--WHERE network_model_id = :network_id;
	-- Delete network model id from t_network_model
	DELETE FROM "sap.tm.trp.routing.db.path::t_network_model"
	WHERE id = :network_id;

	msg_params = SELECT 0 AS PLACEHOLDER, :network_id AS VALUE FROM DUMMY;
	CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_ID_DELETE_SUCCESS', :msg_params, 'I', message);
	log = SELECT * FROM :message;
	return_code = 0;
END