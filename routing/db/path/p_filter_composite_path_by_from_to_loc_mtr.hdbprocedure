PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.path::p_filter_composite_path_by_from_to_loc_mtr" (
    IN path_data TABLE(id BIGINT, network_model_id BIGINT, action CHAR, source CHAR, hash VARBINARY(32)),
	IN from_location NVARCHAR(50),
	IN to_location NVARCHAR(50),
	IN mtr NVARCHAR(10),
	OUT path_signature TABLE(id BIGINT, network_model_id BIGINT, action CHAR, source CHAR, hash VARBINARY(32))
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA SAP_TM_ROUTING
   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
	-- Filter by mtr
	-- When mtr is specific, only as long as there is one transload mtr use the the specified mtr will be considered
	IF mtr IS NOT NULL AND mtr != '' THEN
		path_data = 
		SELECT *
		FROM :path_data
		WHERE id IN (
    		SELECT DISTINCT A.path_id
    		FROM "sap.tm.trp.routing.db.path::t_path_sequence" AS A INNER JOIN :path_data AS B ON A.path_id = B.id
    		WHERE A.mtr = :mtr
    	);
	END IF;

	-- Filter by from_location and to_location
	-- If from_location is specified, only those composite path the from location of one segment matched will be considered
	-- If to_location is specified, only those composite path the to location of one segment matched will be considered
	IF (:from_location IS NOT NULL AND :from_location != '') OR (:to_location IS NOT NULL AND :to_location != '') THEN
    	-- if from_location is not empty
    	IF :from_location IS NOT NULL AND :from_location != '' THEN
        	from_list = 
        	SELECT path_id, sequence - 1 AS sequence, from_location AS location -- map sequence on edge to sequence on location
        	FROM :path_data AS A INNER JOIN "sap.tm.trp.routing.db.path::t_path_sequence" AS B
        	ON A.id = B.path_id
        	WHERE from_location = :from_location;
        ELSE
            from_list = 
            SELECT 0 AS path_id, 0 AS sequence, '' AS location
            FROM DUMMY
            WHERE 1 != 1;
        END IF;
        
    	-- if to_location is not empty
    	IF :to_location IS NOT NULL AND :to_location != '' THEN
        	to_list = 
        	SELECT path_id, sequence, to_location AS location  -- the sequence on edge is the same sequence on location
        	FROM :path_data AS A INNER JOIN "sap.tm.trp.routing.db.path::t_path_sequence" AS B
        	ON A.id = B.path_id
        	WHERE to_location = :to_location;
        ELSE
            to_list = 
            SELECT 0 AS path_id, 0 AS sequence, '' AS location
            FROM DUMMY
            WHERE 1 != 1;
        END IF;
        
        IF (:from_location IS NOT NULL AND :from_location != '') AND (:to_location IS NOT NULL AND :to_location != '') THEN
            -- if both from_location and to_location are not empty the from_location sequence must less than to_location sequence
            path_data = 
            SELECT A.*
            FROM :path_data AS A INNER JOIN (
                SELECT DISTINCT A.path_id
                FROM :from_list AS A INNER JOIN :to_list AS B ON A.path_id = B.path_id AND A.sequence < B.sequence
            ) AS B ON A.id = B.path_id;
        ELSE
            path_data = 
            SELECT A.*
            FROM :path_data AS A INNER JOIN (
                SELECT DISTINCT path_id 
                FROM (
                SELECT path_id FROM :from_list
                UNION ALL
                SELECT path_id FROM :to_list)
            ) AS B ON A.id = B.path_id;
        END IF;
    END IF;

    path_signature = 
    SELECT id, network_model_id, action, source, hash
    FROM :path_data;
END