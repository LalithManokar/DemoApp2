PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.path::p_refresh_network" ( 
    IN network_code NVARCHAR(50),
    IN force CHAR(1),
    OUT return_code INTEGER,
    OUT message "sap.tm.trp.routing.db.common::tt_message",
    OUT log "sap.tm.trp.routing.db.common::tt_message"
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN
   /*************************************
       Assume: All and the above level of networks should be set to invalidated
       
       
       1. If the network denoted by network_code is valid, do nothing and return
       2. If the base network is invalid, then report an error to first refresh the base network and return
       3. If the base network is NULL, and invalidation_reason_code is not 'D', call both p_build_network and p_build_delta_network
       4. If the base network is NULL, and invalidation_reason_code is 'D', call p_build_delta_network
       5. If the base network is not NULL, call p_build_delta_network
       
       Return Code:
       0: Success
       1: Network Code does not exist
       2: Base Network is not valid, so can not refresh current network
       3: Error occur during build base network
       4; Error occur during build delta network
   *************************************/
	DECLARE msg_params TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
	DECLARE network_exist INTEGER;
	DECLARE network_id BIGINT;
	DECLARE base_network_id BIGINT;
	DECLARE dataset_id BIGINT;
	DECLARE cost_model_id BIGINT;
	DECLARE resource_type NVARCHAR(20);

	DECLARE manual_source CONSTANT CHAR = 'M';
	DECLARE system_source CONSTANT CHAR = 'S';
	
	DECLARE cur_invalid_status, base_invalid_status CHAR;
	DECLARE cur_invalid_reason_code VARCHAR(10);

	DECLARE path_usage CONSTANT VARCHAR(10) = 'PATH';

	-- Judge whether the network code already exists
	SELECT COUNT(*) INTO network_exist FROM "sap.tm.trp.routing.db.path::t_network_model" WHERE CODE = :network_code;
	IF :network_exist = 0 THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, :network_code AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_CODE_NOT_EXIST', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 1;
	    RETURN;
	END IF;
	
	SELECT id, base_network_id, dataset_id, invalidated, invalidation_reason_code INTO network_id, base_network_id, dataset_id, cur_invalid_status, cur_invalid_reason_code
	FROM "sap.tm.trp.routing.db.path::t_network_model" 
	WHERE code = :network_code FOR UPDATE;
	
	-- Check whether current status is valid, if it is, then no-op
	IF :cur_invalid_status = '' AND force <> 'X' THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, :network_code AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_ALREADY_UP_TO_DATE', :msg_params, 'I', message);
	    log = SELECT * FROM :message;
	    return_code = 0;
	    RETURN;
	END IF;
	
	-- Check whether base network is valid, if not, prompt the user to first fresh base network
	IF :base_network_id IS NOT NULL THEN
    	SELECT invalidated INTO base_invalid_status
    	FROM "sap.tm.trp.routing.db.path::t_network_model"
    	WHERE id = :base_network_id;
    	
    	IF :base_invalid_status = 'X' THEN 
    	    msg_params = SELECT 0 AS PLACEHOLDER, :base_network_id AS VALUE FROM DUMMY;
    	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_REFRESH_ON_INVALID_BASE_NETWORK', :msg_params, 'E', message);
    	    log = SELECT * FROM :message;
    	    return_code = 2;
    	    RETURN;
    	END IF;
    END IF;

	CALL "sap.tm.trp.routing.db.path::p_get_network_attr"(:network_id, :path_usage, cost_model_id, resource_type);
	-- Replace the original configurations in network with new set of configuration
	-- Here only delete the original configurations
	
	-- Delete old composite path
	IF :base_network_id IS NULL AND :cur_invalid_reason_code = 'D' THEN
    	update_path_id = 
    	SELECT id 
    	FROM "sap.tm.trp.routing.db.path::t_path" 
    	WHERE network_model_id = :network_id AND action IS NOT NULL AND source = :system_source;
	ELSE
    	update_path_id = 
    	SELECT id 
    	FROM "sap.tm.trp.routing.db.path::t_path" 
    	WHERE network_model_id = :network_id AND source = :system_source;
	END IF;
	
	DELETE FROM "sap.tm.trp.routing.db.path::t_path_sequence" 
	WHERE EXISTS (SELECT id from :update_path_id WHERE id = path_id);

	DELETE FROM "sap.tm.trp.routing.db.path::t_path_target" 
	WHERE EXISTS (SELECT id from :update_path_id WHERE id = path_id);

	DELETE FROM "sap.tm.trp.routing.db.path::t_path" AS A
	WHERE EXISTS (SELECT id FROM :update_path_id AS B WHERE B.id = A.id);
	
	-- Judge whether current network_id is a base network or a delta network
	IF :base_network_id IS NULL AND :cur_invalid_reason_code != 'D' THEN
    	CALL "sap.tm.trp.routing.db.path::p_get_network_config_info"(:network_id, :path_usage, options);
    	--options = SELECT name, value FROM "sap.tm.trp.routing.db.path::t_network_model_conf" WHERE network_model_id = :network_id;
    	-- Currently only reserved for testing purpose!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    	--DELETE FROM "sap.tm.trp.routing.db.path::t_network_model_conf" WHERE network_model_id = :network_id;
    	
    	CALL "sap.tm.trp.routing.db.path::p_build_network"(:dataset_id, :network_code, :cost_model_id, :resource_type, :options, :network_id, return_code, message, log);

    	IF :return_code != 0 THEN
    	    return_code = 3;
    	    RETURN;
    	END IF;
    END IF;

    CALL "sap.tm.trp.routing.db.path::p_build_delta_network"(:dataset_id, :network_id, :base_network_id, message, log, return_code);

	IF :return_code != 0 THEN
	    return_code = 4;
	    RETURN;
	END IF;
	
	UPDATE "sap.tm.trp.routing.db.path::t_network_model"
	SET invalidated = '', invalidation_reason_code = '',
	CHANGED_BY = SESSION_CONTEXT('APPLICATIONUSER'),
	CHANGED_ON = CURRENT_UTCTIMESTAMP
	WHERE id = :network_id;
	
	msg_params = SELECT 0 AS PLACEHOLDER, :network_code AS VALUE FROM DUMMY;
	CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_CODE_UPDATE_SUCCESS', :msg_params, 'I', message_tmp);
	message =
	SELECT * FROM :message
	UNION ALL
	SELECT * FROM :message_tmp;
	
	log =
	SELECT * FROM :log
	UNION ALL
	SELECT * FROM :message_tmp;
	
	return_code = 0;
	
END