PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.path::p_calculate_composite_path_hash" (
	IN path_seq TABLE(path_id BIGINT, sequence INTEGER, basic_path_id BIGINT, from_location NVARCHAR(50), to_location NVARCHAR(50), from_bp_sequence INTEGER, to_bp_sequence INTEGER),
	OUT path_hash TABLE(path_id BIGINT, hash VARBINARY(32))
    )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA SAP_TM_ROUTING
   READS SQL DATA AS
BEGIN
	/***************************************
	For each path id, concatenate all its associated location sequence(defined by location name plus bp_sequence) interleaved with the basic path id representing
	the connection between two adjacent locations, use ':' as the separator to separate each location or basic path id
	Use hash_sha256 to compute hash for each computed concatenated string.
	path_seq : contains all needed segment info for basic path
	path_hash: for each path_id return its hash
	***************************************/
	-- decl_list
	DECLARE str_sep CONSTANT VARCHAR(1) = ':'; -- separator of concanated string
	-- exception_list
	-- stmt_list
	path_loc_start = 
	SELECT path_id, FIRST_VALUE(from_location ORDER BY sequence) AS start_location, FIRST_VALUE(from_bp_sequence - 1 ORDER BY sequence) AS start_bp_sequence
	FROM :path_seq
	GROUP BY path_id;
	
	path_loc_seq = 
	SELECT path_id, sequence, 
	    CASE 
	    WHEN next_bp_sequence IS NOT NULL THEN basic_path_id || :str_sep || pre_bp_sequence || :str_sep || location || :str_sep || next_bp_sequence
	    ELSE basic_path_id || :str_sep || pre_bp_sequence || :str_sep || location
	    END AS str_concat
	FROM (
	SELECT path_id, sequence, basic_path_id, to_location AS location, 
	to_bp_sequence AS pre_bp_sequence, LEAD(from_bp_sequence - 1, 1) OVER (PARTITION BY path_id ORDER BY sequence ASC) AS next_bp_sequence
	FROM :path_seq);
	
	path_hash = 
	SELECT A.path_id, HASH_SHA256(TO_BINARY(start_location || ':' || start_bp_sequence || str_concat)) AS hash
	FROM :path_loc_start AS A INNER JOIN (
	    SELECT path_id, STRING_AGG(str_concat, ':' ORDER BY sequence) AS str_concat
	    FROM :path_loc_seq
	    GROUP BY path_id
	) AS B ON A.path_id = B.path_id;
	
END