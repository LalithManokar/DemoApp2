PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.path::p_create_network" ( 
                IN dataset_id BIGINT,
                IN network_code NVARCHAR(50),
                IN setting_group_id BIGINT,
				--IN options "sap.tm.trp.routing.db.common::tt_option",
				OUT return_code INTEGER,
				OUT network_id BIGINT,
				OUT message "sap.tm.trp.routing.db.common::tt_message",
				OUT log "sap.tm.trp.routing.db.common::tt_message"
            )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN
   /*************************************
       RETURN_CODE:
       0: Success
       1: Network code is invalid
       2: Network code does not exist
       3: Dataset id does not exist
       4: Dataset id could not equal to global dataset id
       5: Cost Model ID haven't configured
       6: Equipment Type haven't configured
       7: Error returned by build_network algorithm
   *************************************/ 
   	DECLARE global_dataset_id CONSTANT BIGINT := 0;
   	DECLARE cost_model_id BIGINT;
   	DECLARE resource_type NVARCHAR(20);
    DECLARE cost_para_name CONSTANT VARCHAR(50) = 'COST_MODEL_ID';  -- later need to change
    DECLARE equip_para_name CONSTANT VARCHAR(50) = 'BASE_RESOURCE_TYPE';
    DECLARE path_usage CONSTANT VARCHAR(50) = 'PATH';  -- later need to change
	DECLARE msg_params TABLE(PLACEHOLDER INTEGER, VALUE NVARCHAR(100));
	DECLARE network_exist INTEGER;
	DECLARE dataset_exist INTEGER;
	DECLARE cost_model_exist INTEGER;
	DECLARE valid_flag INTEGER;
	
	
	DECLARE target_cfg_name CONSTANT VARCHAR(50) = 'TARGET';
	DECLARE target_arr VARCHAR(50) ARRAY;
	DECLARE iter INTEGER;
	
	return_code = 0;
	--DECLARE path_ret_code INTEGER; -- return code
	-- Judge whether the input code is valid
	CALL "sap.tm.trp.routing.db.util::p_validate_code"(:network_code, valid_flag, message);
	IF :valid_flag = 1 THEN
	    log = SELECT * FROM :message;
	    return_code = 1;
	    RETURN;
	END IF;
	
	-- Judge whether the network code already exists
	SELECT COUNT(*) INTO network_exist FROM "sap.tm.trp.routing.db.path::t_network_model" WHERE CODE = :network_code;
	IF :network_exist > 0 THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, :network_code AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_CODE_ALREADY_EXIST', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 2;
	    RETURN;
	END IF;
	
	-- Check that dataset id exists
	SELECT COUNT(*) INTO dataset_exist FROM "sap.tm.trp.routing.db.dataset::t_dataset" WHERE id = :dataset_id;
	IF :dataset_exist = 0 THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, :dataset_id AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_DATASET_ID_NOT_EXIST', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 3;
	    RETURN;
	ELSEIF :dataset_id = :global_dataset_id THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_DATASET_ID_CONFLICT_WITH_GLOBAL', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 4;
	    RETURN;
	END IF;
	
	

	-- Generate new Network ID
	SELECT "sap.tm.trp.routing.db.path::s_network".NEXTVAL into network_id FROM dummy; 
	
	-- Retrieve cost model id and resource type
   CALL "sap.tm.trp.db.planningcockpit::p_get_setting_group_parameter_value_for_usage"(:setting_group_id, :path_usage, setting_paras);
   SELECT TO_BIGINT(value) INTO cost_model_id
   FROM :setting_paras
   WHERE name = :cost_para_name;

   SELECT value INTO resource_type
   FROM :setting_paras
   WHERE name = :equip_para_name;
   
   -- Check whether cost model exists
	IF :cost_model_id IS NULL THEN
	    return_code = 5;
	    msg_params = SELECT 0 AS PLACEHOLDER, :cost_model_id AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_COST_MODEL_NOT_CONFIGURED', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    RETURN;
	END IF;
	
	-- Check whether resource type exists
	IF :resource_type IS NULL OR :resource_type = '' THEN
	    return_code = 6;
	    msg_params = SELECT 0 AS PLACEHOLDER, :cost_model_id AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_BASE_RESOURCE_TYPE_NOT_CONFIGURED', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    RETURN;
	END IF;
	
	CALL "sap.tm.trp.routing.db.path::p_build_network"(:dataset_id, :network_code, :cost_model_id, :resource_type, :setting_paras, :network_id, return_code, message, log);
	
	IF :return_code = 1 THEN
	    return_code = 7;
	    RETURN;
	END IF;

	-- Store networkid, datasetid, cost model id in "sap.tm.trp.routing.db.path::t_network_model"
	INSERT INTO "sap.tm.trp.routing.db.path::t_network_model" 
	( id, code, dataset_id, setting_group_id, invalidated, invalidation_reason_code, valid_from, valid_to, created_by, created_on, changed_by, changed_on )
	VALUES (:network_id, :network_code, :dataset_id, :setting_group_id, '', '', CURRENT_UTCDATE, TO_DATE('9999-12-31', 'YYYY-MM-DD'), SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP, SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP);


	msg_params = SELECT 0 AS PLACEHOLDER, :network_code AS VALUE FROM DUMMY;
	CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_CODE_CREATE_SUCCESS', :msg_params, 'I', message_tmp);
	message =
	SELECT * FROM :message
	UNION ALL
	SELECT * FROM :message_tmp;
	
	log =
	SELECT * FROM :log
	UNION ALL
	SELECT * FROM :message_tmp;
	
	return_code = 0;
END