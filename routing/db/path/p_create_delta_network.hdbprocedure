PROCEDURE "SAP_TM_ROUTING"."sap.tm.trp.routing.db.path::p_create_delta_network" ( 
    IN dataset_id BIGINT,
    IN network_code NVARCHAR(50),
    IN base_network_code NVARCHAR(50),
	OUT network_id BIGINT,
	OUT message "sap.tm.trp.routing.db.common::tt_message",
	OUT log "sap.tm.trp.routing.db.common::tt_message",
	OUT return_code INTEGER
)
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER
   DEFAULT SCHEMA "SAP_TM_ROUTING"
   AS
BEGIN
   /*************************************
       RETURN_CODE:
       0. Success
       1. Network Code not valid
       2. Network Code already exist
       3. Dataset ID not exist
       4. Dataset ID can not equal to global dataset id
       5. Base Network Code not exist
       6. Given Dataset ID doesn't have base dataset id
       7. Given Dataset ID don't extend from the base network code's dataset id
       8. Error throw from the delta generation engine
   *************************************/ 
   	DECLARE global_dataset_id BIGINT := 0;
	DECLARE msg_params TABLE(placeholder INTEGER, value NVARCHAR(100));
	DECLARE network_exist INTEGER;
	DECLARE dataset_exist INTEGER;
	DECLARE setting_group_id BIGINT;
	DECLARE valid_flag INTEGER;
	DECLARE base_network_id BIGINT;
	DECLARE base_dataset_id BIGINT;
	DECLARE count INTEGER;
	DECLARE SOURCE_MANUAL CHAR(1) := 'M';
	
	-- Judge whether the input code is valid
	CALL "sap.tm.trp.routing.db.util::p_validate_code"(:network_code, valid_flag, message);
	IF :valid_flag = 1 THEN
	    log = SELECT * FROM :message;
	    return_code = 1;
	    RETURN;
	END IF;
	
	-- Judge whether the network code already exists
	SELECT COUNT(*) INTO network_exist FROM "sap.tm.trp.routing.db.path::t_network_model" WHERE CODE = :network_code;
	IF :network_exist > 0 THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, :network_code AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_CODE_ALREADY_EXIST', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 2;
	    RETURN;
	END IF;
	
	-- Check that dataset id exists
	SELECT COUNT(*) INTO dataset_exist FROM "sap.tm.trp.routing.db.dataset::t_dataset" WHERE id = :dataset_id;
	IF :dataset_exist = 0 THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, :dataset_id AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_DATASET_ID_NOT_EXIST', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 3;
	    RETURN;
	ELSEIF :dataset_id = :global_dataset_id THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, '' AS VALUE FROM DUMMY WHERE 1 <> 1;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_DATASET_ID_CONFLICT_WITH_GLOBAL', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 4;
	    RETURN;
	END IF;
	
	-- Judge whether the base network code already exists
	SELECT COUNT(*) INTO network_exist FROM "sap.tm.trp.routing.db.path::t_network_model" WHERE CODE = :base_network_code;
	IF :network_exist = 0 THEN
	    msg_params = SELECT 0 AS PLACEHOLDER, :base_network_code AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_CODE_NOT_FOUND', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 5;
	    RETURN;
	END IF;
	
	-- Note the logic to fetch cost model id will change later to adapt to new API !!!
	SELECT id, setting_group_id INTO base_network_id, setting_group_id
	FROM "sap.tm.trp.routing.db.path::t_network_model" WHERE CODE = :base_network_code;

	-- Verify the given dataset_id has base dataset id and this base dataset id must be the dataset_id of base_network_id
	SELECT base_dataset_id INTO base_dataset_id
	FROM "sap.tm.trp.routing.db.dataset::t_dataset"
	WHERE id = :dataset_id;
	
	IF :base_dataset_id IS NULL THEN
	    -- log error message for base dataset not exist
	    msg_params = SELECT 0 AS PLACEHOLDER, :dataset_id AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_DATASET_HAS_NO_BASE_DATASET', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    return_code = 6;
	    RETURN;
	END IF;
	
	SELECT CASE WHEN dataset_id = :base_dataset_id THEN 0 ELSE 7 END INTO return_code
	FROM "sap.tm.trp.routing.db.path::t_network_model"
	WHERE id = :base_network_id;
	
	IF :return_code != 0 THEN
	    -- log error message for base dataset id is wrong
	    msg_params = 
	    SELECT 0 AS PLACEHOLDER, :dataset_id AS VALUE FROM DUMMY
	    UNION ALL
	    SELECT 1 AS PLACEHOLDER, :base_dataset_id AS VALUE FROM DUMMY
	    UNION ALL
	    SELECT 2 AS PLACEHOLDER, :base_network_code AS VALUE FROM DUMMY;
	    CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_DATASET_NOT_EXTEND_GIVEN_NETWORK', :msg_params, 'E', message);
	    log = SELECT * FROM :message;
	    RETURN;
	END IF;
	
	-- Generate System computed delta

	-- Generate new Network ID
	SELECT "sap.tm.trp.routing.db.path::s_network".NEXTVAL into network_id FROM dummy;
	
	-- Just build delta network when there is delta connection or path
	SELECT COUNT(*) INTO count FROM 
	(SELECT id FROM "sap.tm.trp.routing.db.dataset::t_connection"
        WHERE dataset_id = :dataset_id AND source = :SOURCE_MANUAL
     UNION ALL 
	 SELECT id FROM "sap.tm.trp.routing.db.dataset::t_path"
	    WHERE dataset_id = :dataset_id AND source = :SOURCE_MANUAL
	);
	
	IF :count > 0 THEN
    	CALL "sap.tm.trp.routing.db.path::p_build_delta_network"(:dataset_id, :network_id, :base_network_id, message, log, return_code);
    
    	IF :return_code = 1 THEN
    	    return_code = 8;
    	    RETURN;
    	END IF;
	END IF;
    
	-- It is assumed that settting group will not change in base
	-- or the change should be propogated into delta network
	INSERT INTO "sap.tm.trp.routing.db.path::t_network_model" 
	(id, code, dataset_id, base_network_id, setting_group_id, invalidated, invalidation_reason_code, valid_from, valid_to, created_by, created_on, changed_by, changed_on )
	VALUES (:network_id, :network_code, :dataset_id, :base_network_id, :setting_group_id, '', '', 
	CURRENT_UTCDATE, TO_DATE('9999-12-31', 'YYYY-MM-DD'), SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP, SESSION_CONTEXT('APPLICATIONUSER'), CURRENT_UTCTIMESTAMP);

	msg_params = SELECT 0 AS PLACEHOLDER, :network_code AS VALUE FROM DUMMY;
	CALL "sap.tm.trp.routing.db.common::p_get_text"('MSG_NETWORK_CODE_CREATE_SUCCESS', :msg_params, 'I', message_tmp);
	message =
	SELECT * FROM :message
	UNION ALL
	SELECT * FROM :message_tmp; 
	
	log =
	SELECT * FROM :log
	UNION ALL
	SELECT * FROM :message_tmp;
	
	return_code = 0;
END